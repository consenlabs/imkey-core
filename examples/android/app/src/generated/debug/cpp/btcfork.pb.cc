// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: btcfork.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "btcfork.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace btcforkapi {

namespace {

const ::google::protobuf::Descriptor* Utxo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Utxo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BtcForkTxInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtcForkTxInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* BtcForkTxOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtcForkTxOutput_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_btcfork_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_btcfork_2eproto() {
  protobuf_AddDesc_btcfork_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "btcfork.proto");
  GOOGLE_CHECK(file != NULL);
  Utxo_descriptor_ = file->message_type(0);
  static const int Utxo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utxo, txhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utxo, vout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utxo, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utxo, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utxo, scriptpubkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utxo, derivedpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utxo, sequence_),
  };
  Utxo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Utxo_descriptor_,
      Utxo::internal_default_instance(),
      Utxo_offsets_,
      -1,
      -1,
      -1,
      sizeof(Utxo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utxo, _internal_metadata_));
  BtcForkTxInput_descriptor_ = file->message_type(1);
  static const int BtcForkTxInput_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcForkTxInput, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcForkTxInput, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcForkTxInput, unspents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcForkTxInput, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcForkTxInput, changeaddressindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcForkTxInput, changeaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcForkTxInput, segwit_),
  };
  BtcForkTxInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BtcForkTxInput_descriptor_,
      BtcForkTxInput::internal_default_instance(),
      BtcForkTxInput_offsets_,
      -1,
      -1,
      -1,
      sizeof(BtcForkTxInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcForkTxInput, _internal_metadata_));
  BtcForkTxOutput_descriptor_ = file->message_type(2);
  static const int BtcForkTxOutput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcForkTxOutput, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcForkTxOutput, txhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcForkTxOutput, wtxhash_),
  };
  BtcForkTxOutput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BtcForkTxOutput_descriptor_,
      BtcForkTxOutput::internal_default_instance(),
      BtcForkTxOutput_offsets_,
      -1,
      -1,
      -1,
      sizeof(BtcForkTxOutput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcForkTxOutput, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_btcfork_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Utxo_descriptor_, Utxo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BtcForkTxInput_descriptor_, BtcForkTxInput::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BtcForkTxOutput_descriptor_, BtcForkTxOutput::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_btcfork_2eproto() {
  Utxo_default_instance_.Shutdown();
  delete Utxo_reflection_;
  BtcForkTxInput_default_instance_.Shutdown();
  delete BtcForkTxInput_reflection_;
  BtcForkTxOutput_default_instance_.Shutdown();
  delete BtcForkTxOutput_reflection_;
}

void protobuf_InitDefaults_btcfork_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Utxo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BtcForkTxInput_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BtcForkTxOutput_default_instance_.DefaultConstruct();
  Utxo_default_instance_.get_mutable()->InitAsDefaultInstance();
  BtcForkTxInput_default_instance_.get_mutable()->InitAsDefaultInstance();
  BtcForkTxOutput_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_btcfork_2eproto_once_);
void protobuf_InitDefaults_btcfork_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_btcfork_2eproto_once_,
                 &protobuf_InitDefaults_btcfork_2eproto_impl);
}
void protobuf_AddDesc_btcfork_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_btcfork_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rbtcfork.proto\022\nbtcforkapi\"\202\001\n\004Utxo\022\016\n\006"
    "txHash\030\001 \001(\t\022\014\n\004vout\030\002 \001(\005\022\016\n\006amount\030\003 \001"
    "(\003\022\017\n\007address\030\004 \001(\t\022\024\n\014scriptPubKey\030\005 \001("
    "\t\022\023\n\013derivedPath\030\006 \001(\t\022\020\n\010sequence\030\007 \001(\003"
    "\"\240\001\n\016BtcForkTxInput\022\n\n\002to\030\001 \001(\t\022\016\n\006amoun"
    "t\030\002 \001(\003\022\"\n\010unspents\030\003 \003(\0132\020.btcforkapi.U"
    "txo\022\013\n\003fee\030\004 \001(\003\022\032\n\022changeAddressIndex\030\005"
    " \001(\r\022\025\n\rchangeAddress\030\006 \001(\t\022\016\n\006segWit\030\007 "
    "\001(\t\"E\n\017BtcForkTxOutput\022\021\n\tsignature\030\001 \001("
    "\t\022\016\n\006txHash\030\002 \001(\t\022\017\n\007wtxHash\030\003 \001(\tb\006prot"
    "o3", 402);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "btcfork.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_btcfork_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_btcfork_2eproto_once_);
void protobuf_AddDesc_btcfork_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_btcfork_2eproto_once_,
                 &protobuf_AddDesc_btcfork_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_btcfork_2eproto {
  StaticDescriptorInitializer_btcfork_2eproto() {
    protobuf_AddDesc_btcfork_2eproto();
  }
} static_descriptor_initializer_btcfork_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Utxo::kTxHashFieldNumber;
const int Utxo::kVoutFieldNumber;
const int Utxo::kAmountFieldNumber;
const int Utxo::kAddressFieldNumber;
const int Utxo::kScriptPubKeyFieldNumber;
const int Utxo::kDerivedPathFieldNumber;
const int Utxo::kSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Utxo::Utxo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_btcfork_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:btcforkapi.Utxo)
}

void Utxo::InitAsDefaultInstance() {
}

Utxo::Utxo(const Utxo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:btcforkapi.Utxo)
}

void Utxo::SharedCtor() {
  txhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scriptpubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  derivedpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, reinterpret_cast<char*>(&vout_) -
    reinterpret_cast<char*>(&amount_) + sizeof(vout_));
  _cached_size_ = 0;
}

Utxo::~Utxo() {
  // @@protoc_insertion_point(destructor:btcforkapi.Utxo)
  SharedDtor();
}

void Utxo::SharedDtor() {
  txhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scriptpubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  derivedpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Utxo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Utxo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Utxo_descriptor_;
}

const Utxo& Utxo::default_instance() {
  protobuf_InitDefaults_btcfork_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Utxo> Utxo_default_instance_;

Utxo* Utxo::New(::google::protobuf::Arena* arena) const {
  Utxo* n = new Utxo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Utxo::Clear() {
// @@protoc_insertion_point(message_clear_start:btcforkapi.Utxo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Utxo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Utxo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(amount_, vout_);
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scriptpubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  derivedpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Utxo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:btcforkapi.Utxo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string txHash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txhash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txhash().data(), this->txhash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcforkapi.Utxo.txHash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vout;
        break;
      }

      // optional int32 vout = 2;
      case 2: {
        if (tag == 16) {
         parse_vout:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vout_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // optional int64 amount = 3;
      case 3: {
        if (tag == 24) {
         parse_amount:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_address;
        break;
      }

      // optional string address = 4;
      case 4: {
        if (tag == 34) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcforkapi.Utxo.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_scriptPubKey;
        break;
      }

      // optional string scriptPubKey = 5;
      case 5: {
        if (tag == 42) {
         parse_scriptPubKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scriptpubkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scriptpubkey().data(), this->scriptpubkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcforkapi.Utxo.scriptPubKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_derivedPath;
        break;
      }

      // optional string derivedPath = 6;
      case 6: {
        if (tag == 50) {
         parse_derivedPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_derivedpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->derivedpath().data(), this->derivedpath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcforkapi.Utxo.derivedPath"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sequence;
        break;
      }

      // optional int64 sequence = 7;
      case 7: {
        if (tag == 56) {
         parse_sequence:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:btcforkapi.Utxo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:btcforkapi.Utxo)
  return false;
#undef DO_
}

void Utxo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:btcforkapi.Utxo)
  // optional string txHash = 1;
  if (this->txhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txhash().data(), this->txhash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.Utxo.txHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txhash(), output);
  }

  // optional int32 vout = 2;
  if (this->vout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vout(), output);
  }

  // optional int64 amount = 3;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->amount(), output);
  }

  // optional string address = 4;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.Utxo.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->address(), output);
  }

  // optional string scriptPubKey = 5;
  if (this->scriptpubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scriptpubkey().data(), this->scriptpubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.Utxo.scriptPubKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->scriptpubkey(), output);
  }

  // optional string derivedPath = 6;
  if (this->derivedpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->derivedpath().data(), this->derivedpath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.Utxo.derivedPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->derivedpath(), output);
  }

  // optional int64 sequence = 7;
  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->sequence(), output);
  }

  // @@protoc_insertion_point(serialize_end:btcforkapi.Utxo)
}

::google::protobuf::uint8* Utxo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:btcforkapi.Utxo)
  // optional string txHash = 1;
  if (this->txhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txhash().data(), this->txhash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.Utxo.txHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txhash(), target);
  }

  // optional int32 vout = 2;
  if (this->vout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vout(), target);
  }

  // optional int64 amount = 3;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->amount(), target);
  }

  // optional string address = 4;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.Utxo.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->address(), target);
  }

  // optional string scriptPubKey = 5;
  if (this->scriptpubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scriptpubkey().data(), this->scriptpubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.Utxo.scriptPubKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->scriptpubkey(), target);
  }

  // optional string derivedPath = 6;
  if (this->derivedpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->derivedpath().data(), this->derivedpath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.Utxo.derivedPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->derivedpath(), target);
  }

  // optional int64 sequence = 7;
  if (this->sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->sequence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:btcforkapi.Utxo)
  return target;
}

size_t Utxo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:btcforkapi.Utxo)
  size_t total_size = 0;

  // optional string txHash = 1;
  if (this->txhash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txhash());
  }

  // optional int32 vout = 2;
  if (this->vout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vout());
  }

  // optional int64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->amount());
  }

  // optional string address = 4;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // optional string scriptPubKey = 5;
  if (this->scriptpubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scriptpubkey());
  }

  // optional string derivedPath = 6;
  if (this->derivedpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->derivedpath());
  }

  // optional int64 sequence = 7;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Utxo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:btcforkapi.Utxo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Utxo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Utxo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:btcforkapi.Utxo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:btcforkapi.Utxo)
    UnsafeMergeFrom(*source);
  }
}

void Utxo::MergeFrom(const Utxo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:btcforkapi.Utxo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Utxo::UnsafeMergeFrom(const Utxo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.txhash().size() > 0) {

    txhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txhash_);
  }
  if (from.vout() != 0) {
    set_vout(from.vout());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.scriptpubkey().size() > 0) {

    scriptpubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scriptpubkey_);
  }
  if (from.derivedpath().size() > 0) {

    derivedpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.derivedpath_);
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
}

void Utxo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:btcforkapi.Utxo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Utxo::CopyFrom(const Utxo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:btcforkapi.Utxo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Utxo::IsInitialized() const {

  return true;
}

void Utxo::Swap(Utxo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Utxo::InternalSwap(Utxo* other) {
  txhash_.Swap(&other->txhash_);
  std::swap(vout_, other->vout_);
  std::swap(amount_, other->amount_);
  address_.Swap(&other->address_);
  scriptpubkey_.Swap(&other->scriptpubkey_);
  derivedpath_.Swap(&other->derivedpath_);
  std::swap(sequence_, other->sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Utxo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Utxo_descriptor_;
  metadata.reflection = Utxo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Utxo

// optional string txHash = 1;
void Utxo::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Utxo::txhash() const {
  // @@protoc_insertion_point(field_get:btcforkapi.Utxo.txHash)
  return txhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Utxo::set_txhash(const ::std::string& value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.Utxo.txHash)
}
void Utxo::set_txhash(const char* value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.Utxo.txHash)
}
void Utxo::set_txhash(const char* value, size_t size) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.Utxo.txHash)
}
::std::string* Utxo::mutable_txhash() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.Utxo.txHash)
  return txhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Utxo::release_txhash() {
  // @@protoc_insertion_point(field_release:btcforkapi.Utxo.txHash)
  
  return txhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Utxo::set_allocated_txhash(::std::string* txhash) {
  if (txhash != NULL) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.Utxo.txHash)
}

// optional int32 vout = 2;
void Utxo::clear_vout() {
  vout_ = 0;
}
::google::protobuf::int32 Utxo::vout() const {
  // @@protoc_insertion_point(field_get:btcforkapi.Utxo.vout)
  return vout_;
}
void Utxo::set_vout(::google::protobuf::int32 value) {
  
  vout_ = value;
  // @@protoc_insertion_point(field_set:btcforkapi.Utxo.vout)
}

// optional int64 amount = 3;
void Utxo::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Utxo::amount() const {
  // @@protoc_insertion_point(field_get:btcforkapi.Utxo.amount)
  return amount_;
}
void Utxo::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:btcforkapi.Utxo.amount)
}

// optional string address = 4;
void Utxo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Utxo::address() const {
  // @@protoc_insertion_point(field_get:btcforkapi.Utxo.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Utxo::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.Utxo.address)
}
void Utxo::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.Utxo.address)
}
void Utxo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.Utxo.address)
}
::std::string* Utxo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.Utxo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Utxo::release_address() {
  // @@protoc_insertion_point(field_release:btcforkapi.Utxo.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Utxo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.Utxo.address)
}

// optional string scriptPubKey = 5;
void Utxo::clear_scriptpubkey() {
  scriptpubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Utxo::scriptpubkey() const {
  // @@protoc_insertion_point(field_get:btcforkapi.Utxo.scriptPubKey)
  return scriptpubkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Utxo::set_scriptpubkey(const ::std::string& value) {
  
  scriptpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.Utxo.scriptPubKey)
}
void Utxo::set_scriptpubkey(const char* value) {
  
  scriptpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.Utxo.scriptPubKey)
}
void Utxo::set_scriptpubkey(const char* value, size_t size) {
  
  scriptpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.Utxo.scriptPubKey)
}
::std::string* Utxo::mutable_scriptpubkey() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.Utxo.scriptPubKey)
  return scriptpubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Utxo::release_scriptpubkey() {
  // @@protoc_insertion_point(field_release:btcforkapi.Utxo.scriptPubKey)
  
  return scriptpubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Utxo::set_allocated_scriptpubkey(::std::string* scriptpubkey) {
  if (scriptpubkey != NULL) {
    
  } else {
    
  }
  scriptpubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scriptpubkey);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.Utxo.scriptPubKey)
}

// optional string derivedPath = 6;
void Utxo::clear_derivedpath() {
  derivedpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Utxo::derivedpath() const {
  // @@protoc_insertion_point(field_get:btcforkapi.Utxo.derivedPath)
  return derivedpath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Utxo::set_derivedpath(const ::std::string& value) {
  
  derivedpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.Utxo.derivedPath)
}
void Utxo::set_derivedpath(const char* value) {
  
  derivedpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.Utxo.derivedPath)
}
void Utxo::set_derivedpath(const char* value, size_t size) {
  
  derivedpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.Utxo.derivedPath)
}
::std::string* Utxo::mutable_derivedpath() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.Utxo.derivedPath)
  return derivedpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Utxo::release_derivedpath() {
  // @@protoc_insertion_point(field_release:btcforkapi.Utxo.derivedPath)
  
  return derivedpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Utxo::set_allocated_derivedpath(::std::string* derivedpath) {
  if (derivedpath != NULL) {
    
  } else {
    
  }
  derivedpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), derivedpath);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.Utxo.derivedPath)
}

// optional int64 sequence = 7;
void Utxo::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Utxo::sequence() const {
  // @@protoc_insertion_point(field_get:btcforkapi.Utxo.sequence)
  return sequence_;
}
void Utxo::set_sequence(::google::protobuf::int64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:btcforkapi.Utxo.sequence)
}

inline const Utxo* Utxo::internal_default_instance() {
  return &Utxo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BtcForkTxInput::kToFieldNumber;
const int BtcForkTxInput::kAmountFieldNumber;
const int BtcForkTxInput::kUnspentsFieldNumber;
const int BtcForkTxInput::kFeeFieldNumber;
const int BtcForkTxInput::kChangeAddressIndexFieldNumber;
const int BtcForkTxInput::kChangeAddressFieldNumber;
const int BtcForkTxInput::kSegWitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BtcForkTxInput::BtcForkTxInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_btcfork_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:btcforkapi.BtcForkTxInput)
}

void BtcForkTxInput::InitAsDefaultInstance() {
}

BtcForkTxInput::BtcForkTxInput(const BtcForkTxInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:btcforkapi.BtcForkTxInput)
}

void BtcForkTxInput::SharedCtor() {
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  changeaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  segwit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, reinterpret_cast<char*>(&changeaddressindex_) -
    reinterpret_cast<char*>(&amount_) + sizeof(changeaddressindex_));
  _cached_size_ = 0;
}

BtcForkTxInput::~BtcForkTxInput() {
  // @@protoc_insertion_point(destructor:btcforkapi.BtcForkTxInput)
  SharedDtor();
}

void BtcForkTxInput::SharedDtor() {
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  changeaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  segwit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BtcForkTxInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtcForkTxInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtcForkTxInput_descriptor_;
}

const BtcForkTxInput& BtcForkTxInput::default_instance() {
  protobuf_InitDefaults_btcfork_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BtcForkTxInput> BtcForkTxInput_default_instance_;

BtcForkTxInput* BtcForkTxInput::New(::google::protobuf::Arena* arena) const {
  BtcForkTxInput* n = new BtcForkTxInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BtcForkTxInput::Clear() {
// @@protoc_insertion_point(message_clear_start:btcforkapi.BtcForkTxInput)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BtcForkTxInput, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BtcForkTxInput*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(amount_, changeaddressindex_);
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  changeaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  segwit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  unspents_.Clear();
}

bool BtcForkTxInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:btcforkapi.BtcForkTxInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string to = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcforkapi.BtcForkTxInput.to"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional int64 amount = 2;
      case 2: {
        if (tag == 16) {
         parse_amount:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_unspents;
        break;
      }

      // repeated .btcforkapi.Utxo unspents = 3;
      case 3: {
        if (tag == 26) {
         parse_unspents:
          DO_(input->IncrementRecursionDepth());
         parse_loop_unspents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_unspents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_unspents;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_fee;
        break;
      }

      // optional int64 fee = 4;
      case 4: {
        if (tag == 32) {
         parse_fee:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fee_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_changeAddressIndex;
        break;
      }

      // optional uint32 changeAddressIndex = 5;
      case 5: {
        if (tag == 40) {
         parse_changeAddressIndex:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &changeaddressindex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_changeAddress;
        break;
      }

      // optional string changeAddress = 6;
      case 6: {
        if (tag == 50) {
         parse_changeAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_changeaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->changeaddress().data(), this->changeaddress().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcforkapi.BtcForkTxInput.changeAddress"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_segWit;
        break;
      }

      // optional string segWit = 7;
      case 7: {
        if (tag == 58) {
         parse_segWit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_segwit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->segwit().data(), this->segwit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcforkapi.BtcForkTxInput.segWit"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:btcforkapi.BtcForkTxInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:btcforkapi.BtcForkTxInput)
  return false;
#undef DO_
}

void BtcForkTxInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:btcforkapi.BtcForkTxInput)
  // optional string to = 1;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.BtcForkTxInput.to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->to(), output);
  }

  // optional int64 amount = 2;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->amount(), output);
  }

  // repeated .btcforkapi.Utxo unspents = 3;
  for (unsigned int i = 0, n = this->unspents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unspents(i), output);
  }

  // optional int64 fee = 4;
  if (this->fee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->fee(), output);
  }

  // optional uint32 changeAddressIndex = 5;
  if (this->changeaddressindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->changeaddressindex(), output);
  }

  // optional string changeAddress = 6;
  if (this->changeaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->changeaddress().data(), this->changeaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.BtcForkTxInput.changeAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->changeaddress(), output);
  }

  // optional string segWit = 7;
  if (this->segwit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->segwit().data(), this->segwit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.BtcForkTxInput.segWit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->segwit(), output);
  }

  // @@protoc_insertion_point(serialize_end:btcforkapi.BtcForkTxInput)
}

::google::protobuf::uint8* BtcForkTxInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:btcforkapi.BtcForkTxInput)
  // optional string to = 1;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.BtcForkTxInput.to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->to(), target);
  }

  // optional int64 amount = 2;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->amount(), target);
  }

  // repeated .btcforkapi.Utxo unspents = 3;
  for (unsigned int i = 0, n = this->unspents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->unspents(i), false, target);
  }

  // optional int64 fee = 4;
  if (this->fee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->fee(), target);
  }

  // optional uint32 changeAddressIndex = 5;
  if (this->changeaddressindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->changeaddressindex(), target);
  }

  // optional string changeAddress = 6;
  if (this->changeaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->changeaddress().data(), this->changeaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.BtcForkTxInput.changeAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->changeaddress(), target);
  }

  // optional string segWit = 7;
  if (this->segwit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->segwit().data(), this->segwit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.BtcForkTxInput.segWit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->segwit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:btcforkapi.BtcForkTxInput)
  return target;
}

size_t BtcForkTxInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:btcforkapi.BtcForkTxInput)
  size_t total_size = 0;

  // optional string to = 1;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to());
  }

  // optional int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->amount());
  }

  // optional int64 fee = 4;
  if (this->fee() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fee());
  }

  // optional uint32 changeAddressIndex = 5;
  if (this->changeaddressindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->changeaddressindex());
  }

  // optional string changeAddress = 6;
  if (this->changeaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->changeaddress());
  }

  // optional string segWit = 7;
  if (this->segwit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->segwit());
  }

  // repeated .btcforkapi.Utxo unspents = 3;
  {
    unsigned int count = this->unspents_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unspents(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtcForkTxInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:btcforkapi.BtcForkTxInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BtcForkTxInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BtcForkTxInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:btcforkapi.BtcForkTxInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:btcforkapi.BtcForkTxInput)
    UnsafeMergeFrom(*source);
  }
}

void BtcForkTxInput::MergeFrom(const BtcForkTxInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:btcforkapi.BtcForkTxInput)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BtcForkTxInput::UnsafeMergeFrom(const BtcForkTxInput& from) {
  GOOGLE_DCHECK(&from != this);
  unspents_.MergeFrom(from.unspents_);
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.fee() != 0) {
    set_fee(from.fee());
  }
  if (from.changeaddressindex() != 0) {
    set_changeaddressindex(from.changeaddressindex());
  }
  if (from.changeaddress().size() > 0) {

    changeaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.changeaddress_);
  }
  if (from.segwit().size() > 0) {

    segwit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.segwit_);
  }
}

void BtcForkTxInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:btcforkapi.BtcForkTxInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtcForkTxInput::CopyFrom(const BtcForkTxInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:btcforkapi.BtcForkTxInput)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BtcForkTxInput::IsInitialized() const {

  return true;
}

void BtcForkTxInput::Swap(BtcForkTxInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BtcForkTxInput::InternalSwap(BtcForkTxInput* other) {
  to_.Swap(&other->to_);
  std::swap(amount_, other->amount_);
  unspents_.UnsafeArenaSwap(&other->unspents_);
  std::swap(fee_, other->fee_);
  std::swap(changeaddressindex_, other->changeaddressindex_);
  changeaddress_.Swap(&other->changeaddress_);
  segwit_.Swap(&other->segwit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BtcForkTxInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtcForkTxInput_descriptor_;
  metadata.reflection = BtcForkTxInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BtcForkTxInput

// optional string to = 1;
void BtcForkTxInput::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcForkTxInput::to() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxInput.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcForkTxInput::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxInput.to)
}
void BtcForkTxInput::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.BtcForkTxInput.to)
}
void BtcForkTxInput::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.BtcForkTxInput.to)
}
::std::string* BtcForkTxInput::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.BtcForkTxInput.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcForkTxInput::release_to() {
  // @@protoc_insertion_point(field_release:btcforkapi.BtcForkTxInput.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcForkTxInput::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.BtcForkTxInput.to)
}

// optional int64 amount = 2;
void BtcForkTxInput::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 BtcForkTxInput::amount() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxInput.amount)
  return amount_;
}
void BtcForkTxInput::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxInput.amount)
}

// repeated .btcforkapi.Utxo unspents = 3;
int BtcForkTxInput::unspents_size() const {
  return unspents_.size();
}
void BtcForkTxInput::clear_unspents() {
  unspents_.Clear();
}
const ::btcforkapi::Utxo& BtcForkTxInput::unspents(int index) const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxInput.unspents)
  return unspents_.Get(index);
}
::btcforkapi::Utxo* BtcForkTxInput::mutable_unspents(int index) {
  // @@protoc_insertion_point(field_mutable:btcforkapi.BtcForkTxInput.unspents)
  return unspents_.Mutable(index);
}
::btcforkapi::Utxo* BtcForkTxInput::add_unspents() {
  // @@protoc_insertion_point(field_add:btcforkapi.BtcForkTxInput.unspents)
  return unspents_.Add();
}
::google::protobuf::RepeatedPtrField< ::btcforkapi::Utxo >*
BtcForkTxInput::mutable_unspents() {
  // @@protoc_insertion_point(field_mutable_list:btcforkapi.BtcForkTxInput.unspents)
  return &unspents_;
}
const ::google::protobuf::RepeatedPtrField< ::btcforkapi::Utxo >&
BtcForkTxInput::unspents() const {
  // @@protoc_insertion_point(field_list:btcforkapi.BtcForkTxInput.unspents)
  return unspents_;
}

// optional int64 fee = 4;
void BtcForkTxInput::clear_fee() {
  fee_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 BtcForkTxInput::fee() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxInput.fee)
  return fee_;
}
void BtcForkTxInput::set_fee(::google::protobuf::int64 value) {
  
  fee_ = value;
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxInput.fee)
}

// optional uint32 changeAddressIndex = 5;
void BtcForkTxInput::clear_changeaddressindex() {
  changeaddressindex_ = 0u;
}
::google::protobuf::uint32 BtcForkTxInput::changeaddressindex() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxInput.changeAddressIndex)
  return changeaddressindex_;
}
void BtcForkTxInput::set_changeaddressindex(::google::protobuf::uint32 value) {
  
  changeaddressindex_ = value;
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxInput.changeAddressIndex)
}

// optional string changeAddress = 6;
void BtcForkTxInput::clear_changeaddress() {
  changeaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcForkTxInput::changeaddress() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxInput.changeAddress)
  return changeaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcForkTxInput::set_changeaddress(const ::std::string& value) {
  
  changeaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxInput.changeAddress)
}
void BtcForkTxInput::set_changeaddress(const char* value) {
  
  changeaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.BtcForkTxInput.changeAddress)
}
void BtcForkTxInput::set_changeaddress(const char* value, size_t size) {
  
  changeaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.BtcForkTxInput.changeAddress)
}
::std::string* BtcForkTxInput::mutable_changeaddress() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.BtcForkTxInput.changeAddress)
  return changeaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcForkTxInput::release_changeaddress() {
  // @@protoc_insertion_point(field_release:btcforkapi.BtcForkTxInput.changeAddress)
  
  return changeaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcForkTxInput::set_allocated_changeaddress(::std::string* changeaddress) {
  if (changeaddress != NULL) {
    
  } else {
    
  }
  changeaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), changeaddress);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.BtcForkTxInput.changeAddress)
}

// optional string segWit = 7;
void BtcForkTxInput::clear_segwit() {
  segwit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcForkTxInput::segwit() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxInput.segWit)
  return segwit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcForkTxInput::set_segwit(const ::std::string& value) {
  
  segwit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxInput.segWit)
}
void BtcForkTxInput::set_segwit(const char* value) {
  
  segwit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.BtcForkTxInput.segWit)
}
void BtcForkTxInput::set_segwit(const char* value, size_t size) {
  
  segwit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.BtcForkTxInput.segWit)
}
::std::string* BtcForkTxInput::mutable_segwit() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.BtcForkTxInput.segWit)
  return segwit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcForkTxInput::release_segwit() {
  // @@protoc_insertion_point(field_release:btcforkapi.BtcForkTxInput.segWit)
  
  return segwit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcForkTxInput::set_allocated_segwit(::std::string* segwit) {
  if (segwit != NULL) {
    
  } else {
    
  }
  segwit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), segwit);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.BtcForkTxInput.segWit)
}

inline const BtcForkTxInput* BtcForkTxInput::internal_default_instance() {
  return &BtcForkTxInput_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BtcForkTxOutput::kSignatureFieldNumber;
const int BtcForkTxOutput::kTxHashFieldNumber;
const int BtcForkTxOutput::kWtxHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BtcForkTxOutput::BtcForkTxOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_btcfork_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:btcforkapi.BtcForkTxOutput)
}

void BtcForkTxOutput::InitAsDefaultInstance() {
}

BtcForkTxOutput::BtcForkTxOutput(const BtcForkTxOutput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:btcforkapi.BtcForkTxOutput)
}

void BtcForkTxOutput::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wtxhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BtcForkTxOutput::~BtcForkTxOutput() {
  // @@protoc_insertion_point(destructor:btcforkapi.BtcForkTxOutput)
  SharedDtor();
}

void BtcForkTxOutput::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wtxhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BtcForkTxOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtcForkTxOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtcForkTxOutput_descriptor_;
}

const BtcForkTxOutput& BtcForkTxOutput::default_instance() {
  protobuf_InitDefaults_btcfork_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BtcForkTxOutput> BtcForkTxOutput_default_instance_;

BtcForkTxOutput* BtcForkTxOutput::New(::google::protobuf::Arena* arena) const {
  BtcForkTxOutput* n = new BtcForkTxOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BtcForkTxOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:btcforkapi.BtcForkTxOutput)
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wtxhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BtcForkTxOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:btcforkapi.BtcForkTxOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string signature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcforkapi.BtcForkTxOutput.signature"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txHash;
        break;
      }

      // optional string txHash = 2;
      case 2: {
        if (tag == 18) {
         parse_txHash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txhash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txhash().data(), this->txhash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcforkapi.BtcForkTxOutput.txHash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wtxHash;
        break;
      }

      // optional string wtxHash = 3;
      case 3: {
        if (tag == 26) {
         parse_wtxHash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wtxhash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->wtxhash().data(), this->wtxhash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcforkapi.BtcForkTxOutput.wtxHash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:btcforkapi.BtcForkTxOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:btcforkapi.BtcForkTxOutput)
  return false;
#undef DO_
}

void BtcForkTxOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:btcforkapi.BtcForkTxOutput)
  // optional string signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.BtcForkTxOutput.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signature(), output);
  }

  // optional string txHash = 2;
  if (this->txhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txhash().data(), this->txhash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.BtcForkTxOutput.txHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->txhash(), output);
  }

  // optional string wtxHash = 3;
  if (this->wtxhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wtxhash().data(), this->wtxhash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.BtcForkTxOutput.wtxHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->wtxhash(), output);
  }

  // @@protoc_insertion_point(serialize_end:btcforkapi.BtcForkTxOutput)
}

::google::protobuf::uint8* BtcForkTxOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:btcforkapi.BtcForkTxOutput)
  // optional string signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.BtcForkTxOutput.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signature(), target);
  }

  // optional string txHash = 2;
  if (this->txhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txhash().data(), this->txhash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.BtcForkTxOutput.txHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->txhash(), target);
  }

  // optional string wtxHash = 3;
  if (this->wtxhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wtxhash().data(), this->wtxhash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcforkapi.BtcForkTxOutput.wtxHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->wtxhash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:btcforkapi.BtcForkTxOutput)
  return target;
}

size_t BtcForkTxOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:btcforkapi.BtcForkTxOutput)
  size_t total_size = 0;

  // optional string signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  // optional string txHash = 2;
  if (this->txhash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txhash());
  }

  // optional string wtxHash = 3;
  if (this->wtxhash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wtxhash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtcForkTxOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:btcforkapi.BtcForkTxOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BtcForkTxOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BtcForkTxOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:btcforkapi.BtcForkTxOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:btcforkapi.BtcForkTxOutput)
    UnsafeMergeFrom(*source);
  }
}

void BtcForkTxOutput::MergeFrom(const BtcForkTxOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:btcforkapi.BtcForkTxOutput)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BtcForkTxOutput::UnsafeMergeFrom(const BtcForkTxOutput& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.txhash().size() > 0) {

    txhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txhash_);
  }
  if (from.wtxhash().size() > 0) {

    wtxhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wtxhash_);
  }
}

void BtcForkTxOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:btcforkapi.BtcForkTxOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtcForkTxOutput::CopyFrom(const BtcForkTxOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:btcforkapi.BtcForkTxOutput)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BtcForkTxOutput::IsInitialized() const {

  return true;
}

void BtcForkTxOutput::Swap(BtcForkTxOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BtcForkTxOutput::InternalSwap(BtcForkTxOutput* other) {
  signature_.Swap(&other->signature_);
  txhash_.Swap(&other->txhash_);
  wtxhash_.Swap(&other->wtxhash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BtcForkTxOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtcForkTxOutput_descriptor_;
  metadata.reflection = BtcForkTxOutput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BtcForkTxOutput

// optional string signature = 1;
void BtcForkTxOutput::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcForkTxOutput::signature() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxOutput.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcForkTxOutput::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxOutput.signature)
}
void BtcForkTxOutput::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.BtcForkTxOutput.signature)
}
void BtcForkTxOutput::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.BtcForkTxOutput.signature)
}
::std::string* BtcForkTxOutput::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.BtcForkTxOutput.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcForkTxOutput::release_signature() {
  // @@protoc_insertion_point(field_release:btcforkapi.BtcForkTxOutput.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcForkTxOutput::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.BtcForkTxOutput.signature)
}

// optional string txHash = 2;
void BtcForkTxOutput::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcForkTxOutput::txhash() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxOutput.txHash)
  return txhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcForkTxOutput::set_txhash(const ::std::string& value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxOutput.txHash)
}
void BtcForkTxOutput::set_txhash(const char* value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.BtcForkTxOutput.txHash)
}
void BtcForkTxOutput::set_txhash(const char* value, size_t size) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.BtcForkTxOutput.txHash)
}
::std::string* BtcForkTxOutput::mutable_txhash() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.BtcForkTxOutput.txHash)
  return txhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcForkTxOutput::release_txhash() {
  // @@protoc_insertion_point(field_release:btcforkapi.BtcForkTxOutput.txHash)
  
  return txhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcForkTxOutput::set_allocated_txhash(::std::string* txhash) {
  if (txhash != NULL) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.BtcForkTxOutput.txHash)
}

// optional string wtxHash = 3;
void BtcForkTxOutput::clear_wtxhash() {
  wtxhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcForkTxOutput::wtxhash() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxOutput.wtxHash)
  return wtxhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcForkTxOutput::set_wtxhash(const ::std::string& value) {
  
  wtxhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxOutput.wtxHash)
}
void BtcForkTxOutput::set_wtxhash(const char* value) {
  
  wtxhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.BtcForkTxOutput.wtxHash)
}
void BtcForkTxOutput::set_wtxhash(const char* value, size_t size) {
  
  wtxhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.BtcForkTxOutput.wtxHash)
}
::std::string* BtcForkTxOutput::mutable_wtxhash() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.BtcForkTxOutput.wtxHash)
  return wtxhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcForkTxOutput::release_wtxhash() {
  // @@protoc_insertion_point(field_release:btcforkapi.BtcForkTxOutput.wtxHash)
  
  return wtxhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcForkTxOutput::set_allocated_wtxhash(::std::string* wtxhash) {
  if (wtxhash != NULL) {
    
  } else {
    
  }
  wtxhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wtxhash);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.BtcForkTxOutput.wtxHash)
}

inline const BtcForkTxOutput* BtcForkTxOutput::internal_default_instance() {
  return &BtcForkTxOutput_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace btcforkapi

// @@protoc_insertion_point(global_scope)
