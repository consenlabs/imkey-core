// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tron.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tron.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tronapi {

namespace {

const ::google::protobuf::Descriptor* TronTxInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TronTxInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* TronTxOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TronTxOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* TronMessageInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TronMessageInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* TronMessageOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TronMessageOutput_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tron_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tron_2eproto() {
  protobuf_AddDesc_tron_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tron.proto");
  GOOGLE_CHECK(file != NULL);
  TronTxInput_descriptor_ = file->message_type(0);
  static const int TronTxInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TronTxInput, raw_data_),
  };
  TronTxInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TronTxInput_descriptor_,
      TronTxInput::internal_default_instance(),
      TronTxInput_offsets_,
      -1,
      -1,
      -1,
      sizeof(TronTxInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TronTxInput, _internal_metadata_));
  TronTxOutput_descriptor_ = file->message_type(1);
  static const int TronTxOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TronTxOutput, signature_),
  };
  TronTxOutput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TronTxOutput_descriptor_,
      TronTxOutput::internal_default_instance(),
      TronTxOutput_offsets_,
      -1,
      -1,
      -1,
      sizeof(TronTxOutput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TronTxOutput, _internal_metadata_));
  TronMessageInput_descriptor_ = file->message_type(2);
  static const int TronMessageInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TronMessageInput, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TronMessageInput, is_hex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TronMessageInput, is_tron_header_),
  };
  TronMessageInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TronMessageInput_descriptor_,
      TronMessageInput::internal_default_instance(),
      TronMessageInput_offsets_,
      -1,
      -1,
      -1,
      sizeof(TronMessageInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TronMessageInput, _internal_metadata_));
  TronMessageOutput_descriptor_ = file->message_type(3);
  static const int TronMessageOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TronMessageOutput, signature_),
  };
  TronMessageOutput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TronMessageOutput_descriptor_,
      TronMessageOutput::internal_default_instance(),
      TronMessageOutput_offsets_,
      -1,
      -1,
      -1,
      sizeof(TronMessageOutput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TronMessageOutput, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tron_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TronTxInput_descriptor_, TronTxInput::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TronTxOutput_descriptor_, TronTxOutput::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TronMessageInput_descriptor_, TronMessageInput::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TronMessageOutput_descriptor_, TronMessageOutput::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tron_2eproto() {
  TronTxInput_default_instance_.Shutdown();
  delete TronTxInput_reflection_;
  TronTxOutput_default_instance_.Shutdown();
  delete TronTxOutput_reflection_;
  TronMessageInput_default_instance_.Shutdown();
  delete TronMessageInput_reflection_;
  TronMessageOutput_default_instance_.Shutdown();
  delete TronMessageOutput_reflection_;
}

void protobuf_InitDefaults_tron_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  TronTxInput_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TronTxOutput_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TronMessageInput_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TronMessageOutput_default_instance_.DefaultConstruct();
  TronTxInput_default_instance_.get_mutable()->InitAsDefaultInstance();
  TronTxOutput_default_instance_.get_mutable()->InitAsDefaultInstance();
  TronMessageInput_default_instance_.get_mutable()->InitAsDefaultInstance();
  TronMessageOutput_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tron_2eproto_once_);
void protobuf_InitDefaults_tron_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tron_2eproto_once_,
                 &protobuf_InitDefaults_tron_2eproto_impl);
}
void protobuf_AddDesc_tron_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tron_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntron.proto\022\007tronapi\"\037\n\013TronTxInput\022\020\n\010"
    "raw_data\030\002 \001(\t\"!\n\014TronTxOutput\022\021\n\tsignat"
    "ure\030\001 \001(\t\"K\n\020TronMessageInput\022\017\n\007message"
    "\030\002 \001(\t\022\016\n\006is_hex\030\004 \001(\010\022\026\n\016is_tron_header"
    "\030\005 \001(\010\"&\n\021TronMessageOutput\022\021\n\tsignature"
    "\030\001 \001(\tb\006proto3", 214);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tron.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tron_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tron_2eproto_once_);
void protobuf_AddDesc_tron_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tron_2eproto_once_,
                 &protobuf_AddDesc_tron_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tron_2eproto {
  StaticDescriptorInitializer_tron_2eproto() {
    protobuf_AddDesc_tron_2eproto();
  }
} static_descriptor_initializer_tron_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronTxInput::kRawDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronTxInput::TronTxInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tron_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tronapi.TronTxInput)
}

void TronTxInput::InitAsDefaultInstance() {
}

TronTxInput::TronTxInput(const TronTxInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tronapi.TronTxInput)
}

void TronTxInput::SharedCtor() {
  raw_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TronTxInput::~TronTxInput() {
  // @@protoc_insertion_point(destructor:tronapi.TronTxInput)
  SharedDtor();
}

void TronTxInput::SharedDtor() {
  raw_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TronTxInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TronTxInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TronTxInput_descriptor_;
}

const TronTxInput& TronTxInput::default_instance() {
  protobuf_InitDefaults_tron_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TronTxInput> TronTxInput_default_instance_;

TronTxInput* TronTxInput::New(::google::protobuf::Arena* arena) const {
  TronTxInput* n = new TronTxInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TronTxInput::Clear() {
// @@protoc_insertion_point(message_clear_start:tronapi.TronTxInput)
  raw_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TronTxInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tronapi.TronTxInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string raw_data = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->raw_data().data(), this->raw_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tronapi.TronTxInput.raw_data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tronapi.TronTxInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tronapi.TronTxInput)
  return false;
#undef DO_
}

void TronTxInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tronapi.TronTxInput)
  // optional string raw_data = 2;
  if (this->raw_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raw_data().data(), this->raw_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tronapi.TronTxInput.raw_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->raw_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:tronapi.TronTxInput)
}

::google::protobuf::uint8* TronTxInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tronapi.TronTxInput)
  // optional string raw_data = 2;
  if (this->raw_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raw_data().data(), this->raw_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tronapi.TronTxInput.raw_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->raw_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tronapi.TronTxInput)
  return target;
}

size_t TronTxInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tronapi.TronTxInput)
  size_t total_size = 0;

  // optional string raw_data = 2;
  if (this->raw_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->raw_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TronTxInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tronapi.TronTxInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TronTxInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TronTxInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tronapi.TronTxInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tronapi.TronTxInput)
    UnsafeMergeFrom(*source);
  }
}

void TronTxInput::MergeFrom(const TronTxInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tronapi.TronTxInput)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TronTxInput::UnsafeMergeFrom(const TronTxInput& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.raw_data().size() > 0) {

    raw_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_data_);
  }
}

void TronTxInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tronapi.TronTxInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronTxInput::CopyFrom(const TronTxInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tronapi.TronTxInput)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TronTxInput::IsInitialized() const {

  return true;
}

void TronTxInput::Swap(TronTxInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronTxInput::InternalSwap(TronTxInput* other) {
  raw_data_.Swap(&other->raw_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TronTxInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TronTxInput_descriptor_;
  metadata.reflection = TronTxInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TronTxInput

// optional string raw_data = 2;
void TronTxInput::clear_raw_data() {
  raw_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TronTxInput::raw_data() const {
  // @@protoc_insertion_point(field_get:tronapi.TronTxInput.raw_data)
  return raw_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TronTxInput::set_raw_data(const ::std::string& value) {
  
  raw_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tronapi.TronTxInput.raw_data)
}
void TronTxInput::set_raw_data(const char* value) {
  
  raw_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tronapi.TronTxInput.raw_data)
}
void TronTxInput::set_raw_data(const char* value, size_t size) {
  
  raw_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tronapi.TronTxInput.raw_data)
}
::std::string* TronTxInput::mutable_raw_data() {
  
  // @@protoc_insertion_point(field_mutable:tronapi.TronTxInput.raw_data)
  return raw_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TronTxInput::release_raw_data() {
  // @@protoc_insertion_point(field_release:tronapi.TronTxInput.raw_data)
  
  return raw_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TronTxInput::set_allocated_raw_data(::std::string* raw_data) {
  if (raw_data != NULL) {
    
  } else {
    
  }
  raw_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_data);
  // @@protoc_insertion_point(field_set_allocated:tronapi.TronTxInput.raw_data)
}

inline const TronTxInput* TronTxInput::internal_default_instance() {
  return &TronTxInput_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronTxOutput::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronTxOutput::TronTxOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tron_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tronapi.TronTxOutput)
}

void TronTxOutput::InitAsDefaultInstance() {
}

TronTxOutput::TronTxOutput(const TronTxOutput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tronapi.TronTxOutput)
}

void TronTxOutput::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TronTxOutput::~TronTxOutput() {
  // @@protoc_insertion_point(destructor:tronapi.TronTxOutput)
  SharedDtor();
}

void TronTxOutput::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TronTxOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TronTxOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TronTxOutput_descriptor_;
}

const TronTxOutput& TronTxOutput::default_instance() {
  protobuf_InitDefaults_tron_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TronTxOutput> TronTxOutput_default_instance_;

TronTxOutput* TronTxOutput::New(::google::protobuf::Arena* arena) const {
  TronTxOutput* n = new TronTxOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TronTxOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:tronapi.TronTxOutput)
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TronTxOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tronapi.TronTxOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string signature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tronapi.TronTxOutput.signature"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tronapi.TronTxOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tronapi.TronTxOutput)
  return false;
#undef DO_
}

void TronTxOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tronapi.TronTxOutput)
  // optional string signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tronapi.TronTxOutput.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signature(), output);
  }

  // @@protoc_insertion_point(serialize_end:tronapi.TronTxOutput)
}

::google::protobuf::uint8* TronTxOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tronapi.TronTxOutput)
  // optional string signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tronapi.TronTxOutput.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tronapi.TronTxOutput)
  return target;
}

size_t TronTxOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tronapi.TronTxOutput)
  size_t total_size = 0;

  // optional string signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TronTxOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tronapi.TronTxOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TronTxOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TronTxOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tronapi.TronTxOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tronapi.TronTxOutput)
    UnsafeMergeFrom(*source);
  }
}

void TronTxOutput::MergeFrom(const TronTxOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tronapi.TronTxOutput)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TronTxOutput::UnsafeMergeFrom(const TronTxOutput& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void TronTxOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tronapi.TronTxOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronTxOutput::CopyFrom(const TronTxOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tronapi.TronTxOutput)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TronTxOutput::IsInitialized() const {

  return true;
}

void TronTxOutput::Swap(TronTxOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronTxOutput::InternalSwap(TronTxOutput* other) {
  signature_.Swap(&other->signature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TronTxOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TronTxOutput_descriptor_;
  metadata.reflection = TronTxOutput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TronTxOutput

// optional string signature = 1;
void TronTxOutput::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TronTxOutput::signature() const {
  // @@protoc_insertion_point(field_get:tronapi.TronTxOutput.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TronTxOutput::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tronapi.TronTxOutput.signature)
}
void TronTxOutput::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tronapi.TronTxOutput.signature)
}
void TronTxOutput::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tronapi.TronTxOutput.signature)
}
::std::string* TronTxOutput::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:tronapi.TronTxOutput.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TronTxOutput::release_signature() {
  // @@protoc_insertion_point(field_release:tronapi.TronTxOutput.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TronTxOutput::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:tronapi.TronTxOutput.signature)
}

inline const TronTxOutput* TronTxOutput::internal_default_instance() {
  return &TronTxOutput_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronMessageInput::kMessageFieldNumber;
const int TronMessageInput::kIsHexFieldNumber;
const int TronMessageInput::kIsTronHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronMessageInput::TronMessageInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tron_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tronapi.TronMessageInput)
}

void TronMessageInput::InitAsDefaultInstance() {
}

TronMessageInput::TronMessageInput(const TronMessageInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tronapi.TronMessageInput)
}

void TronMessageInput::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_hex_, 0, reinterpret_cast<char*>(&is_tron_header_) -
    reinterpret_cast<char*>(&is_hex_) + sizeof(is_tron_header_));
  _cached_size_ = 0;
}

TronMessageInput::~TronMessageInput() {
  // @@protoc_insertion_point(destructor:tronapi.TronMessageInput)
  SharedDtor();
}

void TronMessageInput::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TronMessageInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TronMessageInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TronMessageInput_descriptor_;
}

const TronMessageInput& TronMessageInput::default_instance() {
  protobuf_InitDefaults_tron_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TronMessageInput> TronMessageInput_default_instance_;

TronMessageInput* TronMessageInput::New(::google::protobuf::Arena* arena) const {
  TronMessageInput* n = new TronMessageInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TronMessageInput::Clear() {
// @@protoc_insertion_point(message_clear_start:tronapi.TronMessageInput)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TronMessageInput, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TronMessageInput*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_hex_, is_tron_header_);
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TronMessageInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tronapi.TronMessageInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tronapi.TronMessageInput.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_hex;
        break;
      }

      // optional bool is_hex = 4;
      case 4: {
        if (tag == 32) {
         parse_is_hex:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_tron_header;
        break;
      }

      // optional bool is_tron_header = 5;
      case 5: {
        if (tag == 40) {
         parse_is_tron_header:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tron_header_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tronapi.TronMessageInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tronapi.TronMessageInput)
  return false;
#undef DO_
}

void TronMessageInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tronapi.TronMessageInput)
  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tronapi.TronMessageInput.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional bool is_hex = 4;
  if (this->is_hex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_hex(), output);
  }

  // optional bool is_tron_header = 5;
  if (this->is_tron_header() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_tron_header(), output);
  }

  // @@protoc_insertion_point(serialize_end:tronapi.TronMessageInput)
}

::google::protobuf::uint8* TronMessageInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tronapi.TronMessageInput)
  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tronapi.TronMessageInput.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional bool is_hex = 4;
  if (this->is_hex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_hex(), target);
  }

  // optional bool is_tron_header = 5;
  if (this->is_tron_header() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_tron_header(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tronapi.TronMessageInput)
  return target;
}

size_t TronMessageInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tronapi.TronMessageInput)
  size_t total_size = 0;

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // optional bool is_hex = 4;
  if (this->is_hex() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_tron_header = 5;
  if (this->is_tron_header() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TronMessageInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tronapi.TronMessageInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TronMessageInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TronMessageInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tronapi.TronMessageInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tronapi.TronMessageInput)
    UnsafeMergeFrom(*source);
  }
}

void TronMessageInput::MergeFrom(const TronMessageInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tronapi.TronMessageInput)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TronMessageInput::UnsafeMergeFrom(const TronMessageInput& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.is_hex() != 0) {
    set_is_hex(from.is_hex());
  }
  if (from.is_tron_header() != 0) {
    set_is_tron_header(from.is_tron_header());
  }
}

void TronMessageInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tronapi.TronMessageInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronMessageInput::CopyFrom(const TronMessageInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tronapi.TronMessageInput)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TronMessageInput::IsInitialized() const {

  return true;
}

void TronMessageInput::Swap(TronMessageInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronMessageInput::InternalSwap(TronMessageInput* other) {
  message_.Swap(&other->message_);
  std::swap(is_hex_, other->is_hex_);
  std::swap(is_tron_header_, other->is_tron_header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TronMessageInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TronMessageInput_descriptor_;
  metadata.reflection = TronMessageInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TronMessageInput

// optional string message = 2;
void TronMessageInput::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TronMessageInput::message() const {
  // @@protoc_insertion_point(field_get:tronapi.TronMessageInput.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TronMessageInput::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tronapi.TronMessageInput.message)
}
void TronMessageInput::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tronapi.TronMessageInput.message)
}
void TronMessageInput::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tronapi.TronMessageInput.message)
}
::std::string* TronMessageInput::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:tronapi.TronMessageInput.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TronMessageInput::release_message() {
  // @@protoc_insertion_point(field_release:tronapi.TronMessageInput.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TronMessageInput::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:tronapi.TronMessageInput.message)
}

// optional bool is_hex = 4;
void TronMessageInput::clear_is_hex() {
  is_hex_ = false;
}
bool TronMessageInput::is_hex() const {
  // @@protoc_insertion_point(field_get:tronapi.TronMessageInput.is_hex)
  return is_hex_;
}
void TronMessageInput::set_is_hex(bool value) {
  
  is_hex_ = value;
  // @@protoc_insertion_point(field_set:tronapi.TronMessageInput.is_hex)
}

// optional bool is_tron_header = 5;
void TronMessageInput::clear_is_tron_header() {
  is_tron_header_ = false;
}
bool TronMessageInput::is_tron_header() const {
  // @@protoc_insertion_point(field_get:tronapi.TronMessageInput.is_tron_header)
  return is_tron_header_;
}
void TronMessageInput::set_is_tron_header(bool value) {
  
  is_tron_header_ = value;
  // @@protoc_insertion_point(field_set:tronapi.TronMessageInput.is_tron_header)
}

inline const TronMessageInput* TronMessageInput::internal_default_instance() {
  return &TronMessageInput_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronMessageOutput::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronMessageOutput::TronMessageOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tron_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tronapi.TronMessageOutput)
}

void TronMessageOutput::InitAsDefaultInstance() {
}

TronMessageOutput::TronMessageOutput(const TronMessageOutput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tronapi.TronMessageOutput)
}

void TronMessageOutput::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TronMessageOutput::~TronMessageOutput() {
  // @@protoc_insertion_point(destructor:tronapi.TronMessageOutput)
  SharedDtor();
}

void TronMessageOutput::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TronMessageOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TronMessageOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TronMessageOutput_descriptor_;
}

const TronMessageOutput& TronMessageOutput::default_instance() {
  protobuf_InitDefaults_tron_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TronMessageOutput> TronMessageOutput_default_instance_;

TronMessageOutput* TronMessageOutput::New(::google::protobuf::Arena* arena) const {
  TronMessageOutput* n = new TronMessageOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TronMessageOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:tronapi.TronMessageOutput)
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TronMessageOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tronapi.TronMessageOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string signature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tronapi.TronMessageOutput.signature"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tronapi.TronMessageOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tronapi.TronMessageOutput)
  return false;
#undef DO_
}

void TronMessageOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tronapi.TronMessageOutput)
  // optional string signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tronapi.TronMessageOutput.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signature(), output);
  }

  // @@protoc_insertion_point(serialize_end:tronapi.TronMessageOutput)
}

::google::protobuf::uint8* TronMessageOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tronapi.TronMessageOutput)
  // optional string signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tronapi.TronMessageOutput.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tronapi.TronMessageOutput)
  return target;
}

size_t TronMessageOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tronapi.TronMessageOutput)
  size_t total_size = 0;

  // optional string signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TronMessageOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tronapi.TronMessageOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TronMessageOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TronMessageOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tronapi.TronMessageOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tronapi.TronMessageOutput)
    UnsafeMergeFrom(*source);
  }
}

void TronMessageOutput::MergeFrom(const TronMessageOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tronapi.TronMessageOutput)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TronMessageOutput::UnsafeMergeFrom(const TronMessageOutput& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void TronMessageOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tronapi.TronMessageOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronMessageOutput::CopyFrom(const TronMessageOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tronapi.TronMessageOutput)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TronMessageOutput::IsInitialized() const {

  return true;
}

void TronMessageOutput::Swap(TronMessageOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronMessageOutput::InternalSwap(TronMessageOutput* other) {
  signature_.Swap(&other->signature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TronMessageOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TronMessageOutput_descriptor_;
  metadata.reflection = TronMessageOutput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TronMessageOutput

// optional string signature = 1;
void TronMessageOutput::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TronMessageOutput::signature() const {
  // @@protoc_insertion_point(field_get:tronapi.TronMessageOutput.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TronMessageOutput::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tronapi.TronMessageOutput.signature)
}
void TronMessageOutput::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tronapi.TronMessageOutput.signature)
}
void TronMessageOutput::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tronapi.TronMessageOutput.signature)
}
::std::string* TronMessageOutput::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:tronapi.TronMessageOutput.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TronMessageOutput::release_signature() {
  // @@protoc_insertion_point(field_release:tronapi.TronMessageOutput.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TronMessageOutput::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:tronapi.TronMessageOutput.signature)
}

inline const TronMessageOutput* TronMessageOutput::internal_default_instance() {
  return &TronMessageOutput_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tronapi

// @@protoc_insertion_point(global_scope)
