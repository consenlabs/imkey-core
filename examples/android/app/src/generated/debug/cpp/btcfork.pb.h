// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: btcfork.proto

#ifndef PROTOBUF_btcfork_2eproto__INCLUDED
#define PROTOBUF_btcfork_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace btcforkapi {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_btcfork_2eproto();
void protobuf_InitDefaults_btcfork_2eproto();
void protobuf_AssignDesc_btcfork_2eproto();
void protobuf_ShutdownFile_btcfork_2eproto();

class BtcForkTxInput;
class BtcForkTxOutput;
class Utxo;

// ===================================================================

class Utxo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:btcforkapi.Utxo) */ {
 public:
  Utxo();
  virtual ~Utxo();

  Utxo(const Utxo& from);

  inline Utxo& operator=(const Utxo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Utxo& default_instance();

  static const Utxo* internal_default_instance();

  void Swap(Utxo* other);

  // implements Message ----------------------------------------------

  inline Utxo* New() const { return New(NULL); }

  Utxo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Utxo& from);
  void MergeFrom(const Utxo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Utxo* other);
  void UnsafeMergeFrom(const Utxo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string txHash = 1;
  void clear_txhash();
  static const int kTxHashFieldNumber = 1;
  const ::std::string& txhash() const;
  void set_txhash(const ::std::string& value);
  void set_txhash(const char* value);
  void set_txhash(const char* value, size_t size);
  ::std::string* mutable_txhash();
  ::std::string* release_txhash();
  void set_allocated_txhash(::std::string* txhash);

  // optional int32 vout = 2;
  void clear_vout();
  static const int kVoutFieldNumber = 2;
  ::google::protobuf::int32 vout() const;
  void set_vout(::google::protobuf::int32 value);

  // optional int64 amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // optional string address = 4;
  void clear_address();
  static const int kAddressFieldNumber = 4;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional string scriptPubKey = 5;
  void clear_scriptpubkey();
  static const int kScriptPubKeyFieldNumber = 5;
  const ::std::string& scriptpubkey() const;
  void set_scriptpubkey(const ::std::string& value);
  void set_scriptpubkey(const char* value);
  void set_scriptpubkey(const char* value, size_t size);
  ::std::string* mutable_scriptpubkey();
  ::std::string* release_scriptpubkey();
  void set_allocated_scriptpubkey(::std::string* scriptpubkey);

  // optional string derivedPath = 6;
  void clear_derivedpath();
  static const int kDerivedPathFieldNumber = 6;
  const ::std::string& derivedpath() const;
  void set_derivedpath(const ::std::string& value);
  void set_derivedpath(const char* value);
  void set_derivedpath(const char* value, size_t size);
  ::std::string* mutable_derivedpath();
  ::std::string* release_derivedpath();
  void set_allocated_derivedpath(::std::string* derivedpath);

  // optional int64 sequence = 7;
  void clear_sequence();
  static const int kSequenceFieldNumber = 7;
  ::google::protobuf::int64 sequence() const;
  void set_sequence(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:btcforkapi.Utxo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr txhash_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr scriptpubkey_;
  ::google::protobuf::internal::ArenaStringPtr derivedpath_;
  ::google::protobuf::int64 amount_;
  ::google::protobuf::int64 sequence_;
  ::google::protobuf::int32 vout_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_btcfork_2eproto_impl();
  friend void  protobuf_AddDesc_btcfork_2eproto_impl();
  friend void protobuf_AssignDesc_btcfork_2eproto();
  friend void protobuf_ShutdownFile_btcfork_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Utxo> Utxo_default_instance_;

// -------------------------------------------------------------------

class BtcForkTxInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:btcforkapi.BtcForkTxInput) */ {
 public:
  BtcForkTxInput();
  virtual ~BtcForkTxInput();

  BtcForkTxInput(const BtcForkTxInput& from);

  inline BtcForkTxInput& operator=(const BtcForkTxInput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BtcForkTxInput& default_instance();

  static const BtcForkTxInput* internal_default_instance();

  void Swap(BtcForkTxInput* other);

  // implements Message ----------------------------------------------

  inline BtcForkTxInput* New() const { return New(NULL); }

  BtcForkTxInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BtcForkTxInput& from);
  void MergeFrom(const BtcForkTxInput& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BtcForkTxInput* other);
  void UnsafeMergeFrom(const BtcForkTxInput& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string to = 1;
  void clear_to();
  static const int kToFieldNumber = 1;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // optional int64 amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // repeated .btcforkapi.Utxo unspents = 3;
  int unspents_size() const;
  void clear_unspents();
  static const int kUnspentsFieldNumber = 3;
  const ::btcforkapi::Utxo& unspents(int index) const;
  ::btcforkapi::Utxo* mutable_unspents(int index);
  ::btcforkapi::Utxo* add_unspents();
  ::google::protobuf::RepeatedPtrField< ::btcforkapi::Utxo >*
      mutable_unspents();
  const ::google::protobuf::RepeatedPtrField< ::btcforkapi::Utxo >&
      unspents() const;

  // optional int64 fee = 4;
  void clear_fee();
  static const int kFeeFieldNumber = 4;
  ::google::protobuf::int64 fee() const;
  void set_fee(::google::protobuf::int64 value);

  // optional uint32 changeAddressIndex = 5;
  void clear_changeaddressindex();
  static const int kChangeAddressIndexFieldNumber = 5;
  ::google::protobuf::uint32 changeaddressindex() const;
  void set_changeaddressindex(::google::protobuf::uint32 value);

  // optional string changeAddress = 6;
  void clear_changeaddress();
  static const int kChangeAddressFieldNumber = 6;
  const ::std::string& changeaddress() const;
  void set_changeaddress(const ::std::string& value);
  void set_changeaddress(const char* value);
  void set_changeaddress(const char* value, size_t size);
  ::std::string* mutable_changeaddress();
  ::std::string* release_changeaddress();
  void set_allocated_changeaddress(::std::string* changeaddress);

  // optional string segWit = 7;
  void clear_segwit();
  static const int kSegWitFieldNumber = 7;
  const ::std::string& segwit() const;
  void set_segwit(const ::std::string& value);
  void set_segwit(const char* value);
  void set_segwit(const char* value, size_t size);
  ::std::string* mutable_segwit();
  ::std::string* release_segwit();
  void set_allocated_segwit(::std::string* segwit);

  // @@protoc_insertion_point(class_scope:btcforkapi.BtcForkTxInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::btcforkapi::Utxo > unspents_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr changeaddress_;
  ::google::protobuf::internal::ArenaStringPtr segwit_;
  ::google::protobuf::int64 amount_;
  ::google::protobuf::int64 fee_;
  ::google::protobuf::uint32 changeaddressindex_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_btcfork_2eproto_impl();
  friend void  protobuf_AddDesc_btcfork_2eproto_impl();
  friend void protobuf_AssignDesc_btcfork_2eproto();
  friend void protobuf_ShutdownFile_btcfork_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BtcForkTxInput> BtcForkTxInput_default_instance_;

// -------------------------------------------------------------------

class BtcForkTxOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:btcforkapi.BtcForkTxOutput) */ {
 public:
  BtcForkTxOutput();
  virtual ~BtcForkTxOutput();

  BtcForkTxOutput(const BtcForkTxOutput& from);

  inline BtcForkTxOutput& operator=(const BtcForkTxOutput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BtcForkTxOutput& default_instance();

  static const BtcForkTxOutput* internal_default_instance();

  void Swap(BtcForkTxOutput* other);

  // implements Message ----------------------------------------------

  inline BtcForkTxOutput* New() const { return New(NULL); }

  BtcForkTxOutput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BtcForkTxOutput& from);
  void MergeFrom(const BtcForkTxOutput& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BtcForkTxOutput* other);
  void UnsafeMergeFrom(const BtcForkTxOutput& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string txHash = 2;
  void clear_txhash();
  static const int kTxHashFieldNumber = 2;
  const ::std::string& txhash() const;
  void set_txhash(const ::std::string& value);
  void set_txhash(const char* value);
  void set_txhash(const char* value, size_t size);
  ::std::string* mutable_txhash();
  ::std::string* release_txhash();
  void set_allocated_txhash(::std::string* txhash);

  // optional string wtxHash = 3;
  void clear_wtxhash();
  static const int kWtxHashFieldNumber = 3;
  const ::std::string& wtxhash() const;
  void set_wtxhash(const ::std::string& value);
  void set_wtxhash(const char* value);
  void set_wtxhash(const char* value, size_t size);
  ::std::string* mutable_wtxhash();
  ::std::string* release_wtxhash();
  void set_allocated_wtxhash(::std::string* wtxhash);

  // @@protoc_insertion_point(class_scope:btcforkapi.BtcForkTxOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr txhash_;
  ::google::protobuf::internal::ArenaStringPtr wtxhash_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_btcfork_2eproto_impl();
  friend void  protobuf_AddDesc_btcfork_2eproto_impl();
  friend void protobuf_AssignDesc_btcfork_2eproto();
  friend void protobuf_ShutdownFile_btcfork_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BtcForkTxOutput> BtcForkTxOutput_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Utxo

// optional string txHash = 1;
inline void Utxo::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Utxo::txhash() const {
  // @@protoc_insertion_point(field_get:btcforkapi.Utxo.txHash)
  return txhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_txhash(const ::std::string& value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.Utxo.txHash)
}
inline void Utxo::set_txhash(const char* value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.Utxo.txHash)
}
inline void Utxo::set_txhash(const char* value, size_t size) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.Utxo.txHash)
}
inline ::std::string* Utxo::mutable_txhash() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.Utxo.txHash)
  return txhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Utxo::release_txhash() {
  // @@protoc_insertion_point(field_release:btcforkapi.Utxo.txHash)
  
  return txhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_allocated_txhash(::std::string* txhash) {
  if (txhash != NULL) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.Utxo.txHash)
}

// optional int32 vout = 2;
inline void Utxo::clear_vout() {
  vout_ = 0;
}
inline ::google::protobuf::int32 Utxo::vout() const {
  // @@protoc_insertion_point(field_get:btcforkapi.Utxo.vout)
  return vout_;
}
inline void Utxo::set_vout(::google::protobuf::int32 value) {
  
  vout_ = value;
  // @@protoc_insertion_point(field_set:btcforkapi.Utxo.vout)
}

// optional int64 amount = 3;
inline void Utxo::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Utxo::amount() const {
  // @@protoc_insertion_point(field_get:btcforkapi.Utxo.amount)
  return amount_;
}
inline void Utxo::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:btcforkapi.Utxo.amount)
}

// optional string address = 4;
inline void Utxo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Utxo::address() const {
  // @@protoc_insertion_point(field_get:btcforkapi.Utxo.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.Utxo.address)
}
inline void Utxo::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.Utxo.address)
}
inline void Utxo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.Utxo.address)
}
inline ::std::string* Utxo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.Utxo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Utxo::release_address() {
  // @@protoc_insertion_point(field_release:btcforkapi.Utxo.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.Utxo.address)
}

// optional string scriptPubKey = 5;
inline void Utxo::clear_scriptpubkey() {
  scriptpubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Utxo::scriptpubkey() const {
  // @@protoc_insertion_point(field_get:btcforkapi.Utxo.scriptPubKey)
  return scriptpubkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_scriptpubkey(const ::std::string& value) {
  
  scriptpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.Utxo.scriptPubKey)
}
inline void Utxo::set_scriptpubkey(const char* value) {
  
  scriptpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.Utxo.scriptPubKey)
}
inline void Utxo::set_scriptpubkey(const char* value, size_t size) {
  
  scriptpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.Utxo.scriptPubKey)
}
inline ::std::string* Utxo::mutable_scriptpubkey() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.Utxo.scriptPubKey)
  return scriptpubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Utxo::release_scriptpubkey() {
  // @@protoc_insertion_point(field_release:btcforkapi.Utxo.scriptPubKey)
  
  return scriptpubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_allocated_scriptpubkey(::std::string* scriptpubkey) {
  if (scriptpubkey != NULL) {
    
  } else {
    
  }
  scriptpubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scriptpubkey);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.Utxo.scriptPubKey)
}

// optional string derivedPath = 6;
inline void Utxo::clear_derivedpath() {
  derivedpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Utxo::derivedpath() const {
  // @@protoc_insertion_point(field_get:btcforkapi.Utxo.derivedPath)
  return derivedpath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_derivedpath(const ::std::string& value) {
  
  derivedpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.Utxo.derivedPath)
}
inline void Utxo::set_derivedpath(const char* value) {
  
  derivedpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.Utxo.derivedPath)
}
inline void Utxo::set_derivedpath(const char* value, size_t size) {
  
  derivedpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.Utxo.derivedPath)
}
inline ::std::string* Utxo::mutable_derivedpath() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.Utxo.derivedPath)
  return derivedpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Utxo::release_derivedpath() {
  // @@protoc_insertion_point(field_release:btcforkapi.Utxo.derivedPath)
  
  return derivedpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_allocated_derivedpath(::std::string* derivedpath) {
  if (derivedpath != NULL) {
    
  } else {
    
  }
  derivedpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), derivedpath);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.Utxo.derivedPath)
}

// optional int64 sequence = 7;
inline void Utxo::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Utxo::sequence() const {
  // @@protoc_insertion_point(field_get:btcforkapi.Utxo.sequence)
  return sequence_;
}
inline void Utxo::set_sequence(::google::protobuf::int64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:btcforkapi.Utxo.sequence)
}

inline const Utxo* Utxo::internal_default_instance() {
  return &Utxo_default_instance_.get();
}
// -------------------------------------------------------------------

// BtcForkTxInput

// optional string to = 1;
inline void BtcForkTxInput::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcForkTxInput::to() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxInput.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcForkTxInput::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxInput.to)
}
inline void BtcForkTxInput::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.BtcForkTxInput.to)
}
inline void BtcForkTxInput::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.BtcForkTxInput.to)
}
inline ::std::string* BtcForkTxInput::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.BtcForkTxInput.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcForkTxInput::release_to() {
  // @@protoc_insertion_point(field_release:btcforkapi.BtcForkTxInput.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcForkTxInput::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.BtcForkTxInput.to)
}

// optional int64 amount = 2;
inline void BtcForkTxInput::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BtcForkTxInput::amount() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxInput.amount)
  return amount_;
}
inline void BtcForkTxInput::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxInput.amount)
}

// repeated .btcforkapi.Utxo unspents = 3;
inline int BtcForkTxInput::unspents_size() const {
  return unspents_.size();
}
inline void BtcForkTxInput::clear_unspents() {
  unspents_.Clear();
}
inline const ::btcforkapi::Utxo& BtcForkTxInput::unspents(int index) const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxInput.unspents)
  return unspents_.Get(index);
}
inline ::btcforkapi::Utxo* BtcForkTxInput::mutable_unspents(int index) {
  // @@protoc_insertion_point(field_mutable:btcforkapi.BtcForkTxInput.unspents)
  return unspents_.Mutable(index);
}
inline ::btcforkapi::Utxo* BtcForkTxInput::add_unspents() {
  // @@protoc_insertion_point(field_add:btcforkapi.BtcForkTxInput.unspents)
  return unspents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::btcforkapi::Utxo >*
BtcForkTxInput::mutable_unspents() {
  // @@protoc_insertion_point(field_mutable_list:btcforkapi.BtcForkTxInput.unspents)
  return &unspents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::btcforkapi::Utxo >&
BtcForkTxInput::unspents() const {
  // @@protoc_insertion_point(field_list:btcforkapi.BtcForkTxInput.unspents)
  return unspents_;
}

// optional int64 fee = 4;
inline void BtcForkTxInput::clear_fee() {
  fee_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BtcForkTxInput::fee() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxInput.fee)
  return fee_;
}
inline void BtcForkTxInput::set_fee(::google::protobuf::int64 value) {
  
  fee_ = value;
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxInput.fee)
}

// optional uint32 changeAddressIndex = 5;
inline void BtcForkTxInput::clear_changeaddressindex() {
  changeaddressindex_ = 0u;
}
inline ::google::protobuf::uint32 BtcForkTxInput::changeaddressindex() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxInput.changeAddressIndex)
  return changeaddressindex_;
}
inline void BtcForkTxInput::set_changeaddressindex(::google::protobuf::uint32 value) {
  
  changeaddressindex_ = value;
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxInput.changeAddressIndex)
}

// optional string changeAddress = 6;
inline void BtcForkTxInput::clear_changeaddress() {
  changeaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcForkTxInput::changeaddress() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxInput.changeAddress)
  return changeaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcForkTxInput::set_changeaddress(const ::std::string& value) {
  
  changeaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxInput.changeAddress)
}
inline void BtcForkTxInput::set_changeaddress(const char* value) {
  
  changeaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.BtcForkTxInput.changeAddress)
}
inline void BtcForkTxInput::set_changeaddress(const char* value, size_t size) {
  
  changeaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.BtcForkTxInput.changeAddress)
}
inline ::std::string* BtcForkTxInput::mutable_changeaddress() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.BtcForkTxInput.changeAddress)
  return changeaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcForkTxInput::release_changeaddress() {
  // @@protoc_insertion_point(field_release:btcforkapi.BtcForkTxInput.changeAddress)
  
  return changeaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcForkTxInput::set_allocated_changeaddress(::std::string* changeaddress) {
  if (changeaddress != NULL) {
    
  } else {
    
  }
  changeaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), changeaddress);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.BtcForkTxInput.changeAddress)
}

// optional string segWit = 7;
inline void BtcForkTxInput::clear_segwit() {
  segwit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcForkTxInput::segwit() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxInput.segWit)
  return segwit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcForkTxInput::set_segwit(const ::std::string& value) {
  
  segwit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxInput.segWit)
}
inline void BtcForkTxInput::set_segwit(const char* value) {
  
  segwit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.BtcForkTxInput.segWit)
}
inline void BtcForkTxInput::set_segwit(const char* value, size_t size) {
  
  segwit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.BtcForkTxInput.segWit)
}
inline ::std::string* BtcForkTxInput::mutable_segwit() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.BtcForkTxInput.segWit)
  return segwit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcForkTxInput::release_segwit() {
  // @@protoc_insertion_point(field_release:btcforkapi.BtcForkTxInput.segWit)
  
  return segwit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcForkTxInput::set_allocated_segwit(::std::string* segwit) {
  if (segwit != NULL) {
    
  } else {
    
  }
  segwit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), segwit);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.BtcForkTxInput.segWit)
}

inline const BtcForkTxInput* BtcForkTxInput::internal_default_instance() {
  return &BtcForkTxInput_default_instance_.get();
}
// -------------------------------------------------------------------

// BtcForkTxOutput

// optional string signature = 1;
inline void BtcForkTxOutput::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcForkTxOutput::signature() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxOutput.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcForkTxOutput::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxOutput.signature)
}
inline void BtcForkTxOutput::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.BtcForkTxOutput.signature)
}
inline void BtcForkTxOutput::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.BtcForkTxOutput.signature)
}
inline ::std::string* BtcForkTxOutput::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.BtcForkTxOutput.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcForkTxOutput::release_signature() {
  // @@protoc_insertion_point(field_release:btcforkapi.BtcForkTxOutput.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcForkTxOutput::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.BtcForkTxOutput.signature)
}

// optional string txHash = 2;
inline void BtcForkTxOutput::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcForkTxOutput::txhash() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxOutput.txHash)
  return txhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcForkTxOutput::set_txhash(const ::std::string& value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxOutput.txHash)
}
inline void BtcForkTxOutput::set_txhash(const char* value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.BtcForkTxOutput.txHash)
}
inline void BtcForkTxOutput::set_txhash(const char* value, size_t size) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.BtcForkTxOutput.txHash)
}
inline ::std::string* BtcForkTxOutput::mutable_txhash() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.BtcForkTxOutput.txHash)
  return txhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcForkTxOutput::release_txhash() {
  // @@protoc_insertion_point(field_release:btcforkapi.BtcForkTxOutput.txHash)
  
  return txhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcForkTxOutput::set_allocated_txhash(::std::string* txhash) {
  if (txhash != NULL) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.BtcForkTxOutput.txHash)
}

// optional string wtxHash = 3;
inline void BtcForkTxOutput::clear_wtxhash() {
  wtxhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcForkTxOutput::wtxhash() const {
  // @@protoc_insertion_point(field_get:btcforkapi.BtcForkTxOutput.wtxHash)
  return wtxhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcForkTxOutput::set_wtxhash(const ::std::string& value) {
  
  wtxhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcforkapi.BtcForkTxOutput.wtxHash)
}
inline void BtcForkTxOutput::set_wtxhash(const char* value) {
  
  wtxhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcforkapi.BtcForkTxOutput.wtxHash)
}
inline void BtcForkTxOutput::set_wtxhash(const char* value, size_t size) {
  
  wtxhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcforkapi.BtcForkTxOutput.wtxHash)
}
inline ::std::string* BtcForkTxOutput::mutable_wtxhash() {
  
  // @@protoc_insertion_point(field_mutable:btcforkapi.BtcForkTxOutput.wtxHash)
  return wtxhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcForkTxOutput::release_wtxhash() {
  // @@protoc_insertion_point(field_release:btcforkapi.BtcForkTxOutput.wtxHash)
  
  return wtxhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcForkTxOutput::set_allocated_wtxhash(::std::string* wtxhash) {
  if (wtxhash != NULL) {
    
  } else {
    
  }
  wtxhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wtxhash);
  // @@protoc_insertion_point(field_set_allocated:btcforkapi.BtcForkTxOutput.wtxHash)
}

inline const BtcForkTxOutput* BtcForkTxOutput::internal_default_instance() {
  return &BtcForkTxOutput_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace btcforkapi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_btcfork_2eproto__INCLUDED
