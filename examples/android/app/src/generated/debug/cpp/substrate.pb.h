// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrate.proto

#ifndef PROTOBUF_substrate_2eproto__INCLUDED
#define PROTOBUF_substrate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace substrateapi {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_substrate_2eproto();
void protobuf_InitDefaults_substrate_2eproto();
void protobuf_AssignDesc_substrate_2eproto();
void protobuf_ShutdownFile_substrate_2eproto();

class SubstrateRawTxIn;
class SubstrateTxOut;

// ===================================================================

class SubstrateRawTxIn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:substrateapi.SubstrateRawTxIn) */ {
 public:
  SubstrateRawTxIn();
  virtual ~SubstrateRawTxIn();

  SubstrateRawTxIn(const SubstrateRawTxIn& from);

  inline SubstrateRawTxIn& operator=(const SubstrateRawTxIn& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubstrateRawTxIn& default_instance();

  static const SubstrateRawTxIn* internal_default_instance();

  void Swap(SubstrateRawTxIn* other);

  // implements Message ----------------------------------------------

  inline SubstrateRawTxIn* New() const { return New(NULL); }

  SubstrateRawTxIn* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubstrateRawTxIn& from);
  void MergeFrom(const SubstrateRawTxIn& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubstrateRawTxIn* other);
  void UnsafeMergeFrom(const SubstrateRawTxIn& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string rawData = 1;
  void clear_rawdata();
  static const int kRawDataFieldNumber = 1;
  const ::std::string& rawdata() const;
  void set_rawdata(const ::std::string& value);
  void set_rawdata(const char* value);
  void set_rawdata(const char* value, size_t size);
  ::std::string* mutable_rawdata();
  ::std::string* release_rawdata();
  void set_allocated_rawdata(::std::string* rawdata);

  // @@protoc_insertion_point(class_scope:substrateapi.SubstrateRawTxIn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rawdata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_substrate_2eproto_impl();
  friend void  protobuf_AddDesc_substrate_2eproto_impl();
  friend void protobuf_AssignDesc_substrate_2eproto();
  friend void protobuf_ShutdownFile_substrate_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubstrateRawTxIn> SubstrateRawTxIn_default_instance_;

// -------------------------------------------------------------------

class SubstrateTxOut : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:substrateapi.SubstrateTxOut) */ {
 public:
  SubstrateTxOut();
  virtual ~SubstrateTxOut();

  SubstrateTxOut(const SubstrateTxOut& from);

  inline SubstrateTxOut& operator=(const SubstrateTxOut& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubstrateTxOut& default_instance();

  static const SubstrateTxOut* internal_default_instance();

  void Swap(SubstrateTxOut* other);

  // implements Message ----------------------------------------------

  inline SubstrateTxOut* New() const { return New(NULL); }

  SubstrateTxOut* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubstrateTxOut& from);
  void MergeFrom(const SubstrateTxOut& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubstrateTxOut* other);
  void UnsafeMergeFrom(const SubstrateTxOut& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:substrateapi.SubstrateTxOut)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_substrate_2eproto_impl();
  friend void  protobuf_AddDesc_substrate_2eproto_impl();
  friend void protobuf_AssignDesc_substrate_2eproto();
  friend void protobuf_ShutdownFile_substrate_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubstrateTxOut> SubstrateTxOut_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SubstrateRawTxIn

// optional string rawData = 1;
inline void SubstrateRawTxIn::clear_rawdata() {
  rawdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubstrateRawTxIn::rawdata() const {
  // @@protoc_insertion_point(field_get:substrateapi.SubstrateRawTxIn.rawData)
  return rawdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubstrateRawTxIn::set_rawdata(const ::std::string& value) {
  
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:substrateapi.SubstrateRawTxIn.rawData)
}
inline void SubstrateRawTxIn::set_rawdata(const char* value) {
  
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:substrateapi.SubstrateRawTxIn.rawData)
}
inline void SubstrateRawTxIn::set_rawdata(const char* value, size_t size) {
  
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:substrateapi.SubstrateRawTxIn.rawData)
}
inline ::std::string* SubstrateRawTxIn::mutable_rawdata() {
  
  // @@protoc_insertion_point(field_mutable:substrateapi.SubstrateRawTxIn.rawData)
  return rawdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubstrateRawTxIn::release_rawdata() {
  // @@protoc_insertion_point(field_release:substrateapi.SubstrateRawTxIn.rawData)
  
  return rawdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubstrateRawTxIn::set_allocated_rawdata(::std::string* rawdata) {
  if (rawdata != NULL) {
    
  } else {
    
  }
  rawdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rawdata);
  // @@protoc_insertion_point(field_set_allocated:substrateapi.SubstrateRawTxIn.rawData)
}

inline const SubstrateRawTxIn* SubstrateRawTxIn::internal_default_instance() {
  return &SubstrateRawTxIn_default_instance_.get();
}
// -------------------------------------------------------------------

// SubstrateTxOut

// optional string signature = 1;
inline void SubstrateTxOut::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubstrateTxOut::signature() const {
  // @@protoc_insertion_point(field_get:substrateapi.SubstrateTxOut.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubstrateTxOut::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:substrateapi.SubstrateTxOut.signature)
}
inline void SubstrateTxOut::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:substrateapi.SubstrateTxOut.signature)
}
inline void SubstrateTxOut::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:substrateapi.SubstrateTxOut.signature)
}
inline ::std::string* SubstrateTxOut::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:substrateapi.SubstrateTxOut.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubstrateTxOut::release_signature() {
  // @@protoc_insertion_point(field_release:substrateapi.SubstrateTxOut.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubstrateTxOut::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:substrateapi.SubstrateTxOut.signature)
}

inline const SubstrateTxOut* SubstrateTxOut::internal_default_instance() {
  return &SubstrateTxOut_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace substrateapi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_substrate_2eproto__INCLUDED
