// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eos.proto

#ifndef PROTOBUF_eos_2eproto__INCLUDED
#define PROTOBUF_eos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace eosapi {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_eos_2eproto();
void protobuf_InitDefaults_eos_2eproto();
void protobuf_AssignDesc_eos_2eproto();
void protobuf_ShutdownFile_eos_2eproto();

class EosMessageInput;
class EosMessageOutput;
class EosSignData;
class EosSignResult;
class EosTxInput;
class EosTxOutput;

// ===================================================================

class EosTxInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosTxInput) */ {
 public:
  EosTxInput();
  virtual ~EosTxInput();

  EosTxInput(const EosTxInput& from);

  inline EosTxInput& operator=(const EosTxInput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosTxInput& default_instance();

  static const EosTxInput* internal_default_instance();

  void Swap(EosTxInput* other);

  // implements Message ----------------------------------------------

  inline EosTxInput* New() const { return New(NULL); }

  EosTxInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosTxInput& from);
  void MergeFrom(const EosTxInput& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosTxInput* other);
  void UnsafeMergeFrom(const EosTxInput& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eosapi.EosSignData transactions = 1;
  int transactions_size() const;
  void clear_transactions();
  static const int kTransactionsFieldNumber = 1;
  const ::eosapi::EosSignData& transactions(int index) const;
  ::eosapi::EosSignData* mutable_transactions(int index);
  ::eosapi::EosSignData* add_transactions();
  ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData >*
      mutable_transactions();
  const ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData >&
      transactions() const;

  // @@protoc_insertion_point(class_scope:eosapi.EosTxInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData > transactions_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosTxInput> EosTxInput_default_instance_;

// -------------------------------------------------------------------

class EosSignData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosSignData) */ {
 public:
  EosSignData();
  virtual ~EosSignData();

  EosSignData(const EosSignData& from);

  inline EosSignData& operator=(const EosSignData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosSignData& default_instance();

  static const EosSignData* internal_default_instance();

  void Swap(EosSignData* other);

  // implements Message ----------------------------------------------

  inline EosSignData* New() const { return New(NULL); }

  EosSignData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosSignData& from);
  void MergeFrom(const EosSignData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosSignData* other);
  void UnsafeMergeFrom(const EosSignData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string txHex = 1;
  void clear_txhex();
  static const int kTxHexFieldNumber = 1;
  const ::std::string& txhex() const;
  void set_txhex(const ::std::string& value);
  void set_txhex(const char* value);
  void set_txhex(const char* value, size_t size);
  ::std::string* mutable_txhex();
  ::std::string* release_txhex();
  void set_allocated_txhex(::std::string* txhex);

  // repeated string publicKeys = 2;
  int publickeys_size() const;
  void clear_publickeys();
  static const int kPublicKeysFieldNumber = 2;
  const ::std::string& publickeys(int index) const;
  ::std::string* mutable_publickeys(int index);
  void set_publickeys(int index, const ::std::string& value);
  void set_publickeys(int index, const char* value);
  void set_publickeys(int index, const char* value, size_t size);
  ::std::string* add_publickeys();
  void add_publickeys(const ::std::string& value);
  void add_publickeys(const char* value);
  void add_publickeys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& publickeys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_publickeys();

  // optional string chainId = 3;
  void clear_chainid();
  static const int kChainIdFieldNumber = 3;
  const ::std::string& chainid() const;
  void set_chainid(const ::std::string& value);
  void set_chainid(const char* value);
  void set_chainid(const char* value, size_t size);
  ::std::string* mutable_chainid();
  ::std::string* release_chainid();
  void set_allocated_chainid(::std::string* chainid);

  // optional string receiver = 4;
  void clear_receiver();
  static const int kReceiverFieldNumber = 4;
  const ::std::string& receiver() const;
  void set_receiver(const ::std::string& value);
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  ::std::string* mutable_receiver();
  ::std::string* release_receiver();
  void set_allocated_receiver(::std::string* receiver);

  // optional string payment = 5;
  void clear_payment();
  static const int kPaymentFieldNumber = 5;
  const ::std::string& payment() const;
  void set_payment(const ::std::string& value);
  void set_payment(const char* value);
  void set_payment(const char* value, size_t size);
  ::std::string* mutable_payment();
  ::std::string* release_payment();
  void set_allocated_payment(::std::string* payment);

  // optional string sender = 6;
  void clear_sender();
  static const int kSenderFieldNumber = 6;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // @@protoc_insertion_point(class_scope:eosapi.EosSignData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> publickeys_;
  ::google::protobuf::internal::ArenaStringPtr txhex_;
  ::google::protobuf::internal::ArenaStringPtr chainid_;
  ::google::protobuf::internal::ArenaStringPtr receiver_;
  ::google::protobuf::internal::ArenaStringPtr payment_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosSignData> EosSignData_default_instance_;

// -------------------------------------------------------------------

class EosTxOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosTxOutput) */ {
 public:
  EosTxOutput();
  virtual ~EosTxOutput();

  EosTxOutput(const EosTxOutput& from);

  inline EosTxOutput& operator=(const EosTxOutput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosTxOutput& default_instance();

  static const EosTxOutput* internal_default_instance();

  void Swap(EosTxOutput* other);

  // implements Message ----------------------------------------------

  inline EosTxOutput* New() const { return New(NULL); }

  EosTxOutput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosTxOutput& from);
  void MergeFrom(const EosTxOutput& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosTxOutput* other);
  void UnsafeMergeFrom(const EosTxOutput& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eosapi.EosSignResult trans_multi_signs = 1;
  int trans_multi_signs_size() const;
  void clear_trans_multi_signs();
  static const int kTransMultiSignsFieldNumber = 1;
  const ::eosapi::EosSignResult& trans_multi_signs(int index) const;
  ::eosapi::EosSignResult* mutable_trans_multi_signs(int index);
  ::eosapi::EosSignResult* add_trans_multi_signs();
  ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignResult >*
      mutable_trans_multi_signs();
  const ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignResult >&
      trans_multi_signs() const;

  // @@protoc_insertion_point(class_scope:eosapi.EosTxOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignResult > trans_multi_signs_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosTxOutput> EosTxOutput_default_instance_;

// -------------------------------------------------------------------

class EosSignResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosSignResult) */ {
 public:
  EosSignResult();
  virtual ~EosSignResult();

  EosSignResult(const EosSignResult& from);

  inline EosSignResult& operator=(const EosSignResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosSignResult& default_instance();

  static const EosSignResult* internal_default_instance();

  void Swap(EosSignResult* other);

  // implements Message ----------------------------------------------

  inline EosSignResult* New() const { return New(NULL); }

  EosSignResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosSignResult& from);
  void MergeFrom(const EosSignResult& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosSignResult* other);
  void UnsafeMergeFrom(const EosSignResult& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // repeated string signs = 2;
  int signs_size() const;
  void clear_signs();
  static const int kSignsFieldNumber = 2;
  const ::std::string& signs(int index) const;
  ::std::string* mutable_signs(int index);
  void set_signs(int index, const ::std::string& value);
  void set_signs(int index, const char* value);
  void set_signs(int index, const char* value, size_t size);
  ::std::string* add_signs();
  void add_signs(const ::std::string& value);
  void add_signs(const char* value);
  void add_signs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& signs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_signs();

  // @@protoc_insertion_point(class_scope:eosapi.EosSignResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> signs_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosSignResult> EosSignResult_default_instance_;

// -------------------------------------------------------------------

class EosMessageInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosMessageInput) */ {
 public:
  EosMessageInput();
  virtual ~EosMessageInput();

  EosMessageInput(const EosMessageInput& from);

  inline EosMessageInput& operator=(const EosMessageInput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosMessageInput& default_instance();

  static const EosMessageInput* internal_default_instance();

  void Swap(EosMessageInput* other);

  // implements Message ----------------------------------------------

  inline EosMessageInput* New() const { return New(NULL); }

  EosMessageInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosMessageInput& from);
  void MergeFrom(const EosMessageInput& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosMessageInput* other);
  void UnsafeMergeFrom(const EosMessageInput& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string pubkey = 2;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 2;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  void set_pubkey(const char* value);
  void set_pubkey(const char* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // optional bool isHex = 3;
  void clear_ishex();
  static const int kIsHexFieldNumber = 3;
  bool ishex() const;
  void set_ishex(bool value);

  // @@protoc_insertion_point(class_scope:eosapi.EosMessageInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  bool ishex_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosMessageInput> EosMessageInput_default_instance_;

// -------------------------------------------------------------------

class EosMessageOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosMessageOutput) */ {
 public:
  EosMessageOutput();
  virtual ~EosMessageOutput();

  EosMessageOutput(const EosMessageOutput& from);

  inline EosMessageOutput& operator=(const EosMessageOutput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosMessageOutput& default_instance();

  static const EosMessageOutput* internal_default_instance();

  void Swap(EosMessageOutput* other);

  // implements Message ----------------------------------------------

  inline EosMessageOutput* New() const { return New(NULL); }

  EosMessageOutput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosMessageOutput& from);
  void MergeFrom(const EosMessageOutput& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosMessageOutput* other);
  void UnsafeMergeFrom(const EosMessageOutput& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:eosapi.EosMessageOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosMessageOutput> EosMessageOutput_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EosTxInput

// repeated .eosapi.EosSignData transactions = 1;
inline int EosTxInput::transactions_size() const {
  return transactions_.size();
}
inline void EosTxInput::clear_transactions() {
  transactions_.Clear();
}
inline const ::eosapi::EosSignData& EosTxInput::transactions(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosTxInput.transactions)
  return transactions_.Get(index);
}
inline ::eosapi::EosSignData* EosTxInput::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosTxInput.transactions)
  return transactions_.Mutable(index);
}
inline ::eosapi::EosSignData* EosTxInput::add_transactions() {
  // @@protoc_insertion_point(field_add:eosapi.EosTxInput.transactions)
  return transactions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData >*
EosTxInput::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosTxInput.transactions)
  return &transactions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData >&
EosTxInput::transactions() const {
  // @@protoc_insertion_point(field_list:eosapi.EosTxInput.transactions)
  return transactions_;
}

inline const EosTxInput* EosTxInput::internal_default_instance() {
  return &EosTxInput_default_instance_.get();
}
// -------------------------------------------------------------------

// EosSignData

// optional string txHex = 1;
inline void EosSignData::clear_txhex() {
  txhex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosSignData::txhex() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.txHex)
  return txhex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_txhex(const ::std::string& value) {
  
  txhex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.txHex)
}
inline void EosSignData::set_txhex(const char* value) {
  
  txhex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.txHex)
}
inline void EosSignData::set_txhex(const char* value, size_t size) {
  
  txhex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.txHex)
}
inline ::std::string* EosSignData::mutable_txhex() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.txHex)
  return txhex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosSignData::release_txhex() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.txHex)
  
  return txhex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_allocated_txhex(::std::string* txhex) {
  if (txhex != NULL) {
    
  } else {
    
  }
  txhex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txhex);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.txHex)
}

// repeated string publicKeys = 2;
inline int EosSignData::publickeys_size() const {
  return publickeys_.size();
}
inline void EosSignData::clear_publickeys() {
  publickeys_.Clear();
}
inline const ::std::string& EosSignData::publickeys(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.publicKeys)
  return publickeys_.Get(index);
}
inline ::std::string* EosSignData::mutable_publickeys(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.publicKeys)
  return publickeys_.Mutable(index);
}
inline void EosSignData::set_publickeys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.publicKeys)
  publickeys_.Mutable(index)->assign(value);
}
inline void EosSignData::set_publickeys(int index, const char* value) {
  publickeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.publicKeys)
}
inline void EosSignData::set_publickeys(int index, const char* value, size_t size) {
  publickeys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.publicKeys)
}
inline ::std::string* EosSignData::add_publickeys() {
  // @@protoc_insertion_point(field_add_mutable:eosapi.EosSignData.publicKeys)
  return publickeys_.Add();
}
inline void EosSignData::add_publickeys(const ::std::string& value) {
  publickeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eosapi.EosSignData.publicKeys)
}
inline void EosSignData::add_publickeys(const char* value) {
  publickeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eosapi.EosSignData.publicKeys)
}
inline void EosSignData::add_publickeys(const char* value, size_t size) {
  publickeys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eosapi.EosSignData.publicKeys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EosSignData::publickeys() const {
  // @@protoc_insertion_point(field_list:eosapi.EosSignData.publicKeys)
  return publickeys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EosSignData::mutable_publickeys() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosSignData.publicKeys)
  return &publickeys_;
}

// optional string chainId = 3;
inline void EosSignData::clear_chainid() {
  chainid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosSignData::chainid() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.chainId)
  return chainid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_chainid(const ::std::string& value) {
  
  chainid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.chainId)
}
inline void EosSignData::set_chainid(const char* value) {
  
  chainid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.chainId)
}
inline void EosSignData::set_chainid(const char* value, size_t size) {
  
  chainid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.chainId)
}
inline ::std::string* EosSignData::mutable_chainid() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.chainId)
  return chainid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosSignData::release_chainid() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.chainId)
  
  return chainid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_allocated_chainid(::std::string* chainid) {
  if (chainid != NULL) {
    
  } else {
    
  }
  chainid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chainid);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.chainId)
}

// optional string receiver = 4;
inline void EosSignData::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosSignData::receiver() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.receiver)
  return receiver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_receiver(const ::std::string& value) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.receiver)
}
inline void EosSignData::set_receiver(const char* value) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.receiver)
}
inline void EosSignData::set_receiver(const char* value, size_t size) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.receiver)
}
inline ::std::string* EosSignData::mutable_receiver() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.receiver)
  return receiver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosSignData::release_receiver() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.receiver)
  
  return receiver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_allocated_receiver(::std::string* receiver) {
  if (receiver != NULL) {
    
  } else {
    
  }
  receiver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.receiver)
}

// optional string payment = 5;
inline void EosSignData::clear_payment() {
  payment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosSignData::payment() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.payment)
  return payment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_payment(const ::std::string& value) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.payment)
}
inline void EosSignData::set_payment(const char* value) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.payment)
}
inline void EosSignData::set_payment(const char* value, size_t size) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.payment)
}
inline ::std::string* EosSignData::mutable_payment() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.payment)
  return payment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosSignData::release_payment() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.payment)
  
  return payment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_allocated_payment(::std::string* payment) {
  if (payment != NULL) {
    
  } else {
    
  }
  payment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payment);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.payment)
}

// optional string sender = 6;
inline void EosSignData::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosSignData::sender() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.sender)
  return sender_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.sender)
}
inline void EosSignData::set_sender(const char* value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.sender)
}
inline void EosSignData::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.sender)
}
inline ::std::string* EosSignData::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosSignData::release_sender() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.sender)
}

inline const EosSignData* EosSignData::internal_default_instance() {
  return &EosSignData_default_instance_.get();
}
// -------------------------------------------------------------------

// EosTxOutput

// repeated .eosapi.EosSignResult trans_multi_signs = 1;
inline int EosTxOutput::trans_multi_signs_size() const {
  return trans_multi_signs_.size();
}
inline void EosTxOutput::clear_trans_multi_signs() {
  trans_multi_signs_.Clear();
}
inline const ::eosapi::EosSignResult& EosTxOutput::trans_multi_signs(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosTxOutput.trans_multi_signs)
  return trans_multi_signs_.Get(index);
}
inline ::eosapi::EosSignResult* EosTxOutput::mutable_trans_multi_signs(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosTxOutput.trans_multi_signs)
  return trans_multi_signs_.Mutable(index);
}
inline ::eosapi::EosSignResult* EosTxOutput::add_trans_multi_signs() {
  // @@protoc_insertion_point(field_add:eosapi.EosTxOutput.trans_multi_signs)
  return trans_multi_signs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignResult >*
EosTxOutput::mutable_trans_multi_signs() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosTxOutput.trans_multi_signs)
  return &trans_multi_signs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignResult >&
EosTxOutput::trans_multi_signs() const {
  // @@protoc_insertion_point(field_list:eosapi.EosTxOutput.trans_multi_signs)
  return trans_multi_signs_;
}

inline const EosTxOutput* EosTxOutput::internal_default_instance() {
  return &EosTxOutput_default_instance_.get();
}
// -------------------------------------------------------------------

// EosSignResult

// optional string hash = 1;
inline void EosSignResult::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosSignResult::hash() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignResult.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignResult::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignResult.hash)
}
inline void EosSignResult::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignResult.hash)
}
inline void EosSignResult::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignResult.hash)
}
inline ::std::string* EosSignResult::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignResult.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosSignResult::release_hash() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignResult.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignResult::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignResult.hash)
}

// repeated string signs = 2;
inline int EosSignResult::signs_size() const {
  return signs_.size();
}
inline void EosSignResult::clear_signs() {
  signs_.Clear();
}
inline const ::std::string& EosSignResult::signs(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignResult.signs)
  return signs_.Get(index);
}
inline ::std::string* EosSignResult::mutable_signs(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignResult.signs)
  return signs_.Mutable(index);
}
inline void EosSignResult::set_signs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:eosapi.EosSignResult.signs)
  signs_.Mutable(index)->assign(value);
}
inline void EosSignResult::set_signs(int index, const char* value) {
  signs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignResult.signs)
}
inline void EosSignResult::set_signs(int index, const char* value, size_t size) {
  signs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignResult.signs)
}
inline ::std::string* EosSignResult::add_signs() {
  // @@protoc_insertion_point(field_add_mutable:eosapi.EosSignResult.signs)
  return signs_.Add();
}
inline void EosSignResult::add_signs(const ::std::string& value) {
  signs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eosapi.EosSignResult.signs)
}
inline void EosSignResult::add_signs(const char* value) {
  signs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eosapi.EosSignResult.signs)
}
inline void EosSignResult::add_signs(const char* value, size_t size) {
  signs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eosapi.EosSignResult.signs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EosSignResult::signs() const {
  // @@protoc_insertion_point(field_list:eosapi.EosSignResult.signs)
  return signs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EosSignResult::mutable_signs() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosSignResult.signs)
  return &signs_;
}

inline const EosSignResult* EosSignResult::internal_default_instance() {
  return &EosSignResult_default_instance_.get();
}
// -------------------------------------------------------------------

// EosMessageInput

// optional string data = 1;
inline void EosMessageInput::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosMessageInput::data() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageInput.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageInput::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageInput.data)
}
inline void EosMessageInput::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageInput.data)
}
inline void EosMessageInput::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageInput.data)
}
inline ::std::string* EosMessageInput::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageInput.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosMessageInput::release_data() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageInput.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageInput::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageInput.data)
}

// optional string pubkey = 2;
inline void EosMessageInput::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosMessageInput::pubkey() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageInput.pubkey)
  return pubkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageInput::set_pubkey(const ::std::string& value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageInput.pubkey)
}
inline void EosMessageInput::set_pubkey(const char* value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageInput.pubkey)
}
inline void EosMessageInput::set_pubkey(const char* value, size_t size) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageInput.pubkey)
}
inline ::std::string* EosMessageInput::mutable_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageInput.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosMessageInput::release_pubkey() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageInput.pubkey)
  
  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageInput::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageInput.pubkey)
}

// optional bool isHex = 3;
inline void EosMessageInput::clear_ishex() {
  ishex_ = false;
}
inline bool EosMessageInput::ishex() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageInput.isHex)
  return ishex_;
}
inline void EosMessageInput::set_ishex(bool value) {
  
  ishex_ = value;
  // @@protoc_insertion_point(field_set:eosapi.EosMessageInput.isHex)
}

inline const EosMessageInput* EosMessageInput::internal_default_instance() {
  return &EosMessageInput_default_instance_.get();
}
// -------------------------------------------------------------------

// EosMessageOutput

// optional string signature = 1;
inline void EosMessageOutput::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosMessageOutput::signature() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageOutput.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageOutput::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageOutput.signature)
}
inline void EosMessageOutput::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageOutput.signature)
}
inline void EosMessageOutput::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageOutput.signature)
}
inline ::std::string* EosMessageOutput::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageOutput.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosMessageOutput::release_signature() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageOutput.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageOutput::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageOutput.signature)
}

inline const EosMessageOutput* EosMessageOutput::internal_default_instance() {
  return &EosMessageOutput_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace eosapi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_eos_2eproto__INCLUDED
