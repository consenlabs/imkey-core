// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "substrate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace substrateapi {

namespace {

const ::google::protobuf::Descriptor* SubstrateRawTxIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubstrateRawTxIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubstrateTxOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubstrateTxOut_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_substrate_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_substrate_2eproto() {
  protobuf_AddDesc_substrate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "substrate.proto");
  GOOGLE_CHECK(file != NULL);
  SubstrateRawTxIn_descriptor_ = file->message_type(0);
  static const int SubstrateRawTxIn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubstrateRawTxIn, rawdata_),
  };
  SubstrateRawTxIn_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubstrateRawTxIn_descriptor_,
      SubstrateRawTxIn::internal_default_instance(),
      SubstrateRawTxIn_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubstrateRawTxIn),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubstrateRawTxIn, _internal_metadata_));
  SubstrateTxOut_descriptor_ = file->message_type(1);
  static const int SubstrateTxOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubstrateTxOut, signature_),
  };
  SubstrateTxOut_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubstrateTxOut_descriptor_,
      SubstrateTxOut::internal_default_instance(),
      SubstrateTxOut_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubstrateTxOut),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubstrateTxOut, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_substrate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubstrateRawTxIn_descriptor_, SubstrateRawTxIn::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubstrateTxOut_descriptor_, SubstrateTxOut::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_substrate_2eproto() {
  SubstrateRawTxIn_default_instance_.Shutdown();
  delete SubstrateRawTxIn_reflection_;
  SubstrateTxOut_default_instance_.Shutdown();
  delete SubstrateTxOut_reflection_;
}

void protobuf_InitDefaults_substrate_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  SubstrateRawTxIn_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SubstrateTxOut_default_instance_.DefaultConstruct();
  SubstrateRawTxIn_default_instance_.get_mutable()->InitAsDefaultInstance();
  SubstrateTxOut_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_substrate_2eproto_once_);
void protobuf_InitDefaults_substrate_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_substrate_2eproto_once_,
                 &protobuf_InitDefaults_substrate_2eproto_impl);
}
void protobuf_AddDesc_substrate_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_substrate_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017substrate.proto\022\014substrateapi\"#\n\020Subst"
    "rateRawTxIn\022\017\n\007rawData\030\001 \001(\t\"#\n\016Substrat"
    "eTxOut\022\021\n\tsignature\030\001 \001(\tb\006proto3", 113);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "substrate.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_substrate_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_substrate_2eproto_once_);
void protobuf_AddDesc_substrate_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_substrate_2eproto_once_,
                 &protobuf_AddDesc_substrate_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_substrate_2eproto {
  StaticDescriptorInitializer_substrate_2eproto() {
    protobuf_AddDesc_substrate_2eproto();
  }
} static_descriptor_initializer_substrate_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubstrateRawTxIn::kRawDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubstrateRawTxIn::SubstrateRawTxIn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_substrate_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:substrateapi.SubstrateRawTxIn)
}

void SubstrateRawTxIn::InitAsDefaultInstance() {
}

SubstrateRawTxIn::SubstrateRawTxIn(const SubstrateRawTxIn& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:substrateapi.SubstrateRawTxIn)
}

void SubstrateRawTxIn::SharedCtor() {
  rawdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SubstrateRawTxIn::~SubstrateRawTxIn() {
  // @@protoc_insertion_point(destructor:substrateapi.SubstrateRawTxIn)
  SharedDtor();
}

void SubstrateRawTxIn::SharedDtor() {
  rawdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubstrateRawTxIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubstrateRawTxIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubstrateRawTxIn_descriptor_;
}

const SubstrateRawTxIn& SubstrateRawTxIn::default_instance() {
  protobuf_InitDefaults_substrate_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubstrateRawTxIn> SubstrateRawTxIn_default_instance_;

SubstrateRawTxIn* SubstrateRawTxIn::New(::google::protobuf::Arena* arena) const {
  SubstrateRawTxIn* n = new SubstrateRawTxIn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubstrateRawTxIn::Clear() {
// @@protoc_insertion_point(message_clear_start:substrateapi.SubstrateRawTxIn)
  rawdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SubstrateRawTxIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:substrateapi.SubstrateRawTxIn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rawData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rawdata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rawdata().data(), this->rawdata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "substrateapi.SubstrateRawTxIn.rawData"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:substrateapi.SubstrateRawTxIn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:substrateapi.SubstrateRawTxIn)
  return false;
#undef DO_
}

void SubstrateRawTxIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:substrateapi.SubstrateRawTxIn)
  // optional string rawData = 1;
  if (this->rawdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rawdata().data(), this->rawdata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "substrateapi.SubstrateRawTxIn.rawData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rawdata(), output);
  }

  // @@protoc_insertion_point(serialize_end:substrateapi.SubstrateRawTxIn)
}

::google::protobuf::uint8* SubstrateRawTxIn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:substrateapi.SubstrateRawTxIn)
  // optional string rawData = 1;
  if (this->rawdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rawdata().data(), this->rawdata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "substrateapi.SubstrateRawTxIn.rawData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rawdata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:substrateapi.SubstrateRawTxIn)
  return target;
}

size_t SubstrateRawTxIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrateapi.SubstrateRawTxIn)
  size_t total_size = 0;

  // optional string rawData = 1;
  if (this->rawdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rawdata());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubstrateRawTxIn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrateapi.SubstrateRawTxIn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubstrateRawTxIn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubstrateRawTxIn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrateapi.SubstrateRawTxIn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrateapi.SubstrateRawTxIn)
    UnsafeMergeFrom(*source);
  }
}

void SubstrateRawTxIn::MergeFrom(const SubstrateRawTxIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrateapi.SubstrateRawTxIn)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubstrateRawTxIn::UnsafeMergeFrom(const SubstrateRawTxIn& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.rawdata().size() > 0) {

    rawdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rawdata_);
  }
}

void SubstrateRawTxIn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrateapi.SubstrateRawTxIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstrateRawTxIn::CopyFrom(const SubstrateRawTxIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrateapi.SubstrateRawTxIn)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubstrateRawTxIn::IsInitialized() const {

  return true;
}

void SubstrateRawTxIn::Swap(SubstrateRawTxIn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubstrateRawTxIn::InternalSwap(SubstrateRawTxIn* other) {
  rawdata_.Swap(&other->rawdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubstrateRawTxIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubstrateRawTxIn_descriptor_;
  metadata.reflection = SubstrateRawTxIn_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubstrateRawTxIn

// optional string rawData = 1;
void SubstrateRawTxIn::clear_rawdata() {
  rawdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubstrateRawTxIn::rawdata() const {
  // @@protoc_insertion_point(field_get:substrateapi.SubstrateRawTxIn.rawData)
  return rawdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubstrateRawTxIn::set_rawdata(const ::std::string& value) {
  
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:substrateapi.SubstrateRawTxIn.rawData)
}
void SubstrateRawTxIn::set_rawdata(const char* value) {
  
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:substrateapi.SubstrateRawTxIn.rawData)
}
void SubstrateRawTxIn::set_rawdata(const char* value, size_t size) {
  
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:substrateapi.SubstrateRawTxIn.rawData)
}
::std::string* SubstrateRawTxIn::mutable_rawdata() {
  
  // @@protoc_insertion_point(field_mutable:substrateapi.SubstrateRawTxIn.rawData)
  return rawdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubstrateRawTxIn::release_rawdata() {
  // @@protoc_insertion_point(field_release:substrateapi.SubstrateRawTxIn.rawData)
  
  return rawdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubstrateRawTxIn::set_allocated_rawdata(::std::string* rawdata) {
  if (rawdata != NULL) {
    
  } else {
    
  }
  rawdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rawdata);
  // @@protoc_insertion_point(field_set_allocated:substrateapi.SubstrateRawTxIn.rawData)
}

inline const SubstrateRawTxIn* SubstrateRawTxIn::internal_default_instance() {
  return &SubstrateRawTxIn_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubstrateTxOut::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubstrateTxOut::SubstrateTxOut()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_substrate_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:substrateapi.SubstrateTxOut)
}

void SubstrateTxOut::InitAsDefaultInstance() {
}

SubstrateTxOut::SubstrateTxOut(const SubstrateTxOut& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:substrateapi.SubstrateTxOut)
}

void SubstrateTxOut::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SubstrateTxOut::~SubstrateTxOut() {
  // @@protoc_insertion_point(destructor:substrateapi.SubstrateTxOut)
  SharedDtor();
}

void SubstrateTxOut::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubstrateTxOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubstrateTxOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubstrateTxOut_descriptor_;
}

const SubstrateTxOut& SubstrateTxOut::default_instance() {
  protobuf_InitDefaults_substrate_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubstrateTxOut> SubstrateTxOut_default_instance_;

SubstrateTxOut* SubstrateTxOut::New(::google::protobuf::Arena* arena) const {
  SubstrateTxOut* n = new SubstrateTxOut;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubstrateTxOut::Clear() {
// @@protoc_insertion_point(message_clear_start:substrateapi.SubstrateTxOut)
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SubstrateTxOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:substrateapi.SubstrateTxOut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string signature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "substrateapi.SubstrateTxOut.signature"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:substrateapi.SubstrateTxOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:substrateapi.SubstrateTxOut)
  return false;
#undef DO_
}

void SubstrateTxOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:substrateapi.SubstrateTxOut)
  // optional string signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "substrateapi.SubstrateTxOut.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signature(), output);
  }

  // @@protoc_insertion_point(serialize_end:substrateapi.SubstrateTxOut)
}

::google::protobuf::uint8* SubstrateTxOut::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:substrateapi.SubstrateTxOut)
  // optional string signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "substrateapi.SubstrateTxOut.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:substrateapi.SubstrateTxOut)
  return target;
}

size_t SubstrateTxOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrateapi.SubstrateTxOut)
  size_t total_size = 0;

  // optional string signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubstrateTxOut::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrateapi.SubstrateTxOut)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubstrateTxOut* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubstrateTxOut>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrateapi.SubstrateTxOut)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrateapi.SubstrateTxOut)
    UnsafeMergeFrom(*source);
  }
}

void SubstrateTxOut::MergeFrom(const SubstrateTxOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrateapi.SubstrateTxOut)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubstrateTxOut::UnsafeMergeFrom(const SubstrateTxOut& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void SubstrateTxOut::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrateapi.SubstrateTxOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstrateTxOut::CopyFrom(const SubstrateTxOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrateapi.SubstrateTxOut)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubstrateTxOut::IsInitialized() const {

  return true;
}

void SubstrateTxOut::Swap(SubstrateTxOut* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubstrateTxOut::InternalSwap(SubstrateTxOut* other) {
  signature_.Swap(&other->signature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubstrateTxOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubstrateTxOut_descriptor_;
  metadata.reflection = SubstrateTxOut_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubstrateTxOut

// optional string signature = 1;
void SubstrateTxOut::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubstrateTxOut::signature() const {
  // @@protoc_insertion_point(field_get:substrateapi.SubstrateTxOut.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubstrateTxOut::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:substrateapi.SubstrateTxOut.signature)
}
void SubstrateTxOut::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:substrateapi.SubstrateTxOut.signature)
}
void SubstrateTxOut::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:substrateapi.SubstrateTxOut.signature)
}
::std::string* SubstrateTxOut::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:substrateapi.SubstrateTxOut.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubstrateTxOut::release_signature() {
  // @@protoc_insertion_point(field_release:substrateapi.SubstrateTxOut.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubstrateTxOut::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:substrateapi.SubstrateTxOut.signature)
}

inline const SubstrateTxOut* SubstrateTxOut::internal_default_instance() {
  return &SubstrateTxOut_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace substrateapi

// @@protoc_insertion_point(global_scope)
