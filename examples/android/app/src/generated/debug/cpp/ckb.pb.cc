// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ckb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ckb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace nervosapi {

namespace {

const ::google::protobuf::Descriptor* OutPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Witness_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Witness_reflection_ = NULL;
const ::google::protobuf::Descriptor* Script_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Script_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* CachedCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachedCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* CkbTxInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CkbTxInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* CkbTxOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CkbTxOutput_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ckb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ckb_2eproto() {
  protobuf_AddDesc_ckb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ckb.proto");
  GOOGLE_CHECK(file != NULL);
  OutPoint_descriptor_ = file->message_type(0);
  static const int OutPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutPoint, txhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutPoint, index_),
  };
  OutPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OutPoint_descriptor_,
      OutPoint::internal_default_instance(),
      OutPoint_offsets_,
      -1,
      -1,
      -1,
      sizeof(OutPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutPoint, _internal_metadata_));
  Witness_descriptor_ = file->message_type(1);
  static const int Witness_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Witness, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Witness, inputtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Witness, outputtype_),
  };
  Witness_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Witness_descriptor_,
      Witness::internal_default_instance(),
      Witness_offsets_,
      -1,
      -1,
      -1,
      sizeof(Witness),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Witness, _internal_metadata_));
  Script_descriptor_ = file->message_type(2);
  static const int Script_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Script, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Script, codehash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Script, hashtype_),
  };
  Script_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Script_descriptor_,
      Script::internal_default_instance(),
      Script_offsets_,
      -1,
      -1,
      -1,
      sizeof(Script),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Script, _internal_metadata_));
  CellInput_descriptor_ = file->message_type(3);
  static const int CellInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellInput, previousoutput_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellInput, since_),
  };
  CellInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CellInput_descriptor_,
      CellInput::internal_default_instance(),
      CellInput_offsets_,
      -1,
      -1,
      -1,
      sizeof(CellInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellInput, _internal_metadata_));
  CachedCell_descriptor_ = file->message_type(4);
  static const int CachedCell_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedCell, capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedCell, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedCell, outpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedCell, derivedpath_),
  };
  CachedCell_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CachedCell_descriptor_,
      CachedCell::internal_default_instance(),
      CachedCell_offsets_,
      -1,
      -1,
      -1,
      sizeof(CachedCell),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedCell, _internal_metadata_));
  CkbTxInput_descriptor_ = file->message_type(5);
  static const int CkbTxInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CkbTxInput, inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CkbTxInput, witnesses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CkbTxInput, cachedcells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CkbTxInput, txhash_),
  };
  CkbTxInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CkbTxInput_descriptor_,
      CkbTxInput::internal_default_instance(),
      CkbTxInput_offsets_,
      -1,
      -1,
      -1,
      sizeof(CkbTxInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CkbTxInput, _internal_metadata_));
  CkbTxOutput_descriptor_ = file->message_type(6);
  static const int CkbTxOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CkbTxOutput, txhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CkbTxOutput, witnesses_),
  };
  CkbTxOutput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CkbTxOutput_descriptor_,
      CkbTxOutput::internal_default_instance(),
      CkbTxOutput_offsets_,
      -1,
      -1,
      -1,
      sizeof(CkbTxOutput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CkbTxOutput, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ckb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OutPoint_descriptor_, OutPoint::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Witness_descriptor_, Witness::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Script_descriptor_, Script::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CellInput_descriptor_, CellInput::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CachedCell_descriptor_, CachedCell::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CkbTxInput_descriptor_, CkbTxInput::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CkbTxOutput_descriptor_, CkbTxOutput::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ckb_2eproto() {
  OutPoint_default_instance_.Shutdown();
  delete OutPoint_reflection_;
  Witness_default_instance_.Shutdown();
  delete Witness_reflection_;
  Script_default_instance_.Shutdown();
  delete Script_reflection_;
  CellInput_default_instance_.Shutdown();
  delete CellInput_reflection_;
  CachedCell_default_instance_.Shutdown();
  delete CachedCell_reflection_;
  CkbTxInput_default_instance_.Shutdown();
  delete CkbTxInput_reflection_;
  CkbTxOutput_default_instance_.Shutdown();
  delete CkbTxOutput_reflection_;
}

void protobuf_InitDefaults_ckb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  OutPoint_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Witness_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Script_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CellInput_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CachedCell_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CkbTxInput_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CkbTxOutput_default_instance_.DefaultConstruct();
  OutPoint_default_instance_.get_mutable()->InitAsDefaultInstance();
  Witness_default_instance_.get_mutable()->InitAsDefaultInstance();
  Script_default_instance_.get_mutable()->InitAsDefaultInstance();
  CellInput_default_instance_.get_mutable()->InitAsDefaultInstance();
  CachedCell_default_instance_.get_mutable()->InitAsDefaultInstance();
  CkbTxInput_default_instance_.get_mutable()->InitAsDefaultInstance();
  CkbTxOutput_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_ckb_2eproto_once_);
void protobuf_InitDefaults_ckb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_ckb_2eproto_once_,
                 &protobuf_InitDefaults_ckb_2eproto_impl);
}
void protobuf_AddDesc_ckb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_ckb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tckb.proto\022\tnervosapi\")\n\010OutPoint\022\016\n\006tx"
    "Hash\030\001 \001(\t\022\r\n\005index\030\002 \001(\005\">\n\007Witness\022\014\n\004"
    "lock\030\001 \001(\t\022\021\n\tinputType\030\002 \001(\t\022\022\n\noutputT"
    "ype\030\003 \001(\t\":\n\006Script\022\014\n\004args\030\001 \001(\t\022\020\n\010cod"
    "eHash\030\002 \001(\t\022\020\n\010hashType\030\003 \001(\t\"G\n\tCellInp"
    "ut\022+\n\016previousOutput\030\001 \001(\0132\023.nervosapi.O"
    "utPoint\022\r\n\005since\030\002 \001(\t\"{\n\nCachedCell\022\020\n\010"
    "capacity\030\001 \001(\003\022\037\n\004lock\030\002 \001(\0132\021.nervosapi"
    ".Script\022%\n\010outPoint\030\003 \001(\0132\023.nervosapi.Ou"
    "tPoint\022\023\n\013derivedPath\030\004 \001(\t\"\225\001\n\nCkbTxInp"
    "ut\022$\n\006inputs\030\001 \003(\0132\024.nervosapi.CellInput"
    "\022%\n\twitnesses\030\002 \003(\0132\022.nervosapi.Witness\022"
    "*\n\013cachedCells\030\003 \003(\0132\025.nervosapi.CachedC"
    "ell\022\016\n\006txHash\030\004 \001(\t\"0\n\013CkbTxOutput\022\016\n\006tx"
    "Hash\030\001 \001(\t\022\021\n\twitnesses\030\002 \003(\tb\006proto3", 597);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ckb.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ckb_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ckb_2eproto_once_);
void protobuf_AddDesc_ckb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ckb_2eproto_once_,
                 &protobuf_AddDesc_ckb_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ckb_2eproto {
  StaticDescriptorInitializer_ckb_2eproto() {
    protobuf_AddDesc_ckb_2eproto();
  }
} static_descriptor_initializer_ckb_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OutPoint::kTxHashFieldNumber;
const int OutPoint::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OutPoint::OutPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ckb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:nervosapi.OutPoint)
}

void OutPoint::InitAsDefaultInstance() {
}

OutPoint::OutPoint(const OutPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nervosapi.OutPoint)
}

void OutPoint::SharedCtor() {
  txhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
  _cached_size_ = 0;
}

OutPoint::~OutPoint() {
  // @@protoc_insertion_point(destructor:nervosapi.OutPoint)
  SharedDtor();
}

void OutPoint::SharedDtor() {
  txhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OutPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutPoint_descriptor_;
}

const OutPoint& OutPoint::default_instance() {
  protobuf_InitDefaults_ckb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OutPoint> OutPoint_default_instance_;

OutPoint* OutPoint::New(::google::protobuf::Arena* arena) const {
  OutPoint* n = new OutPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OutPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:nervosapi.OutPoint)
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
}

bool OutPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nervosapi.OutPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string txHash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txhash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txhash().data(), this->txhash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nervosapi.OutPoint.txHash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nervosapi.OutPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nervosapi.OutPoint)
  return false;
#undef DO_
}

void OutPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nervosapi.OutPoint)
  // optional string txHash = 1;
  if (this->txhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txhash().data(), this->txhash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.OutPoint.txHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txhash(), output);
  }

  // optional int32 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // @@protoc_insertion_point(serialize_end:nervosapi.OutPoint)
}

::google::protobuf::uint8* OutPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nervosapi.OutPoint)
  // optional string txHash = 1;
  if (this->txhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txhash().data(), this->txhash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.OutPoint.txHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txhash(), target);
  }

  // optional int32 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nervosapi.OutPoint)
  return target;
}

size_t OutPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nervosapi.OutPoint)
  size_t total_size = 0;

  // optional string txHash = 1;
  if (this->txhash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txhash());
  }

  // optional int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nervosapi.OutPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OutPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OutPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nervosapi.OutPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nervosapi.OutPoint)
    UnsafeMergeFrom(*source);
  }
}

void OutPoint::MergeFrom(const OutPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nervosapi.OutPoint)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OutPoint::UnsafeMergeFrom(const OutPoint& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.txhash().size() > 0) {

    txhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txhash_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void OutPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nervosapi.OutPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutPoint::CopyFrom(const OutPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nervosapi.OutPoint)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OutPoint::IsInitialized() const {

  return true;
}

void OutPoint::Swap(OutPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OutPoint::InternalSwap(OutPoint* other) {
  txhash_.Swap(&other->txhash_);
  std::swap(index_, other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OutPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutPoint_descriptor_;
  metadata.reflection = OutPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OutPoint

// optional string txHash = 1;
void OutPoint::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OutPoint::txhash() const {
  // @@protoc_insertion_point(field_get:nervosapi.OutPoint.txHash)
  return txhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutPoint::set_txhash(const ::std::string& value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nervosapi.OutPoint.txHash)
}
void OutPoint::set_txhash(const char* value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nervosapi.OutPoint.txHash)
}
void OutPoint::set_txhash(const char* value, size_t size) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nervosapi.OutPoint.txHash)
}
::std::string* OutPoint::mutable_txhash() {
  
  // @@protoc_insertion_point(field_mutable:nervosapi.OutPoint.txHash)
  return txhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OutPoint::release_txhash() {
  // @@protoc_insertion_point(field_release:nervosapi.OutPoint.txHash)
  
  return txhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutPoint::set_allocated_txhash(::std::string* txhash) {
  if (txhash != NULL) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:nervosapi.OutPoint.txHash)
}

// optional int32 index = 2;
void OutPoint::clear_index() {
  index_ = 0;
}
::google::protobuf::int32 OutPoint::index() const {
  // @@protoc_insertion_point(field_get:nervosapi.OutPoint.index)
  return index_;
}
void OutPoint::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:nervosapi.OutPoint.index)
}

inline const OutPoint* OutPoint::internal_default_instance() {
  return &OutPoint_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Witness::kLockFieldNumber;
const int Witness::kInputTypeFieldNumber;
const int Witness::kOutputTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Witness::Witness()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ckb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:nervosapi.Witness)
}

void Witness::InitAsDefaultInstance() {
}

Witness::Witness(const Witness& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nervosapi.Witness)
}

void Witness::SharedCtor() {
  lock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inputtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  outputtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Witness::~Witness() {
  // @@protoc_insertion_point(destructor:nervosapi.Witness)
  SharedDtor();
}

void Witness::SharedDtor() {
  lock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inputtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  outputtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Witness::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Witness::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Witness_descriptor_;
}

const Witness& Witness::default_instance() {
  protobuf_InitDefaults_ckb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Witness> Witness_default_instance_;

Witness* Witness::New(::google::protobuf::Arena* arena) const {
  Witness* n = new Witness;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Witness::Clear() {
// @@protoc_insertion_point(message_clear_start:nervosapi.Witness)
  lock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inputtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  outputtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Witness::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nervosapi.Witness)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string lock = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lock()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lock().data(), this->lock().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nervosapi.Witness.lock"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_inputType;
        break;
      }

      // optional string inputType = 2;
      case 2: {
        if (tag == 18) {
         parse_inputType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inputtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inputtype().data(), this->inputtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nervosapi.Witness.inputType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_outputType;
        break;
      }

      // optional string outputType = 3;
      case 3: {
        if (tag == 26) {
         parse_outputType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outputtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->outputtype().data(), this->outputtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nervosapi.Witness.outputType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nervosapi.Witness)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nervosapi.Witness)
  return false;
#undef DO_
}

void Witness::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nervosapi.Witness)
  // optional string lock = 1;
  if (this->lock().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock().data(), this->lock().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.Witness.lock");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lock(), output);
  }

  // optional string inputType = 2;
  if (this->inputtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inputtype().data(), this->inputtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.Witness.inputType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->inputtype(), output);
  }

  // optional string outputType = 3;
  if (this->outputtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->outputtype().data(), this->outputtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.Witness.outputType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->outputtype(), output);
  }

  // @@protoc_insertion_point(serialize_end:nervosapi.Witness)
}

::google::protobuf::uint8* Witness::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nervosapi.Witness)
  // optional string lock = 1;
  if (this->lock().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock().data(), this->lock().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.Witness.lock");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lock(), target);
  }

  // optional string inputType = 2;
  if (this->inputtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inputtype().data(), this->inputtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.Witness.inputType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inputtype(), target);
  }

  // optional string outputType = 3;
  if (this->outputtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->outputtype().data(), this->outputtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.Witness.outputType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->outputtype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nervosapi.Witness)
  return target;
}

size_t Witness::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nervosapi.Witness)
  size_t total_size = 0;

  // optional string lock = 1;
  if (this->lock().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lock());
  }

  // optional string inputType = 2;
  if (this->inputtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inputtype());
  }

  // optional string outputType = 3;
  if (this->outputtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->outputtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Witness::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nervosapi.Witness)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Witness* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Witness>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nervosapi.Witness)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nervosapi.Witness)
    UnsafeMergeFrom(*source);
  }
}

void Witness::MergeFrom(const Witness& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nervosapi.Witness)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Witness::UnsafeMergeFrom(const Witness& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.lock().size() > 0) {

    lock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_);
  }
  if (from.inputtype().size() > 0) {

    inputtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inputtype_);
  }
  if (from.outputtype().size() > 0) {

    outputtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.outputtype_);
  }
}

void Witness::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nervosapi.Witness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Witness::CopyFrom(const Witness& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nervosapi.Witness)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Witness::IsInitialized() const {

  return true;
}

void Witness::Swap(Witness* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Witness::InternalSwap(Witness* other) {
  lock_.Swap(&other->lock_);
  inputtype_.Swap(&other->inputtype_);
  outputtype_.Swap(&other->outputtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Witness::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Witness_descriptor_;
  metadata.reflection = Witness_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Witness

// optional string lock = 1;
void Witness::clear_lock() {
  lock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Witness::lock() const {
  // @@protoc_insertion_point(field_get:nervosapi.Witness.lock)
  return lock_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Witness::set_lock(const ::std::string& value) {
  
  lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nervosapi.Witness.lock)
}
void Witness::set_lock(const char* value) {
  
  lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nervosapi.Witness.lock)
}
void Witness::set_lock(const char* value, size_t size) {
  
  lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nervosapi.Witness.lock)
}
::std::string* Witness::mutable_lock() {
  
  // @@protoc_insertion_point(field_mutable:nervosapi.Witness.lock)
  return lock_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Witness::release_lock() {
  // @@protoc_insertion_point(field_release:nervosapi.Witness.lock)
  
  return lock_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Witness::set_allocated_lock(::std::string* lock) {
  if (lock != NULL) {
    
  } else {
    
  }
  lock_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock);
  // @@protoc_insertion_point(field_set_allocated:nervosapi.Witness.lock)
}

// optional string inputType = 2;
void Witness::clear_inputtype() {
  inputtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Witness::inputtype() const {
  // @@protoc_insertion_point(field_get:nervosapi.Witness.inputType)
  return inputtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Witness::set_inputtype(const ::std::string& value) {
  
  inputtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nervosapi.Witness.inputType)
}
void Witness::set_inputtype(const char* value) {
  
  inputtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nervosapi.Witness.inputType)
}
void Witness::set_inputtype(const char* value, size_t size) {
  
  inputtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nervosapi.Witness.inputType)
}
::std::string* Witness::mutable_inputtype() {
  
  // @@protoc_insertion_point(field_mutable:nervosapi.Witness.inputType)
  return inputtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Witness::release_inputtype() {
  // @@protoc_insertion_point(field_release:nervosapi.Witness.inputType)
  
  return inputtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Witness::set_allocated_inputtype(::std::string* inputtype) {
  if (inputtype != NULL) {
    
  } else {
    
  }
  inputtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inputtype);
  // @@protoc_insertion_point(field_set_allocated:nervosapi.Witness.inputType)
}

// optional string outputType = 3;
void Witness::clear_outputtype() {
  outputtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Witness::outputtype() const {
  // @@protoc_insertion_point(field_get:nervosapi.Witness.outputType)
  return outputtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Witness::set_outputtype(const ::std::string& value) {
  
  outputtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nervosapi.Witness.outputType)
}
void Witness::set_outputtype(const char* value) {
  
  outputtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nervosapi.Witness.outputType)
}
void Witness::set_outputtype(const char* value, size_t size) {
  
  outputtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nervosapi.Witness.outputType)
}
::std::string* Witness::mutable_outputtype() {
  
  // @@protoc_insertion_point(field_mutable:nervosapi.Witness.outputType)
  return outputtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Witness::release_outputtype() {
  // @@protoc_insertion_point(field_release:nervosapi.Witness.outputType)
  
  return outputtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Witness::set_allocated_outputtype(::std::string* outputtype) {
  if (outputtype != NULL) {
    
  } else {
    
  }
  outputtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), outputtype);
  // @@protoc_insertion_point(field_set_allocated:nervosapi.Witness.outputType)
}

inline const Witness* Witness::internal_default_instance() {
  return &Witness_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Script::kArgsFieldNumber;
const int Script::kCodeHashFieldNumber;
const int Script::kHashTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Script::Script()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ckb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:nervosapi.Script)
}

void Script::InitAsDefaultInstance() {
}

Script::Script(const Script& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nervosapi.Script)
}

void Script::SharedCtor() {
  args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codehash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Script::~Script() {
  // @@protoc_insertion_point(destructor:nervosapi.Script)
  SharedDtor();
}

void Script::SharedDtor() {
  args_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codehash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Script::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Script::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Script_descriptor_;
}

const Script& Script::default_instance() {
  protobuf_InitDefaults_ckb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Script> Script_default_instance_;

Script* Script::New(::google::protobuf::Arena* arena) const {
  Script* n = new Script;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Script::Clear() {
// @@protoc_insertion_point(message_clear_start:nervosapi.Script)
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Script::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nervosapi.Script)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string args = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nervosapi.Script.args"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_codeHash;
        break;
      }

      // optional string codeHash = 2;
      case 2: {
        if (tag == 18) {
         parse_codeHash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codehash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->codehash().data(), this->codehash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nervosapi.Script.codeHash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hashType;
        break;
      }

      // optional string hashType = 3;
      case 3: {
        if (tag == 26) {
         parse_hashType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hashtype().data(), this->hashtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nervosapi.Script.hashType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nervosapi.Script)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nervosapi.Script)
  return false;
#undef DO_
}

void Script::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nervosapi.Script)
  // optional string args = 1;
  if (this->args().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.Script.args");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->args(), output);
  }

  // optional string codeHash = 2;
  if (this->codehash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codehash().data(), this->codehash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.Script.codeHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->codehash(), output);
  }

  // optional string hashType = 3;
  if (this->hashtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashtype().data(), this->hashtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.Script.hashType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hashtype(), output);
  }

  // @@protoc_insertion_point(serialize_end:nervosapi.Script)
}

::google::protobuf::uint8* Script::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nervosapi.Script)
  // optional string args = 1;
  if (this->args().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.Script.args");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->args(), target);
  }

  // optional string codeHash = 2;
  if (this->codehash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codehash().data(), this->codehash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.Script.codeHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->codehash(), target);
  }

  // optional string hashType = 3;
  if (this->hashtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashtype().data(), this->hashtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.Script.hashType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hashtype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nervosapi.Script)
  return target;
}

size_t Script::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nervosapi.Script)
  size_t total_size = 0;

  // optional string args = 1;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->args());
  }

  // optional string codeHash = 2;
  if (this->codehash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->codehash());
  }

  // optional string hashType = 3;
  if (this->hashtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hashtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Script::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nervosapi.Script)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Script* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Script>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nervosapi.Script)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nervosapi.Script)
    UnsafeMergeFrom(*source);
  }
}

void Script::MergeFrom(const Script& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nervosapi.Script)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Script::UnsafeMergeFrom(const Script& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.args().size() > 0) {

    args_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.args_);
  }
  if (from.codehash().size() > 0) {

    codehash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codehash_);
  }
  if (from.hashtype().size() > 0) {

    hashtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashtype_);
  }
}

void Script::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nervosapi.Script)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Script::CopyFrom(const Script& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nervosapi.Script)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Script::IsInitialized() const {

  return true;
}

void Script::Swap(Script* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Script::InternalSwap(Script* other) {
  args_.Swap(&other->args_);
  codehash_.Swap(&other->codehash_);
  hashtype_.Swap(&other->hashtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Script::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Script_descriptor_;
  metadata.reflection = Script_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Script

// optional string args = 1;
void Script::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Script::args() const {
  // @@protoc_insertion_point(field_get:nervosapi.Script.args)
  return args_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Script::set_args(const ::std::string& value) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nervosapi.Script.args)
}
void Script::set_args(const char* value) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nervosapi.Script.args)
}
void Script::set_args(const char* value, size_t size) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nervosapi.Script.args)
}
::std::string* Script::mutable_args() {
  
  // @@protoc_insertion_point(field_mutable:nervosapi.Script.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Script::release_args() {
  // @@protoc_insertion_point(field_release:nervosapi.Script.args)
  
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Script::set_allocated_args(::std::string* args) {
  if (args != NULL) {
    
  } else {
    
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:nervosapi.Script.args)
}

// optional string codeHash = 2;
void Script::clear_codehash() {
  codehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Script::codehash() const {
  // @@protoc_insertion_point(field_get:nervosapi.Script.codeHash)
  return codehash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Script::set_codehash(const ::std::string& value) {
  
  codehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nervosapi.Script.codeHash)
}
void Script::set_codehash(const char* value) {
  
  codehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nervosapi.Script.codeHash)
}
void Script::set_codehash(const char* value, size_t size) {
  
  codehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nervosapi.Script.codeHash)
}
::std::string* Script::mutable_codehash() {
  
  // @@protoc_insertion_point(field_mutable:nervosapi.Script.codeHash)
  return codehash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Script::release_codehash() {
  // @@protoc_insertion_point(field_release:nervosapi.Script.codeHash)
  
  return codehash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Script::set_allocated_codehash(::std::string* codehash) {
  if (codehash != NULL) {
    
  } else {
    
  }
  codehash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codehash);
  // @@protoc_insertion_point(field_set_allocated:nervosapi.Script.codeHash)
}

// optional string hashType = 3;
void Script::clear_hashtype() {
  hashtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Script::hashtype() const {
  // @@protoc_insertion_point(field_get:nervosapi.Script.hashType)
  return hashtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Script::set_hashtype(const ::std::string& value) {
  
  hashtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nervosapi.Script.hashType)
}
void Script::set_hashtype(const char* value) {
  
  hashtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nervosapi.Script.hashType)
}
void Script::set_hashtype(const char* value, size_t size) {
  
  hashtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nervosapi.Script.hashType)
}
::std::string* Script::mutable_hashtype() {
  
  // @@protoc_insertion_point(field_mutable:nervosapi.Script.hashType)
  return hashtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Script::release_hashtype() {
  // @@protoc_insertion_point(field_release:nervosapi.Script.hashType)
  
  return hashtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Script::set_allocated_hashtype(::std::string* hashtype) {
  if (hashtype != NULL) {
    
  } else {
    
  }
  hashtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashtype);
  // @@protoc_insertion_point(field_set_allocated:nervosapi.Script.hashType)
}

inline const Script* Script::internal_default_instance() {
  return &Script_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CellInput::kPreviousOutputFieldNumber;
const int CellInput::kSinceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CellInput::CellInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ckb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:nervosapi.CellInput)
}

void CellInput::InitAsDefaultInstance() {
  previousoutput_ = const_cast< ::nervosapi::OutPoint*>(
      ::nervosapi::OutPoint::internal_default_instance());
}

CellInput::CellInput(const CellInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nervosapi.CellInput)
}

void CellInput::SharedCtor() {
  since_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousoutput_ = NULL;
  _cached_size_ = 0;
}

CellInput::~CellInput() {
  // @@protoc_insertion_point(destructor:nervosapi.CellInput)
  SharedDtor();
}

void CellInput::SharedDtor() {
  since_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &CellInput_default_instance_.get()) {
    delete previousoutput_;
  }
}

void CellInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellInput_descriptor_;
}

const CellInput& CellInput::default_instance() {
  protobuf_InitDefaults_ckb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CellInput> CellInput_default_instance_;

CellInput* CellInput::New(::google::protobuf::Arena* arena) const {
  CellInput* n = new CellInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CellInput::Clear() {
// @@protoc_insertion_point(message_clear_start:nervosapi.CellInput)
  if (GetArenaNoVirtual() == NULL && previousoutput_ != NULL) delete previousoutput_;
  previousoutput_ = NULL;
  since_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CellInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nervosapi.CellInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .nervosapi.OutPoint previousOutput = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_previousoutput()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_since;
        break;
      }

      // optional string since = 2;
      case 2: {
        if (tag == 18) {
         parse_since:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_since()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->since().data(), this->since().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nervosapi.CellInput.since"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nervosapi.CellInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nervosapi.CellInput)
  return false;
#undef DO_
}

void CellInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nervosapi.CellInput)
  // optional .nervosapi.OutPoint previousOutput = 1;
  if (this->has_previousoutput()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->previousoutput_, output);
  }

  // optional string since = 2;
  if (this->since().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->since().data(), this->since().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.CellInput.since");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->since(), output);
  }

  // @@protoc_insertion_point(serialize_end:nervosapi.CellInput)
}

::google::protobuf::uint8* CellInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nervosapi.CellInput)
  // optional .nervosapi.OutPoint previousOutput = 1;
  if (this->has_previousoutput()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->previousoutput_, false, target);
  }

  // optional string since = 2;
  if (this->since().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->since().data(), this->since().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.CellInput.since");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->since(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nervosapi.CellInput)
  return target;
}

size_t CellInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nervosapi.CellInput)
  size_t total_size = 0;

  // optional .nervosapi.OutPoint previousOutput = 1;
  if (this->has_previousoutput()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->previousoutput_);
  }

  // optional string since = 2;
  if (this->since().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->since());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nervosapi.CellInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CellInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CellInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nervosapi.CellInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nervosapi.CellInput)
    UnsafeMergeFrom(*source);
  }
}

void CellInput::MergeFrom(const CellInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nervosapi.CellInput)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CellInput::UnsafeMergeFrom(const CellInput& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_previousoutput()) {
    mutable_previousoutput()->::nervosapi::OutPoint::MergeFrom(from.previousoutput());
  }
  if (from.since().size() > 0) {

    since_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.since_);
  }
}

void CellInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nervosapi.CellInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellInput::CopyFrom(const CellInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nervosapi.CellInput)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CellInput::IsInitialized() const {

  return true;
}

void CellInput::Swap(CellInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CellInput::InternalSwap(CellInput* other) {
  std::swap(previousoutput_, other->previousoutput_);
  since_.Swap(&other->since_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CellInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellInput_descriptor_;
  metadata.reflection = CellInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CellInput

// optional .nervosapi.OutPoint previousOutput = 1;
bool CellInput::has_previousoutput() const {
  return this != internal_default_instance() && previousoutput_ != NULL;
}
void CellInput::clear_previousoutput() {
  if (GetArenaNoVirtual() == NULL && previousoutput_ != NULL) delete previousoutput_;
  previousoutput_ = NULL;
}
const ::nervosapi::OutPoint& CellInput::previousoutput() const {
  // @@protoc_insertion_point(field_get:nervosapi.CellInput.previousOutput)
  return previousoutput_ != NULL ? *previousoutput_
                         : *::nervosapi::OutPoint::internal_default_instance();
}
::nervosapi::OutPoint* CellInput::mutable_previousoutput() {
  
  if (previousoutput_ == NULL) {
    previousoutput_ = new ::nervosapi::OutPoint;
  }
  // @@protoc_insertion_point(field_mutable:nervosapi.CellInput.previousOutput)
  return previousoutput_;
}
::nervosapi::OutPoint* CellInput::release_previousoutput() {
  // @@protoc_insertion_point(field_release:nervosapi.CellInput.previousOutput)
  
  ::nervosapi::OutPoint* temp = previousoutput_;
  previousoutput_ = NULL;
  return temp;
}
void CellInput::set_allocated_previousoutput(::nervosapi::OutPoint* previousoutput) {
  delete previousoutput_;
  previousoutput_ = previousoutput;
  if (previousoutput) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nervosapi.CellInput.previousOutput)
}

// optional string since = 2;
void CellInput::clear_since() {
  since_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CellInput::since() const {
  // @@protoc_insertion_point(field_get:nervosapi.CellInput.since)
  return since_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CellInput::set_since(const ::std::string& value) {
  
  since_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nervosapi.CellInput.since)
}
void CellInput::set_since(const char* value) {
  
  since_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nervosapi.CellInput.since)
}
void CellInput::set_since(const char* value, size_t size) {
  
  since_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nervosapi.CellInput.since)
}
::std::string* CellInput::mutable_since() {
  
  // @@protoc_insertion_point(field_mutable:nervosapi.CellInput.since)
  return since_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CellInput::release_since() {
  // @@protoc_insertion_point(field_release:nervosapi.CellInput.since)
  
  return since_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CellInput::set_allocated_since(::std::string* since) {
  if (since != NULL) {
    
  } else {
    
  }
  since_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), since);
  // @@protoc_insertion_point(field_set_allocated:nervosapi.CellInput.since)
}

inline const CellInput* CellInput::internal_default_instance() {
  return &CellInput_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CachedCell::kCapacityFieldNumber;
const int CachedCell::kLockFieldNumber;
const int CachedCell::kOutPointFieldNumber;
const int CachedCell::kDerivedPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CachedCell::CachedCell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ckb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:nervosapi.CachedCell)
}

void CachedCell::InitAsDefaultInstance() {
  lock_ = const_cast< ::nervosapi::Script*>(
      ::nervosapi::Script::internal_default_instance());
  outpoint_ = const_cast< ::nervosapi::OutPoint*>(
      ::nervosapi::OutPoint::internal_default_instance());
}

CachedCell::CachedCell(const CachedCell& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nervosapi.CachedCell)
}

void CachedCell::SharedCtor() {
  derivedpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_ = NULL;
  outpoint_ = NULL;
  capacity_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

CachedCell::~CachedCell() {
  // @@protoc_insertion_point(destructor:nervosapi.CachedCell)
  SharedDtor();
}

void CachedCell::SharedDtor() {
  derivedpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &CachedCell_default_instance_.get()) {
    delete lock_;
    delete outpoint_;
  }
}

void CachedCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachedCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachedCell_descriptor_;
}

const CachedCell& CachedCell::default_instance() {
  protobuf_InitDefaults_ckb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CachedCell> CachedCell_default_instance_;

CachedCell* CachedCell::New(::google::protobuf::Arena* arena) const {
  CachedCell* n = new CachedCell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CachedCell::Clear() {
// @@protoc_insertion_point(message_clear_start:nervosapi.CachedCell)
  capacity_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && lock_ != NULL) delete lock_;
  lock_ = NULL;
  if (GetArenaNoVirtual() == NULL && outpoint_ != NULL) delete outpoint_;
  outpoint_ = NULL;
  derivedpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CachedCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nervosapi.CachedCell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 capacity = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lock;
        break;
      }

      // optional .nervosapi.Script lock = 2;
      case 2: {
        if (tag == 18) {
         parse_lock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_outPoint;
        break;
      }

      // optional .nervosapi.OutPoint outPoint = 3;
      case 3: {
        if (tag == 26) {
         parse_outPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outpoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_derivedPath;
        break;
      }

      // optional string derivedPath = 4;
      case 4: {
        if (tag == 34) {
         parse_derivedPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_derivedpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->derivedpath().data(), this->derivedpath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nervosapi.CachedCell.derivedPath"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nervosapi.CachedCell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nervosapi.CachedCell)
  return false;
#undef DO_
}

void CachedCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nervosapi.CachedCell)
  // optional int64 capacity = 1;
  if (this->capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->capacity(), output);
  }

  // optional .nervosapi.Script lock = 2;
  if (this->has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lock_, output);
  }

  // optional .nervosapi.OutPoint outPoint = 3;
  if (this->has_outpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->outpoint_, output);
  }

  // optional string derivedPath = 4;
  if (this->derivedpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->derivedpath().data(), this->derivedpath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.CachedCell.derivedPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->derivedpath(), output);
  }

  // @@protoc_insertion_point(serialize_end:nervosapi.CachedCell)
}

::google::protobuf::uint8* CachedCell::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nervosapi.CachedCell)
  // optional int64 capacity = 1;
  if (this->capacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->capacity(), target);
  }

  // optional .nervosapi.Script lock = 2;
  if (this->has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->lock_, false, target);
  }

  // optional .nervosapi.OutPoint outPoint = 3;
  if (this->has_outpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->outpoint_, false, target);
  }

  // optional string derivedPath = 4;
  if (this->derivedpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->derivedpath().data(), this->derivedpath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.CachedCell.derivedPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->derivedpath(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nervosapi.CachedCell)
  return target;
}

size_t CachedCell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nervosapi.CachedCell)
  size_t total_size = 0;

  // optional int64 capacity = 1;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->capacity());
  }

  // optional .nervosapi.Script lock = 2;
  if (this->has_lock()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lock_);
  }

  // optional .nervosapi.OutPoint outPoint = 3;
  if (this->has_outpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->outpoint_);
  }

  // optional string derivedPath = 4;
  if (this->derivedpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->derivedpath());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachedCell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nervosapi.CachedCell)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CachedCell* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CachedCell>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nervosapi.CachedCell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nervosapi.CachedCell)
    UnsafeMergeFrom(*source);
  }
}

void CachedCell::MergeFrom(const CachedCell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nervosapi.CachedCell)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CachedCell::UnsafeMergeFrom(const CachedCell& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
  if (from.has_lock()) {
    mutable_lock()->::nervosapi::Script::MergeFrom(from.lock());
  }
  if (from.has_outpoint()) {
    mutable_outpoint()->::nervosapi::OutPoint::MergeFrom(from.outpoint());
  }
  if (from.derivedpath().size() > 0) {

    derivedpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.derivedpath_);
  }
}

void CachedCell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nervosapi.CachedCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachedCell::CopyFrom(const CachedCell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nervosapi.CachedCell)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CachedCell::IsInitialized() const {

  return true;
}

void CachedCell::Swap(CachedCell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CachedCell::InternalSwap(CachedCell* other) {
  std::swap(capacity_, other->capacity_);
  std::swap(lock_, other->lock_);
  std::swap(outpoint_, other->outpoint_);
  derivedpath_.Swap(&other->derivedpath_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CachedCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachedCell_descriptor_;
  metadata.reflection = CachedCell_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CachedCell

// optional int64 capacity = 1;
void CachedCell::clear_capacity() {
  capacity_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CachedCell::capacity() const {
  // @@protoc_insertion_point(field_get:nervosapi.CachedCell.capacity)
  return capacity_;
}
void CachedCell::set_capacity(::google::protobuf::int64 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:nervosapi.CachedCell.capacity)
}

// optional .nervosapi.Script lock = 2;
bool CachedCell::has_lock() const {
  return this != internal_default_instance() && lock_ != NULL;
}
void CachedCell::clear_lock() {
  if (GetArenaNoVirtual() == NULL && lock_ != NULL) delete lock_;
  lock_ = NULL;
}
const ::nervosapi::Script& CachedCell::lock() const {
  // @@protoc_insertion_point(field_get:nervosapi.CachedCell.lock)
  return lock_ != NULL ? *lock_
                         : *::nervosapi::Script::internal_default_instance();
}
::nervosapi::Script* CachedCell::mutable_lock() {
  
  if (lock_ == NULL) {
    lock_ = new ::nervosapi::Script;
  }
  // @@protoc_insertion_point(field_mutable:nervosapi.CachedCell.lock)
  return lock_;
}
::nervosapi::Script* CachedCell::release_lock() {
  // @@protoc_insertion_point(field_release:nervosapi.CachedCell.lock)
  
  ::nervosapi::Script* temp = lock_;
  lock_ = NULL;
  return temp;
}
void CachedCell::set_allocated_lock(::nervosapi::Script* lock) {
  delete lock_;
  lock_ = lock;
  if (lock) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nervosapi.CachedCell.lock)
}

// optional .nervosapi.OutPoint outPoint = 3;
bool CachedCell::has_outpoint() const {
  return this != internal_default_instance() && outpoint_ != NULL;
}
void CachedCell::clear_outpoint() {
  if (GetArenaNoVirtual() == NULL && outpoint_ != NULL) delete outpoint_;
  outpoint_ = NULL;
}
const ::nervosapi::OutPoint& CachedCell::outpoint() const {
  // @@protoc_insertion_point(field_get:nervosapi.CachedCell.outPoint)
  return outpoint_ != NULL ? *outpoint_
                         : *::nervosapi::OutPoint::internal_default_instance();
}
::nervosapi::OutPoint* CachedCell::mutable_outpoint() {
  
  if (outpoint_ == NULL) {
    outpoint_ = new ::nervosapi::OutPoint;
  }
  // @@protoc_insertion_point(field_mutable:nervosapi.CachedCell.outPoint)
  return outpoint_;
}
::nervosapi::OutPoint* CachedCell::release_outpoint() {
  // @@protoc_insertion_point(field_release:nervosapi.CachedCell.outPoint)
  
  ::nervosapi::OutPoint* temp = outpoint_;
  outpoint_ = NULL;
  return temp;
}
void CachedCell::set_allocated_outpoint(::nervosapi::OutPoint* outpoint) {
  delete outpoint_;
  outpoint_ = outpoint;
  if (outpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nervosapi.CachedCell.outPoint)
}

// optional string derivedPath = 4;
void CachedCell::clear_derivedpath() {
  derivedpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CachedCell::derivedpath() const {
  // @@protoc_insertion_point(field_get:nervosapi.CachedCell.derivedPath)
  return derivedpath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CachedCell::set_derivedpath(const ::std::string& value) {
  
  derivedpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nervosapi.CachedCell.derivedPath)
}
void CachedCell::set_derivedpath(const char* value) {
  
  derivedpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nervosapi.CachedCell.derivedPath)
}
void CachedCell::set_derivedpath(const char* value, size_t size) {
  
  derivedpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nervosapi.CachedCell.derivedPath)
}
::std::string* CachedCell::mutable_derivedpath() {
  
  // @@protoc_insertion_point(field_mutable:nervosapi.CachedCell.derivedPath)
  return derivedpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CachedCell::release_derivedpath() {
  // @@protoc_insertion_point(field_release:nervosapi.CachedCell.derivedPath)
  
  return derivedpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CachedCell::set_allocated_derivedpath(::std::string* derivedpath) {
  if (derivedpath != NULL) {
    
  } else {
    
  }
  derivedpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), derivedpath);
  // @@protoc_insertion_point(field_set_allocated:nervosapi.CachedCell.derivedPath)
}

inline const CachedCell* CachedCell::internal_default_instance() {
  return &CachedCell_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CkbTxInput::kInputsFieldNumber;
const int CkbTxInput::kWitnessesFieldNumber;
const int CkbTxInput::kCachedCellsFieldNumber;
const int CkbTxInput::kTxHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CkbTxInput::CkbTxInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ckb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:nervosapi.CkbTxInput)
}

void CkbTxInput::InitAsDefaultInstance() {
}

CkbTxInput::CkbTxInput(const CkbTxInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nervosapi.CkbTxInput)
}

void CkbTxInput::SharedCtor() {
  txhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CkbTxInput::~CkbTxInput() {
  // @@protoc_insertion_point(destructor:nervosapi.CkbTxInput)
  SharedDtor();
}

void CkbTxInput::SharedDtor() {
  txhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CkbTxInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CkbTxInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CkbTxInput_descriptor_;
}

const CkbTxInput& CkbTxInput::default_instance() {
  protobuf_InitDefaults_ckb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CkbTxInput> CkbTxInput_default_instance_;

CkbTxInput* CkbTxInput::New(::google::protobuf::Arena* arena) const {
  CkbTxInput* n = new CkbTxInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CkbTxInput::Clear() {
// @@protoc_insertion_point(message_clear_start:nervosapi.CkbTxInput)
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inputs_.Clear();
  witnesses_.Clear();
  cachedcells_.Clear();
}

bool CkbTxInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nervosapi.CkbTxInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nervosapi.CellInput inputs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_inputs;
        if (input->ExpectTag(18)) goto parse_loop_witnesses;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .nervosapi.Witness witnesses = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_witnesses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_witnesses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_witnesses;
        if (input->ExpectTag(26)) goto parse_loop_cachedCells;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .nervosapi.CachedCell cachedCells = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_cachedCells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cachedcells()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_cachedCells;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_txHash;
        break;
      }

      // optional string txHash = 4;
      case 4: {
        if (tag == 34) {
         parse_txHash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txhash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txhash().data(), this->txhash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nervosapi.CkbTxInput.txHash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nervosapi.CkbTxInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nervosapi.CkbTxInput)
  return false;
#undef DO_
}

void CkbTxInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nervosapi.CkbTxInput)
  // repeated .nervosapi.CellInput inputs = 1;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->inputs(i), output);
  }

  // repeated .nervosapi.Witness witnesses = 2;
  for (unsigned int i = 0, n = this->witnesses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->witnesses(i), output);
  }

  // repeated .nervosapi.CachedCell cachedCells = 3;
  for (unsigned int i = 0, n = this->cachedcells_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cachedcells(i), output);
  }

  // optional string txHash = 4;
  if (this->txhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txhash().data(), this->txhash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.CkbTxInput.txHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->txhash(), output);
  }

  // @@protoc_insertion_point(serialize_end:nervosapi.CkbTxInput)
}

::google::protobuf::uint8* CkbTxInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nervosapi.CkbTxInput)
  // repeated .nervosapi.CellInput inputs = 1;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->inputs(i), false, target);
  }

  // repeated .nervosapi.Witness witnesses = 2;
  for (unsigned int i = 0, n = this->witnesses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->witnesses(i), false, target);
  }

  // repeated .nervosapi.CachedCell cachedCells = 3;
  for (unsigned int i = 0, n = this->cachedcells_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->cachedcells(i), false, target);
  }

  // optional string txHash = 4;
  if (this->txhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txhash().data(), this->txhash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.CkbTxInput.txHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->txhash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nervosapi.CkbTxInput)
  return target;
}

size_t CkbTxInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nervosapi.CkbTxInput)
  size_t total_size = 0;

  // optional string txHash = 4;
  if (this->txhash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txhash());
  }

  // repeated .nervosapi.CellInput inputs = 1;
  {
    unsigned int count = this->inputs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inputs(i));
    }
  }

  // repeated .nervosapi.Witness witnesses = 2;
  {
    unsigned int count = this->witnesses_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->witnesses(i));
    }
  }

  // repeated .nervosapi.CachedCell cachedCells = 3;
  {
    unsigned int count = this->cachedcells_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cachedcells(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CkbTxInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nervosapi.CkbTxInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CkbTxInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CkbTxInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nervosapi.CkbTxInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nervosapi.CkbTxInput)
    UnsafeMergeFrom(*source);
  }
}

void CkbTxInput::MergeFrom(const CkbTxInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nervosapi.CkbTxInput)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CkbTxInput::UnsafeMergeFrom(const CkbTxInput& from) {
  GOOGLE_DCHECK(&from != this);
  inputs_.MergeFrom(from.inputs_);
  witnesses_.MergeFrom(from.witnesses_);
  cachedcells_.MergeFrom(from.cachedcells_);
  if (from.txhash().size() > 0) {

    txhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txhash_);
  }
}

void CkbTxInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nervosapi.CkbTxInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CkbTxInput::CopyFrom(const CkbTxInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nervosapi.CkbTxInput)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CkbTxInput::IsInitialized() const {

  return true;
}

void CkbTxInput::Swap(CkbTxInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CkbTxInput::InternalSwap(CkbTxInput* other) {
  inputs_.UnsafeArenaSwap(&other->inputs_);
  witnesses_.UnsafeArenaSwap(&other->witnesses_);
  cachedcells_.UnsafeArenaSwap(&other->cachedcells_);
  txhash_.Swap(&other->txhash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CkbTxInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CkbTxInput_descriptor_;
  metadata.reflection = CkbTxInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CkbTxInput

// repeated .nervosapi.CellInput inputs = 1;
int CkbTxInput::inputs_size() const {
  return inputs_.size();
}
void CkbTxInput::clear_inputs() {
  inputs_.Clear();
}
const ::nervosapi::CellInput& CkbTxInput::inputs(int index) const {
  // @@protoc_insertion_point(field_get:nervosapi.CkbTxInput.inputs)
  return inputs_.Get(index);
}
::nervosapi::CellInput* CkbTxInput::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:nervosapi.CkbTxInput.inputs)
  return inputs_.Mutable(index);
}
::nervosapi::CellInput* CkbTxInput::add_inputs() {
  // @@protoc_insertion_point(field_add:nervosapi.CkbTxInput.inputs)
  return inputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::nervosapi::CellInput >*
CkbTxInput::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:nervosapi.CkbTxInput.inputs)
  return &inputs_;
}
const ::google::protobuf::RepeatedPtrField< ::nervosapi::CellInput >&
CkbTxInput::inputs() const {
  // @@protoc_insertion_point(field_list:nervosapi.CkbTxInput.inputs)
  return inputs_;
}

// repeated .nervosapi.Witness witnesses = 2;
int CkbTxInput::witnesses_size() const {
  return witnesses_.size();
}
void CkbTxInput::clear_witnesses() {
  witnesses_.Clear();
}
const ::nervosapi::Witness& CkbTxInput::witnesses(int index) const {
  // @@protoc_insertion_point(field_get:nervosapi.CkbTxInput.witnesses)
  return witnesses_.Get(index);
}
::nervosapi::Witness* CkbTxInput::mutable_witnesses(int index) {
  // @@protoc_insertion_point(field_mutable:nervosapi.CkbTxInput.witnesses)
  return witnesses_.Mutable(index);
}
::nervosapi::Witness* CkbTxInput::add_witnesses() {
  // @@protoc_insertion_point(field_add:nervosapi.CkbTxInput.witnesses)
  return witnesses_.Add();
}
::google::protobuf::RepeatedPtrField< ::nervosapi::Witness >*
CkbTxInput::mutable_witnesses() {
  // @@protoc_insertion_point(field_mutable_list:nervosapi.CkbTxInput.witnesses)
  return &witnesses_;
}
const ::google::protobuf::RepeatedPtrField< ::nervosapi::Witness >&
CkbTxInput::witnesses() const {
  // @@protoc_insertion_point(field_list:nervosapi.CkbTxInput.witnesses)
  return witnesses_;
}

// repeated .nervosapi.CachedCell cachedCells = 3;
int CkbTxInput::cachedcells_size() const {
  return cachedcells_.size();
}
void CkbTxInput::clear_cachedcells() {
  cachedcells_.Clear();
}
const ::nervosapi::CachedCell& CkbTxInput::cachedcells(int index) const {
  // @@protoc_insertion_point(field_get:nervosapi.CkbTxInput.cachedCells)
  return cachedcells_.Get(index);
}
::nervosapi::CachedCell* CkbTxInput::mutable_cachedcells(int index) {
  // @@protoc_insertion_point(field_mutable:nervosapi.CkbTxInput.cachedCells)
  return cachedcells_.Mutable(index);
}
::nervosapi::CachedCell* CkbTxInput::add_cachedcells() {
  // @@protoc_insertion_point(field_add:nervosapi.CkbTxInput.cachedCells)
  return cachedcells_.Add();
}
::google::protobuf::RepeatedPtrField< ::nervosapi::CachedCell >*
CkbTxInput::mutable_cachedcells() {
  // @@protoc_insertion_point(field_mutable_list:nervosapi.CkbTxInput.cachedCells)
  return &cachedcells_;
}
const ::google::protobuf::RepeatedPtrField< ::nervosapi::CachedCell >&
CkbTxInput::cachedcells() const {
  // @@protoc_insertion_point(field_list:nervosapi.CkbTxInput.cachedCells)
  return cachedcells_;
}

// optional string txHash = 4;
void CkbTxInput::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CkbTxInput::txhash() const {
  // @@protoc_insertion_point(field_get:nervosapi.CkbTxInput.txHash)
  return txhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CkbTxInput::set_txhash(const ::std::string& value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nervosapi.CkbTxInput.txHash)
}
void CkbTxInput::set_txhash(const char* value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nervosapi.CkbTxInput.txHash)
}
void CkbTxInput::set_txhash(const char* value, size_t size) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nervosapi.CkbTxInput.txHash)
}
::std::string* CkbTxInput::mutable_txhash() {
  
  // @@protoc_insertion_point(field_mutable:nervosapi.CkbTxInput.txHash)
  return txhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CkbTxInput::release_txhash() {
  // @@protoc_insertion_point(field_release:nervosapi.CkbTxInput.txHash)
  
  return txhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CkbTxInput::set_allocated_txhash(::std::string* txhash) {
  if (txhash != NULL) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:nervosapi.CkbTxInput.txHash)
}

inline const CkbTxInput* CkbTxInput::internal_default_instance() {
  return &CkbTxInput_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CkbTxOutput::kTxHashFieldNumber;
const int CkbTxOutput::kWitnessesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CkbTxOutput::CkbTxOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ckb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:nervosapi.CkbTxOutput)
}

void CkbTxOutput::InitAsDefaultInstance() {
}

CkbTxOutput::CkbTxOutput(const CkbTxOutput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nervosapi.CkbTxOutput)
}

void CkbTxOutput::SharedCtor() {
  txhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CkbTxOutput::~CkbTxOutput() {
  // @@protoc_insertion_point(destructor:nervosapi.CkbTxOutput)
  SharedDtor();
}

void CkbTxOutput::SharedDtor() {
  txhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CkbTxOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CkbTxOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CkbTxOutput_descriptor_;
}

const CkbTxOutput& CkbTxOutput::default_instance() {
  protobuf_InitDefaults_ckb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CkbTxOutput> CkbTxOutput_default_instance_;

CkbTxOutput* CkbTxOutput::New(::google::protobuf::Arena* arena) const {
  CkbTxOutput* n = new CkbTxOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CkbTxOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:nervosapi.CkbTxOutput)
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  witnesses_.Clear();
}

bool CkbTxOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nervosapi.CkbTxOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string txHash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txhash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txhash().data(), this->txhash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nervosapi.CkbTxOutput.txHash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_witnesses;
        break;
      }

      // repeated string witnesses = 2;
      case 2: {
        if (tag == 18) {
         parse_witnesses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_witnesses()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->witnesses(this->witnesses_size() - 1).data(),
            this->witnesses(this->witnesses_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nervosapi.CkbTxOutput.witnesses"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_witnesses;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nervosapi.CkbTxOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nervosapi.CkbTxOutput)
  return false;
#undef DO_
}

void CkbTxOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nervosapi.CkbTxOutput)
  // optional string txHash = 1;
  if (this->txhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txhash().data(), this->txhash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.CkbTxOutput.txHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txhash(), output);
  }

  // repeated string witnesses = 2;
  for (int i = 0; i < this->witnesses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->witnesses(i).data(), this->witnesses(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.CkbTxOutput.witnesses");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->witnesses(i), output);
  }

  // @@protoc_insertion_point(serialize_end:nervosapi.CkbTxOutput)
}

::google::protobuf::uint8* CkbTxOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nervosapi.CkbTxOutput)
  // optional string txHash = 1;
  if (this->txhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txhash().data(), this->txhash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.CkbTxOutput.txHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txhash(), target);
  }

  // repeated string witnesses = 2;
  for (int i = 0; i < this->witnesses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->witnesses(i).data(), this->witnesses(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nervosapi.CkbTxOutput.witnesses");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->witnesses(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nervosapi.CkbTxOutput)
  return target;
}

size_t CkbTxOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nervosapi.CkbTxOutput)
  size_t total_size = 0;

  // optional string txHash = 1;
  if (this->txhash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txhash());
  }

  // repeated string witnesses = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->witnesses_size());
  for (int i = 0; i < this->witnesses_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->witnesses(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CkbTxOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nervosapi.CkbTxOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CkbTxOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CkbTxOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nervosapi.CkbTxOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nervosapi.CkbTxOutput)
    UnsafeMergeFrom(*source);
  }
}

void CkbTxOutput::MergeFrom(const CkbTxOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nervosapi.CkbTxOutput)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CkbTxOutput::UnsafeMergeFrom(const CkbTxOutput& from) {
  GOOGLE_DCHECK(&from != this);
  witnesses_.UnsafeMergeFrom(from.witnesses_);
  if (from.txhash().size() > 0) {

    txhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txhash_);
  }
}

void CkbTxOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nervosapi.CkbTxOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CkbTxOutput::CopyFrom(const CkbTxOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nervosapi.CkbTxOutput)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CkbTxOutput::IsInitialized() const {

  return true;
}

void CkbTxOutput::Swap(CkbTxOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CkbTxOutput::InternalSwap(CkbTxOutput* other) {
  txhash_.Swap(&other->txhash_);
  witnesses_.UnsafeArenaSwap(&other->witnesses_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CkbTxOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CkbTxOutput_descriptor_;
  metadata.reflection = CkbTxOutput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CkbTxOutput

// optional string txHash = 1;
void CkbTxOutput::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CkbTxOutput::txhash() const {
  // @@protoc_insertion_point(field_get:nervosapi.CkbTxOutput.txHash)
  return txhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CkbTxOutput::set_txhash(const ::std::string& value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nervosapi.CkbTxOutput.txHash)
}
void CkbTxOutput::set_txhash(const char* value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nervosapi.CkbTxOutput.txHash)
}
void CkbTxOutput::set_txhash(const char* value, size_t size) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nervosapi.CkbTxOutput.txHash)
}
::std::string* CkbTxOutput::mutable_txhash() {
  
  // @@protoc_insertion_point(field_mutable:nervosapi.CkbTxOutput.txHash)
  return txhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CkbTxOutput::release_txhash() {
  // @@protoc_insertion_point(field_release:nervosapi.CkbTxOutput.txHash)
  
  return txhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CkbTxOutput::set_allocated_txhash(::std::string* txhash) {
  if (txhash != NULL) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:nervosapi.CkbTxOutput.txHash)
}

// repeated string witnesses = 2;
int CkbTxOutput::witnesses_size() const {
  return witnesses_.size();
}
void CkbTxOutput::clear_witnesses() {
  witnesses_.Clear();
}
const ::std::string& CkbTxOutput::witnesses(int index) const {
  // @@protoc_insertion_point(field_get:nervosapi.CkbTxOutput.witnesses)
  return witnesses_.Get(index);
}
::std::string* CkbTxOutput::mutable_witnesses(int index) {
  // @@protoc_insertion_point(field_mutable:nervosapi.CkbTxOutput.witnesses)
  return witnesses_.Mutable(index);
}
void CkbTxOutput::set_witnesses(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:nervosapi.CkbTxOutput.witnesses)
  witnesses_.Mutable(index)->assign(value);
}
void CkbTxOutput::set_witnesses(int index, const char* value) {
  witnesses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nervosapi.CkbTxOutput.witnesses)
}
void CkbTxOutput::set_witnesses(int index, const char* value, size_t size) {
  witnesses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nervosapi.CkbTxOutput.witnesses)
}
::std::string* CkbTxOutput::add_witnesses() {
  // @@protoc_insertion_point(field_add_mutable:nervosapi.CkbTxOutput.witnesses)
  return witnesses_.Add();
}
void CkbTxOutput::add_witnesses(const ::std::string& value) {
  witnesses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nervosapi.CkbTxOutput.witnesses)
}
void CkbTxOutput::add_witnesses(const char* value) {
  witnesses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nervosapi.CkbTxOutput.witnesses)
}
void CkbTxOutput::add_witnesses(const char* value, size_t size) {
  witnesses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nervosapi.CkbTxOutput.witnesses)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CkbTxOutput::witnesses() const {
  // @@protoc_insertion_point(field_list:nervosapi.CkbTxOutput.witnesses)
  return witnesses_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CkbTxOutput::mutable_witnesses() {
  // @@protoc_insertion_point(field_mutable_list:nervosapi.CkbTxOutput.witnesses)
  return &witnesses_;
}

inline const CkbTxOutput* CkbTxOutput::internal_default_instance() {
  return &CkbTxOutput_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace nervosapi

// @@protoc_insertion_point(global_scope)
