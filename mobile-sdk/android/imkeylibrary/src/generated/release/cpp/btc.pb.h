// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: btc.proto

#ifndef PROTOBUF_btc_2eproto__INCLUDED
#define PROTOBUF_btc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace btcapi {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_btc_2eproto();
void protobuf_InitDefaults_btc_2eproto();
void protobuf_AssignDesc_btc_2eproto();
void protobuf_ShutdownFile_btc_2eproto();

class BtcAddressReq;
class BtcAddressRes;
class BtcSegwitTxReq;
class BtcSegwitTxRes;
class BtcTxReq;
class BtcTxRes;
class BtcXpubReq;
class BtcXpubRes;
class Utxo;

// ===================================================================

class Utxo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:btcapi.Utxo) */ {
 public:
  Utxo();
  virtual ~Utxo();

  Utxo(const Utxo& from);

  inline Utxo& operator=(const Utxo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Utxo& default_instance();

  static const Utxo* internal_default_instance();

  void Swap(Utxo* other);

  // implements Message ----------------------------------------------

  inline Utxo* New() const { return New(NULL); }

  Utxo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Utxo& from);
  void MergeFrom(const Utxo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Utxo* other);
  void UnsafeMergeFrom(const Utxo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tx_hash = 1;
  void clear_tx_hash();
  static const int kTxHashFieldNumber = 1;
  const ::std::string& tx_hash() const;
  void set_tx_hash(const ::std::string& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const char* value, size_t size);
  ::std::string* mutable_tx_hash();
  ::std::string* release_tx_hash();
  void set_allocated_tx_hash(::std::string* tx_hash);

  // optional int32 vout = 2;
  void clear_vout();
  static const int kVoutFieldNumber = 2;
  ::google::protobuf::int32 vout() const;
  void set_vout(::google::protobuf::int32 value);

  // optional int64 amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // optional string address = 4;
  void clear_address();
  static const int kAddressFieldNumber = 4;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional string script_pubKey = 5;
  void clear_script_pubkey();
  static const int kScriptPubKeyFieldNumber = 5;
  const ::std::string& script_pubkey() const;
  void set_script_pubkey(const ::std::string& value);
  void set_script_pubkey(const char* value);
  void set_script_pubkey(const char* value, size_t size);
  ::std::string* mutable_script_pubkey();
  ::std::string* release_script_pubkey();
  void set_allocated_script_pubkey(::std::string* script_pubkey);

  // optional string derived_path = 6;
  void clear_derived_path();
  static const int kDerivedPathFieldNumber = 6;
  const ::std::string& derived_path() const;
  void set_derived_path(const ::std::string& value);
  void set_derived_path(const char* value);
  void set_derived_path(const char* value, size_t size);
  ::std::string* mutable_derived_path();
  ::std::string* release_derived_path();
  void set_allocated_derived_path(::std::string* derived_path);

  // optional int64 sequence = 7;
  void clear_sequence();
  static const int kSequenceFieldNumber = 7;
  ::google::protobuf::int64 sequence() const;
  void set_sequence(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:btcapi.Utxo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tx_hash_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr script_pubkey_;
  ::google::protobuf::internal::ArenaStringPtr derived_path_;
  ::google::protobuf::int64 amount_;
  ::google::protobuf::int64 sequence_;
  ::google::protobuf::int32 vout_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_btc_2eproto_impl();
  friend void  protobuf_AddDesc_btc_2eproto_impl();
  friend void protobuf_AssignDesc_btc_2eproto();
  friend void protobuf_ShutdownFile_btc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Utxo> Utxo_default_instance_;

// -------------------------------------------------------------------

class BtcTxReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:btcapi.BtcTxReq) */ {
 public:
  BtcTxReq();
  virtual ~BtcTxReq();

  BtcTxReq(const BtcTxReq& from);

  inline BtcTxReq& operator=(const BtcTxReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BtcTxReq& default_instance();

  static const BtcTxReq* internal_default_instance();

  void Swap(BtcTxReq* other);

  // implements Message ----------------------------------------------

  inline BtcTxReq* New() const { return New(NULL); }

  BtcTxReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BtcTxReq& from);
  void MergeFrom(const BtcTxReq& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BtcTxReq* other);
  void UnsafeMergeFrom(const BtcTxReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string to = 1;
  void clear_to();
  static const int kToFieldNumber = 1;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // optional int64 amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // optional int64 fee = 3;
  void clear_fee();
  static const int kFeeFieldNumber = 3;
  ::google::protobuf::int64 fee() const;
  void set_fee(::google::protobuf::int64 value);

  // optional uint32 change_address_index = 4;
  void clear_change_address_index();
  static const int kChangeAddressIndexFieldNumber = 4;
  ::google::protobuf::uint32 change_address_index() const;
  void set_change_address_index(::google::protobuf::uint32 value);

  // repeated .btcapi.Utxo unspents = 5;
  int unspents_size() const;
  void clear_unspents();
  static const int kUnspentsFieldNumber = 5;
  const ::btcapi::Utxo& unspents(int index) const;
  ::btcapi::Utxo* mutable_unspents(int index);
  ::btcapi::Utxo* add_unspents();
  ::google::protobuf::RepeatedPtrField< ::btcapi::Utxo >*
      mutable_unspents();
  const ::google::protobuf::RepeatedPtrField< ::btcapi::Utxo >&
      unspents() const;

  // optional bytes extra_data = 6;
  void clear_extra_data();
  static const int kExtraDataFieldNumber = 6;
  const ::std::string& extra_data() const;
  void set_extra_data(const ::std::string& value);
  void set_extra_data(const char* value);
  void set_extra_data(const void* value, size_t size);
  ::std::string* mutable_extra_data();
  ::std::string* release_extra_data();
  void set_allocated_extra_data(::std::string* extra_data);

  // optional int32 property_id = 7;
  void clear_property_id();
  static const int kPropertyIdFieldNumber = 7;
  ::google::protobuf::int32 property_id() const;
  void set_property_id(::google::protobuf::int32 value);

  // optional string network = 8;
  void clear_network();
  static const int kNetworkFieldNumber = 8;
  const ::std::string& network() const;
  void set_network(const ::std::string& value);
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  ::std::string* mutable_network();
  ::std::string* release_network();
  void set_allocated_network(::std::string* network);

  // optional string path_prefix = 9;
  void clear_path_prefix();
  static const int kPathPrefixFieldNumber = 9;
  const ::std::string& path_prefix() const;
  void set_path_prefix(const ::std::string& value);
  void set_path_prefix(const char* value);
  void set_path_prefix(const char* value, size_t size);
  ::std::string* mutable_path_prefix();
  ::std::string* release_path_prefix();
  void set_allocated_path_prefix(::std::string* path_prefix);

  // @@protoc_insertion_point(class_scope:btcapi.BtcTxReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::btcapi::Utxo > unspents_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr extra_data_;
  ::google::protobuf::internal::ArenaStringPtr network_;
  ::google::protobuf::internal::ArenaStringPtr path_prefix_;
  ::google::protobuf::int64 amount_;
  ::google::protobuf::int64 fee_;
  ::google::protobuf::uint32 change_address_index_;
  ::google::protobuf::int32 property_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_btc_2eproto_impl();
  friend void  protobuf_AddDesc_btc_2eproto_impl();
  friend void protobuf_AssignDesc_btc_2eproto();
  friend void protobuf_ShutdownFile_btc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BtcTxReq> BtcTxReq_default_instance_;

// -------------------------------------------------------------------

class BtcTxRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:btcapi.BtcTxRes) */ {
 public:
  BtcTxRes();
  virtual ~BtcTxRes();

  BtcTxRes(const BtcTxRes& from);

  inline BtcTxRes& operator=(const BtcTxRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BtcTxRes& default_instance();

  static const BtcTxRes* internal_default_instance();

  void Swap(BtcTxRes* other);

  // implements Message ----------------------------------------------

  inline BtcTxRes* New() const { return New(NULL); }

  BtcTxRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BtcTxRes& from);
  void MergeFrom(const BtcTxRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BtcTxRes* other);
  void UnsafeMergeFrom(const BtcTxRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tx_data = 1;
  void clear_tx_data();
  static const int kTxDataFieldNumber = 1;
  const ::std::string& tx_data() const;
  void set_tx_data(const ::std::string& value);
  void set_tx_data(const char* value);
  void set_tx_data(const char* value, size_t size);
  ::std::string* mutable_tx_data();
  ::std::string* release_tx_data();
  void set_allocated_tx_data(::std::string* tx_data);

  // optional string tx_hash = 2;
  void clear_tx_hash();
  static const int kTxHashFieldNumber = 2;
  const ::std::string& tx_hash() const;
  void set_tx_hash(const ::std::string& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const char* value, size_t size);
  ::std::string* mutable_tx_hash();
  ::std::string* release_tx_hash();
  void set_allocated_tx_hash(::std::string* tx_hash);

  // @@protoc_insertion_point(class_scope:btcapi.BtcTxRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tx_data_;
  ::google::protobuf::internal::ArenaStringPtr tx_hash_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_btc_2eproto_impl();
  friend void  protobuf_AddDesc_btc_2eproto_impl();
  friend void protobuf_AssignDesc_btc_2eproto();
  friend void protobuf_ShutdownFile_btc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BtcTxRes> BtcTxRes_default_instance_;

// -------------------------------------------------------------------

class BtcSegwitTxReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:btcapi.BtcSegwitTxReq) */ {
 public:
  BtcSegwitTxReq();
  virtual ~BtcSegwitTxReq();

  BtcSegwitTxReq(const BtcSegwitTxReq& from);

  inline BtcSegwitTxReq& operator=(const BtcSegwitTxReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BtcSegwitTxReq& default_instance();

  static const BtcSegwitTxReq* internal_default_instance();

  void Swap(BtcSegwitTxReq* other);

  // implements Message ----------------------------------------------

  inline BtcSegwitTxReq* New() const { return New(NULL); }

  BtcSegwitTxReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BtcSegwitTxReq& from);
  void MergeFrom(const BtcSegwitTxReq& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BtcSegwitTxReq* other);
  void UnsafeMergeFrom(const BtcSegwitTxReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string to = 1;
  void clear_to();
  static const int kToFieldNumber = 1;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // optional int64 amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // optional int64 fee = 3;
  void clear_fee();
  static const int kFeeFieldNumber = 3;
  ::google::protobuf::int64 fee() const;
  void set_fee(::google::protobuf::int64 value);

  // optional uint32 change_address_index = 4;
  void clear_change_address_index();
  static const int kChangeAddressIndexFieldNumber = 4;
  ::google::protobuf::uint32 change_address_index() const;
  void set_change_address_index(::google::protobuf::uint32 value);

  // repeated .btcapi.Utxo unspents = 5;
  int unspents_size() const;
  void clear_unspents();
  static const int kUnspentsFieldNumber = 5;
  const ::btcapi::Utxo& unspents(int index) const;
  ::btcapi::Utxo* mutable_unspents(int index);
  ::btcapi::Utxo* add_unspents();
  ::google::protobuf::RepeatedPtrField< ::btcapi::Utxo >*
      mutable_unspents();
  const ::google::protobuf::RepeatedPtrField< ::btcapi::Utxo >&
      unspents() const;

  // optional bytes extra_data = 6;
  void clear_extra_data();
  static const int kExtraDataFieldNumber = 6;
  const ::std::string& extra_data() const;
  void set_extra_data(const ::std::string& value);
  void set_extra_data(const char* value);
  void set_extra_data(const void* value, size_t size);
  ::std::string* mutable_extra_data();
  ::std::string* release_extra_data();
  void set_allocated_extra_data(::std::string* extra_data);

  // optional int32 property_id = 7;
  void clear_property_id();
  static const int kPropertyIdFieldNumber = 7;
  ::google::protobuf::int32 property_id() const;
  void set_property_id(::google::protobuf::int32 value);

  // optional string network = 8;
  void clear_network();
  static const int kNetworkFieldNumber = 8;
  const ::std::string& network() const;
  void set_network(const ::std::string& value);
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  ::std::string* mutable_network();
  ::std::string* release_network();
  void set_allocated_network(::std::string* network);

  // optional string path_prefix = 9;
  void clear_path_prefix();
  static const int kPathPrefixFieldNumber = 9;
  const ::std::string& path_prefix() const;
  void set_path_prefix(const ::std::string& value);
  void set_path_prefix(const char* value);
  void set_path_prefix(const char* value, size_t size);
  ::std::string* mutable_path_prefix();
  ::std::string* release_path_prefix();
  void set_allocated_path_prefix(::std::string* path_prefix);

  // @@protoc_insertion_point(class_scope:btcapi.BtcSegwitTxReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::btcapi::Utxo > unspents_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr extra_data_;
  ::google::protobuf::internal::ArenaStringPtr network_;
  ::google::protobuf::internal::ArenaStringPtr path_prefix_;
  ::google::protobuf::int64 amount_;
  ::google::protobuf::int64 fee_;
  ::google::protobuf::uint32 change_address_index_;
  ::google::protobuf::int32 property_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_btc_2eproto_impl();
  friend void  protobuf_AddDesc_btc_2eproto_impl();
  friend void protobuf_AssignDesc_btc_2eproto();
  friend void protobuf_ShutdownFile_btc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BtcSegwitTxReq> BtcSegwitTxReq_default_instance_;

// -------------------------------------------------------------------

class BtcSegwitTxRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:btcapi.BtcSegwitTxRes) */ {
 public:
  BtcSegwitTxRes();
  virtual ~BtcSegwitTxRes();

  BtcSegwitTxRes(const BtcSegwitTxRes& from);

  inline BtcSegwitTxRes& operator=(const BtcSegwitTxRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BtcSegwitTxRes& default_instance();

  static const BtcSegwitTxRes* internal_default_instance();

  void Swap(BtcSegwitTxRes* other);

  // implements Message ----------------------------------------------

  inline BtcSegwitTxRes* New() const { return New(NULL); }

  BtcSegwitTxRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BtcSegwitTxRes& from);
  void MergeFrom(const BtcSegwitTxRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BtcSegwitTxRes* other);
  void UnsafeMergeFrom(const BtcSegwitTxRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string witness_tx_data = 1;
  void clear_witness_tx_data();
  static const int kWitnessTxDataFieldNumber = 1;
  const ::std::string& witness_tx_data() const;
  void set_witness_tx_data(const ::std::string& value);
  void set_witness_tx_data(const char* value);
  void set_witness_tx_data(const char* value, size_t size);
  ::std::string* mutable_witness_tx_data();
  ::std::string* release_witness_tx_data();
  void set_allocated_witness_tx_data(::std::string* witness_tx_data);

  // optional string wtx_hash = 2;
  void clear_wtx_hash();
  static const int kWtxHashFieldNumber = 2;
  const ::std::string& wtx_hash() const;
  void set_wtx_hash(const ::std::string& value);
  void set_wtx_hash(const char* value);
  void set_wtx_hash(const char* value, size_t size);
  ::std::string* mutable_wtx_hash();
  ::std::string* release_wtx_hash();
  void set_allocated_wtx_hash(::std::string* wtx_hash);

  // optional string tx_hash = 3;
  void clear_tx_hash();
  static const int kTxHashFieldNumber = 3;
  const ::std::string& tx_hash() const;
  void set_tx_hash(const ::std::string& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const char* value, size_t size);
  ::std::string* mutable_tx_hash();
  ::std::string* release_tx_hash();
  void set_allocated_tx_hash(::std::string* tx_hash);

  // @@protoc_insertion_point(class_scope:btcapi.BtcSegwitTxRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr witness_tx_data_;
  ::google::protobuf::internal::ArenaStringPtr wtx_hash_;
  ::google::protobuf::internal::ArenaStringPtr tx_hash_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_btc_2eproto_impl();
  friend void  protobuf_AddDesc_btc_2eproto_impl();
  friend void protobuf_AssignDesc_btc_2eproto();
  friend void protobuf_ShutdownFile_btc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BtcSegwitTxRes> BtcSegwitTxRes_default_instance_;

// -------------------------------------------------------------------

class BtcXpubReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:btcapi.BtcXpubReq) */ {
 public:
  BtcXpubReq();
  virtual ~BtcXpubReq();

  BtcXpubReq(const BtcXpubReq& from);

  inline BtcXpubReq& operator=(const BtcXpubReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BtcXpubReq& default_instance();

  static const BtcXpubReq* internal_default_instance();

  void Swap(BtcXpubReq* other);

  // implements Message ----------------------------------------------

  inline BtcXpubReq* New() const { return New(NULL); }

  BtcXpubReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BtcXpubReq& from);
  void MergeFrom(const BtcXpubReq& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BtcXpubReq* other);
  void UnsafeMergeFrom(const BtcXpubReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string network = 1;
  void clear_network();
  static const int kNetworkFieldNumber = 1;
  const ::std::string& network() const;
  void set_network(const ::std::string& value);
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  ::std::string* mutable_network();
  ::std::string* release_network();
  void set_allocated_network(::std::string* network);

  // optional string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:btcapi.BtcXpubReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr network_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_btc_2eproto_impl();
  friend void  protobuf_AddDesc_btc_2eproto_impl();
  friend void protobuf_AssignDesc_btc_2eproto();
  friend void protobuf_ShutdownFile_btc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BtcXpubReq> BtcXpubReq_default_instance_;

// -------------------------------------------------------------------

class BtcXpubRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:btcapi.BtcXpubRes) */ {
 public:
  BtcXpubRes();
  virtual ~BtcXpubRes();

  BtcXpubRes(const BtcXpubRes& from);

  inline BtcXpubRes& operator=(const BtcXpubRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BtcXpubRes& default_instance();

  static const BtcXpubRes* internal_default_instance();

  void Swap(BtcXpubRes* other);

  // implements Message ----------------------------------------------

  inline BtcXpubRes* New() const { return New(NULL); }

  BtcXpubRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BtcXpubRes& from);
  void MergeFrom(const BtcXpubRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BtcXpubRes* other);
  void UnsafeMergeFrom(const BtcXpubRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string xpub = 1;
  void clear_xpub();
  static const int kXpubFieldNumber = 1;
  const ::std::string& xpub() const;
  void set_xpub(const ::std::string& value);
  void set_xpub(const char* value);
  void set_xpub(const char* value, size_t size);
  ::std::string* mutable_xpub();
  ::std::string* release_xpub();
  void set_allocated_xpub(::std::string* xpub);

  // @@protoc_insertion_point(class_scope:btcapi.BtcXpubRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr xpub_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_btc_2eproto_impl();
  friend void  protobuf_AddDesc_btc_2eproto_impl();
  friend void protobuf_AssignDesc_btc_2eproto();
  friend void protobuf_ShutdownFile_btc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BtcXpubRes> BtcXpubRes_default_instance_;

// -------------------------------------------------------------------

class BtcAddressReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:btcapi.BtcAddressReq) */ {
 public:
  BtcAddressReq();
  virtual ~BtcAddressReq();

  BtcAddressReq(const BtcAddressReq& from);

  inline BtcAddressReq& operator=(const BtcAddressReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BtcAddressReq& default_instance();

  static const BtcAddressReq* internal_default_instance();

  void Swap(BtcAddressReq* other);

  // implements Message ----------------------------------------------

  inline BtcAddressReq* New() const { return New(NULL); }

  BtcAddressReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BtcAddressReq& from);
  void MergeFrom(const BtcAddressReq& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BtcAddressReq* other);
  void UnsafeMergeFrom(const BtcAddressReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string network = 1;
  void clear_network();
  static const int kNetworkFieldNumber = 1;
  const ::std::string& network() const;
  void set_network(const ::std::string& value);
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  ::std::string* mutable_network();
  ::std::string* release_network();
  void set_allocated_network(::std::string* network);

  // optional string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:btcapi.BtcAddressReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr network_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_btc_2eproto_impl();
  friend void  protobuf_AddDesc_btc_2eproto_impl();
  friend void protobuf_AssignDesc_btc_2eproto();
  friend void protobuf_ShutdownFile_btc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BtcAddressReq> BtcAddressReq_default_instance_;

// -------------------------------------------------------------------

class BtcAddressRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:btcapi.BtcAddressRes) */ {
 public:
  BtcAddressRes();
  virtual ~BtcAddressRes();

  BtcAddressRes(const BtcAddressRes& from);

  inline BtcAddressRes& operator=(const BtcAddressRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BtcAddressRes& default_instance();

  static const BtcAddressRes* internal_default_instance();

  void Swap(BtcAddressRes* other);

  // implements Message ----------------------------------------------

  inline BtcAddressRes* New() const { return New(NULL); }

  BtcAddressRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BtcAddressRes& from);
  void MergeFrom(const BtcAddressRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BtcAddressRes* other);
  void UnsafeMergeFrom(const BtcAddressRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:btcapi.BtcAddressRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_btc_2eproto_impl();
  friend void  protobuf_AddDesc_btc_2eproto_impl();
  friend void protobuf_AssignDesc_btc_2eproto();
  friend void protobuf_ShutdownFile_btc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BtcAddressRes> BtcAddressRes_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Utxo

// optional string tx_hash = 1;
inline void Utxo::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Utxo::tx_hash() const {
  // @@protoc_insertion_point(field_get:btcapi.Utxo.tx_hash)
  return tx_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_tx_hash(const ::std::string& value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.Utxo.tx_hash)
}
inline void Utxo::set_tx_hash(const char* value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.Utxo.tx_hash)
}
inline void Utxo::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.Utxo.tx_hash)
}
inline ::std::string* Utxo::mutable_tx_hash() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.Utxo.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Utxo::release_tx_hash() {
  // @@protoc_insertion_point(field_release:btcapi.Utxo.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:btcapi.Utxo.tx_hash)
}

// optional int32 vout = 2;
inline void Utxo::clear_vout() {
  vout_ = 0;
}
inline ::google::protobuf::int32 Utxo::vout() const {
  // @@protoc_insertion_point(field_get:btcapi.Utxo.vout)
  return vout_;
}
inline void Utxo::set_vout(::google::protobuf::int32 value) {
  
  vout_ = value;
  // @@protoc_insertion_point(field_set:btcapi.Utxo.vout)
}

// optional int64 amount = 3;
inline void Utxo::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Utxo::amount() const {
  // @@protoc_insertion_point(field_get:btcapi.Utxo.amount)
  return amount_;
}
inline void Utxo::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:btcapi.Utxo.amount)
}

// optional string address = 4;
inline void Utxo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Utxo::address() const {
  // @@protoc_insertion_point(field_get:btcapi.Utxo.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.Utxo.address)
}
inline void Utxo::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.Utxo.address)
}
inline void Utxo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.Utxo.address)
}
inline ::std::string* Utxo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.Utxo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Utxo::release_address() {
  // @@protoc_insertion_point(field_release:btcapi.Utxo.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:btcapi.Utxo.address)
}

// optional string script_pubKey = 5;
inline void Utxo::clear_script_pubkey() {
  script_pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Utxo::script_pubkey() const {
  // @@protoc_insertion_point(field_get:btcapi.Utxo.script_pubKey)
  return script_pubkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_script_pubkey(const ::std::string& value) {
  
  script_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.Utxo.script_pubKey)
}
inline void Utxo::set_script_pubkey(const char* value) {
  
  script_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.Utxo.script_pubKey)
}
inline void Utxo::set_script_pubkey(const char* value, size_t size) {
  
  script_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.Utxo.script_pubKey)
}
inline ::std::string* Utxo::mutable_script_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.Utxo.script_pubKey)
  return script_pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Utxo::release_script_pubkey() {
  // @@protoc_insertion_point(field_release:btcapi.Utxo.script_pubKey)
  
  return script_pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_allocated_script_pubkey(::std::string* script_pubkey) {
  if (script_pubkey != NULL) {
    
  } else {
    
  }
  script_pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script_pubkey);
  // @@protoc_insertion_point(field_set_allocated:btcapi.Utxo.script_pubKey)
}

// optional string derived_path = 6;
inline void Utxo::clear_derived_path() {
  derived_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Utxo::derived_path() const {
  // @@protoc_insertion_point(field_get:btcapi.Utxo.derived_path)
  return derived_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_derived_path(const ::std::string& value) {
  
  derived_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.Utxo.derived_path)
}
inline void Utxo::set_derived_path(const char* value) {
  
  derived_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.Utxo.derived_path)
}
inline void Utxo::set_derived_path(const char* value, size_t size) {
  
  derived_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.Utxo.derived_path)
}
inline ::std::string* Utxo::mutable_derived_path() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.Utxo.derived_path)
  return derived_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Utxo::release_derived_path() {
  // @@protoc_insertion_point(field_release:btcapi.Utxo.derived_path)
  
  return derived_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_allocated_derived_path(::std::string* derived_path) {
  if (derived_path != NULL) {
    
  } else {
    
  }
  derived_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), derived_path);
  // @@protoc_insertion_point(field_set_allocated:btcapi.Utxo.derived_path)
}

// optional int64 sequence = 7;
inline void Utxo::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Utxo::sequence() const {
  // @@protoc_insertion_point(field_get:btcapi.Utxo.sequence)
  return sequence_;
}
inline void Utxo::set_sequence(::google::protobuf::int64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:btcapi.Utxo.sequence)
}

inline const Utxo* Utxo::internal_default_instance() {
  return &Utxo_default_instance_.get();
}
// -------------------------------------------------------------------

// BtcTxReq

// optional string to = 1;
inline void BtcTxReq::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcTxReq::to() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcTxReq::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcTxReq.to)
}
inline void BtcTxReq::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcTxReq.to)
}
inline void BtcTxReq::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcTxReq.to)
}
inline ::std::string* BtcTxReq::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcTxReq.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcTxReq::release_to() {
  // @@protoc_insertion_point(field_release:btcapi.BtcTxReq.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcTxReq::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcTxReq.to)
}

// optional int64 amount = 2;
inline void BtcTxReq::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BtcTxReq::amount() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.amount)
  return amount_;
}
inline void BtcTxReq::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:btcapi.BtcTxReq.amount)
}

// optional int64 fee = 3;
inline void BtcTxReq::clear_fee() {
  fee_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BtcTxReq::fee() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.fee)
  return fee_;
}
inline void BtcTxReq::set_fee(::google::protobuf::int64 value) {
  
  fee_ = value;
  // @@protoc_insertion_point(field_set:btcapi.BtcTxReq.fee)
}

// optional uint32 change_address_index = 4;
inline void BtcTxReq::clear_change_address_index() {
  change_address_index_ = 0u;
}
inline ::google::protobuf::uint32 BtcTxReq::change_address_index() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.change_address_index)
  return change_address_index_;
}
inline void BtcTxReq::set_change_address_index(::google::protobuf::uint32 value) {
  
  change_address_index_ = value;
  // @@protoc_insertion_point(field_set:btcapi.BtcTxReq.change_address_index)
}

// repeated .btcapi.Utxo unspents = 5;
inline int BtcTxReq::unspents_size() const {
  return unspents_.size();
}
inline void BtcTxReq::clear_unspents() {
  unspents_.Clear();
}
inline const ::btcapi::Utxo& BtcTxReq::unspents(int index) const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.unspents)
  return unspents_.Get(index);
}
inline ::btcapi::Utxo* BtcTxReq::mutable_unspents(int index) {
  // @@protoc_insertion_point(field_mutable:btcapi.BtcTxReq.unspents)
  return unspents_.Mutable(index);
}
inline ::btcapi::Utxo* BtcTxReq::add_unspents() {
  // @@protoc_insertion_point(field_add:btcapi.BtcTxReq.unspents)
  return unspents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::btcapi::Utxo >*
BtcTxReq::mutable_unspents() {
  // @@protoc_insertion_point(field_mutable_list:btcapi.BtcTxReq.unspents)
  return &unspents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::btcapi::Utxo >&
BtcTxReq::unspents() const {
  // @@protoc_insertion_point(field_list:btcapi.BtcTxReq.unspents)
  return unspents_;
}

// optional bytes extra_data = 6;
inline void BtcTxReq::clear_extra_data() {
  extra_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcTxReq::extra_data() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.extra_data)
  return extra_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcTxReq::set_extra_data(const ::std::string& value) {
  
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcTxReq.extra_data)
}
inline void BtcTxReq::set_extra_data(const char* value) {
  
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcTxReq.extra_data)
}
inline void BtcTxReq::set_extra_data(const void* value, size_t size) {
  
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcTxReq.extra_data)
}
inline ::std::string* BtcTxReq::mutable_extra_data() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcTxReq.extra_data)
  return extra_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcTxReq::release_extra_data() {
  // @@protoc_insertion_point(field_release:btcapi.BtcTxReq.extra_data)
  
  return extra_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcTxReq::set_allocated_extra_data(::std::string* extra_data) {
  if (extra_data != NULL) {
    
  } else {
    
  }
  extra_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra_data);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcTxReq.extra_data)
}

// optional int32 property_id = 7;
inline void BtcTxReq::clear_property_id() {
  property_id_ = 0;
}
inline ::google::protobuf::int32 BtcTxReq::property_id() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.property_id)
  return property_id_;
}
inline void BtcTxReq::set_property_id(::google::protobuf::int32 value) {
  
  property_id_ = value;
  // @@protoc_insertion_point(field_set:btcapi.BtcTxReq.property_id)
}

// optional string network = 8;
inline void BtcTxReq::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcTxReq::network() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.network)
  return network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcTxReq::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcTxReq.network)
}
inline void BtcTxReq::set_network(const char* value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcTxReq.network)
}
inline void BtcTxReq::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcTxReq.network)
}
inline ::std::string* BtcTxReq::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcTxReq.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcTxReq::release_network() {
  // @@protoc_insertion_point(field_release:btcapi.BtcTxReq.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcTxReq::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcTxReq.network)
}

// optional string path_prefix = 9;
inline void BtcTxReq::clear_path_prefix() {
  path_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcTxReq::path_prefix() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.path_prefix)
  return path_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcTxReq::set_path_prefix(const ::std::string& value) {
  
  path_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcTxReq.path_prefix)
}
inline void BtcTxReq::set_path_prefix(const char* value) {
  
  path_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcTxReq.path_prefix)
}
inline void BtcTxReq::set_path_prefix(const char* value, size_t size) {
  
  path_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcTxReq.path_prefix)
}
inline ::std::string* BtcTxReq::mutable_path_prefix() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcTxReq.path_prefix)
  return path_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcTxReq::release_path_prefix() {
  // @@protoc_insertion_point(field_release:btcapi.BtcTxReq.path_prefix)
  
  return path_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcTxReq::set_allocated_path_prefix(::std::string* path_prefix) {
  if (path_prefix != NULL) {
    
  } else {
    
  }
  path_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path_prefix);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcTxReq.path_prefix)
}

inline const BtcTxReq* BtcTxReq::internal_default_instance() {
  return &BtcTxReq_default_instance_.get();
}
// -------------------------------------------------------------------

// BtcTxRes

// optional string tx_data = 1;
inline void BtcTxRes::clear_tx_data() {
  tx_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcTxRes::tx_data() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxRes.tx_data)
  return tx_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcTxRes::set_tx_data(const ::std::string& value) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcTxRes.tx_data)
}
inline void BtcTxRes::set_tx_data(const char* value) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcTxRes.tx_data)
}
inline void BtcTxRes::set_tx_data(const char* value, size_t size) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcTxRes.tx_data)
}
inline ::std::string* BtcTxRes::mutable_tx_data() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcTxRes.tx_data)
  return tx_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcTxRes::release_tx_data() {
  // @@protoc_insertion_point(field_release:btcapi.BtcTxRes.tx_data)
  
  return tx_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcTxRes::set_allocated_tx_data(::std::string* tx_data) {
  if (tx_data != NULL) {
    
  } else {
    
  }
  tx_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_data);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcTxRes.tx_data)
}

// optional string tx_hash = 2;
inline void BtcTxRes::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcTxRes::tx_hash() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxRes.tx_hash)
  return tx_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcTxRes::set_tx_hash(const ::std::string& value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcTxRes.tx_hash)
}
inline void BtcTxRes::set_tx_hash(const char* value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcTxRes.tx_hash)
}
inline void BtcTxRes::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcTxRes.tx_hash)
}
inline ::std::string* BtcTxRes::mutable_tx_hash() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcTxRes.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcTxRes::release_tx_hash() {
  // @@protoc_insertion_point(field_release:btcapi.BtcTxRes.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcTxRes::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcTxRes.tx_hash)
}

inline const BtcTxRes* BtcTxRes::internal_default_instance() {
  return &BtcTxRes_default_instance_.get();
}
// -------------------------------------------------------------------

// BtcSegwitTxReq

// optional string to = 1;
inline void BtcSegwitTxReq::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcSegwitTxReq::to() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcSegwitTxReq::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxReq.to)
}
inline void BtcSegwitTxReq::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcSegwitTxReq.to)
}
inline void BtcSegwitTxReq::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcSegwitTxReq.to)
}
inline ::std::string* BtcSegwitTxReq::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcSegwitTxReq.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcSegwitTxReq::release_to() {
  // @@protoc_insertion_point(field_release:btcapi.BtcSegwitTxReq.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcSegwitTxReq::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcSegwitTxReq.to)
}

// optional int64 amount = 2;
inline void BtcSegwitTxReq::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BtcSegwitTxReq::amount() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.amount)
  return amount_;
}
inline void BtcSegwitTxReq::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxReq.amount)
}

// optional int64 fee = 3;
inline void BtcSegwitTxReq::clear_fee() {
  fee_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BtcSegwitTxReq::fee() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.fee)
  return fee_;
}
inline void BtcSegwitTxReq::set_fee(::google::protobuf::int64 value) {
  
  fee_ = value;
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxReq.fee)
}

// optional uint32 change_address_index = 4;
inline void BtcSegwitTxReq::clear_change_address_index() {
  change_address_index_ = 0u;
}
inline ::google::protobuf::uint32 BtcSegwitTxReq::change_address_index() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.change_address_index)
  return change_address_index_;
}
inline void BtcSegwitTxReq::set_change_address_index(::google::protobuf::uint32 value) {
  
  change_address_index_ = value;
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxReq.change_address_index)
}

// repeated .btcapi.Utxo unspents = 5;
inline int BtcSegwitTxReq::unspents_size() const {
  return unspents_.size();
}
inline void BtcSegwitTxReq::clear_unspents() {
  unspents_.Clear();
}
inline const ::btcapi::Utxo& BtcSegwitTxReq::unspents(int index) const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.unspents)
  return unspents_.Get(index);
}
inline ::btcapi::Utxo* BtcSegwitTxReq::mutable_unspents(int index) {
  // @@protoc_insertion_point(field_mutable:btcapi.BtcSegwitTxReq.unspents)
  return unspents_.Mutable(index);
}
inline ::btcapi::Utxo* BtcSegwitTxReq::add_unspents() {
  // @@protoc_insertion_point(field_add:btcapi.BtcSegwitTxReq.unspents)
  return unspents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::btcapi::Utxo >*
BtcSegwitTxReq::mutable_unspents() {
  // @@protoc_insertion_point(field_mutable_list:btcapi.BtcSegwitTxReq.unspents)
  return &unspents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::btcapi::Utxo >&
BtcSegwitTxReq::unspents() const {
  // @@protoc_insertion_point(field_list:btcapi.BtcSegwitTxReq.unspents)
  return unspents_;
}

// optional bytes extra_data = 6;
inline void BtcSegwitTxReq::clear_extra_data() {
  extra_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcSegwitTxReq::extra_data() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.extra_data)
  return extra_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcSegwitTxReq::set_extra_data(const ::std::string& value) {
  
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxReq.extra_data)
}
inline void BtcSegwitTxReq::set_extra_data(const char* value) {
  
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcSegwitTxReq.extra_data)
}
inline void BtcSegwitTxReq::set_extra_data(const void* value, size_t size) {
  
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcSegwitTxReq.extra_data)
}
inline ::std::string* BtcSegwitTxReq::mutable_extra_data() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcSegwitTxReq.extra_data)
  return extra_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcSegwitTxReq::release_extra_data() {
  // @@protoc_insertion_point(field_release:btcapi.BtcSegwitTxReq.extra_data)
  
  return extra_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcSegwitTxReq::set_allocated_extra_data(::std::string* extra_data) {
  if (extra_data != NULL) {
    
  } else {
    
  }
  extra_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra_data);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcSegwitTxReq.extra_data)
}

// optional int32 property_id = 7;
inline void BtcSegwitTxReq::clear_property_id() {
  property_id_ = 0;
}
inline ::google::protobuf::int32 BtcSegwitTxReq::property_id() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.property_id)
  return property_id_;
}
inline void BtcSegwitTxReq::set_property_id(::google::protobuf::int32 value) {
  
  property_id_ = value;
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxReq.property_id)
}

// optional string network = 8;
inline void BtcSegwitTxReq::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcSegwitTxReq::network() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.network)
  return network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcSegwitTxReq::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxReq.network)
}
inline void BtcSegwitTxReq::set_network(const char* value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcSegwitTxReq.network)
}
inline void BtcSegwitTxReq::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcSegwitTxReq.network)
}
inline ::std::string* BtcSegwitTxReq::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcSegwitTxReq.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcSegwitTxReq::release_network() {
  // @@protoc_insertion_point(field_release:btcapi.BtcSegwitTxReq.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcSegwitTxReq::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcSegwitTxReq.network)
}

// optional string path_prefix = 9;
inline void BtcSegwitTxReq::clear_path_prefix() {
  path_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcSegwitTxReq::path_prefix() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.path_prefix)
  return path_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcSegwitTxReq::set_path_prefix(const ::std::string& value) {
  
  path_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxReq.path_prefix)
}
inline void BtcSegwitTxReq::set_path_prefix(const char* value) {
  
  path_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcSegwitTxReq.path_prefix)
}
inline void BtcSegwitTxReq::set_path_prefix(const char* value, size_t size) {
  
  path_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcSegwitTxReq.path_prefix)
}
inline ::std::string* BtcSegwitTxReq::mutable_path_prefix() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcSegwitTxReq.path_prefix)
  return path_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcSegwitTxReq::release_path_prefix() {
  // @@protoc_insertion_point(field_release:btcapi.BtcSegwitTxReq.path_prefix)
  
  return path_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcSegwitTxReq::set_allocated_path_prefix(::std::string* path_prefix) {
  if (path_prefix != NULL) {
    
  } else {
    
  }
  path_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path_prefix);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcSegwitTxReq.path_prefix)
}

inline const BtcSegwitTxReq* BtcSegwitTxReq::internal_default_instance() {
  return &BtcSegwitTxReq_default_instance_.get();
}
// -------------------------------------------------------------------

// BtcSegwitTxRes

// optional string witness_tx_data = 1;
inline void BtcSegwitTxRes::clear_witness_tx_data() {
  witness_tx_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcSegwitTxRes::witness_tx_data() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxRes.witness_tx_data)
  return witness_tx_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcSegwitTxRes::set_witness_tx_data(const ::std::string& value) {
  
  witness_tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxRes.witness_tx_data)
}
inline void BtcSegwitTxRes::set_witness_tx_data(const char* value) {
  
  witness_tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcSegwitTxRes.witness_tx_data)
}
inline void BtcSegwitTxRes::set_witness_tx_data(const char* value, size_t size) {
  
  witness_tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcSegwitTxRes.witness_tx_data)
}
inline ::std::string* BtcSegwitTxRes::mutable_witness_tx_data() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcSegwitTxRes.witness_tx_data)
  return witness_tx_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcSegwitTxRes::release_witness_tx_data() {
  // @@protoc_insertion_point(field_release:btcapi.BtcSegwitTxRes.witness_tx_data)
  
  return witness_tx_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcSegwitTxRes::set_allocated_witness_tx_data(::std::string* witness_tx_data) {
  if (witness_tx_data != NULL) {
    
  } else {
    
  }
  witness_tx_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), witness_tx_data);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcSegwitTxRes.witness_tx_data)
}

// optional string wtx_hash = 2;
inline void BtcSegwitTxRes::clear_wtx_hash() {
  wtx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcSegwitTxRes::wtx_hash() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxRes.wtx_hash)
  return wtx_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcSegwitTxRes::set_wtx_hash(const ::std::string& value) {
  
  wtx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxRes.wtx_hash)
}
inline void BtcSegwitTxRes::set_wtx_hash(const char* value) {
  
  wtx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcSegwitTxRes.wtx_hash)
}
inline void BtcSegwitTxRes::set_wtx_hash(const char* value, size_t size) {
  
  wtx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcSegwitTxRes.wtx_hash)
}
inline ::std::string* BtcSegwitTxRes::mutable_wtx_hash() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcSegwitTxRes.wtx_hash)
  return wtx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcSegwitTxRes::release_wtx_hash() {
  // @@protoc_insertion_point(field_release:btcapi.BtcSegwitTxRes.wtx_hash)
  
  return wtx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcSegwitTxRes::set_allocated_wtx_hash(::std::string* wtx_hash) {
  if (wtx_hash != NULL) {
    
  } else {
    
  }
  wtx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wtx_hash);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcSegwitTxRes.wtx_hash)
}

// optional string tx_hash = 3;
inline void BtcSegwitTxRes::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcSegwitTxRes::tx_hash() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxRes.tx_hash)
  return tx_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcSegwitTxRes::set_tx_hash(const ::std::string& value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxRes.tx_hash)
}
inline void BtcSegwitTxRes::set_tx_hash(const char* value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcSegwitTxRes.tx_hash)
}
inline void BtcSegwitTxRes::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcSegwitTxRes.tx_hash)
}
inline ::std::string* BtcSegwitTxRes::mutable_tx_hash() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcSegwitTxRes.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcSegwitTxRes::release_tx_hash() {
  // @@protoc_insertion_point(field_release:btcapi.BtcSegwitTxRes.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcSegwitTxRes::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcSegwitTxRes.tx_hash)
}

inline const BtcSegwitTxRes* BtcSegwitTxRes::internal_default_instance() {
  return &BtcSegwitTxRes_default_instance_.get();
}
// -------------------------------------------------------------------

// BtcXpubReq

// optional string network = 1;
inline void BtcXpubReq::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcXpubReq::network() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcXpubReq.network)
  return network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcXpubReq::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcXpubReq.network)
}
inline void BtcXpubReq::set_network(const char* value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcXpubReq.network)
}
inline void BtcXpubReq::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcXpubReq.network)
}
inline ::std::string* BtcXpubReq::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcXpubReq.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcXpubReq::release_network() {
  // @@protoc_insertion_point(field_release:btcapi.BtcXpubReq.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcXpubReq::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcXpubReq.network)
}

// optional string path = 2;
inline void BtcXpubReq::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcXpubReq::path() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcXpubReq.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcXpubReq::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcXpubReq.path)
}
inline void BtcXpubReq::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcXpubReq.path)
}
inline void BtcXpubReq::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcXpubReq.path)
}
inline ::std::string* BtcXpubReq::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcXpubReq.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcXpubReq::release_path() {
  // @@protoc_insertion_point(field_release:btcapi.BtcXpubReq.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcXpubReq::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcXpubReq.path)
}

inline const BtcXpubReq* BtcXpubReq::internal_default_instance() {
  return &BtcXpubReq_default_instance_.get();
}
// -------------------------------------------------------------------

// BtcXpubRes

// optional string xpub = 1;
inline void BtcXpubRes::clear_xpub() {
  xpub_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcXpubRes::xpub() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcXpubRes.xpub)
  return xpub_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcXpubRes::set_xpub(const ::std::string& value) {
  
  xpub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcXpubRes.xpub)
}
inline void BtcXpubRes::set_xpub(const char* value) {
  
  xpub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcXpubRes.xpub)
}
inline void BtcXpubRes::set_xpub(const char* value, size_t size) {
  
  xpub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcXpubRes.xpub)
}
inline ::std::string* BtcXpubRes::mutable_xpub() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcXpubRes.xpub)
  return xpub_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcXpubRes::release_xpub() {
  // @@protoc_insertion_point(field_release:btcapi.BtcXpubRes.xpub)
  
  return xpub_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcXpubRes::set_allocated_xpub(::std::string* xpub) {
  if (xpub != NULL) {
    
  } else {
    
  }
  xpub_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xpub);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcXpubRes.xpub)
}

inline const BtcXpubRes* BtcXpubRes::internal_default_instance() {
  return &BtcXpubRes_default_instance_.get();
}
// -------------------------------------------------------------------

// BtcAddressReq

// optional string network = 1;
inline void BtcAddressReq::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcAddressReq::network() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcAddressReq.network)
  return network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcAddressReq::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcAddressReq.network)
}
inline void BtcAddressReq::set_network(const char* value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcAddressReq.network)
}
inline void BtcAddressReq::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcAddressReq.network)
}
inline ::std::string* BtcAddressReq::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcAddressReq.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcAddressReq::release_network() {
  // @@protoc_insertion_point(field_release:btcapi.BtcAddressReq.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcAddressReq::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcAddressReq.network)
}

// optional string path = 2;
inline void BtcAddressReq::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcAddressReq::path() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcAddressReq.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcAddressReq::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcAddressReq.path)
}
inline void BtcAddressReq::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcAddressReq.path)
}
inline void BtcAddressReq::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcAddressReq.path)
}
inline ::std::string* BtcAddressReq::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcAddressReq.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcAddressReq::release_path() {
  // @@protoc_insertion_point(field_release:btcapi.BtcAddressReq.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcAddressReq::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcAddressReq.path)
}

inline const BtcAddressReq* BtcAddressReq::internal_default_instance() {
  return &BtcAddressReq_default_instance_.get();
}
// -------------------------------------------------------------------

// BtcAddressRes

// optional string address = 1;
inline void BtcAddressRes::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BtcAddressRes::address() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcAddressRes.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcAddressRes::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcAddressRes.address)
}
inline void BtcAddressRes::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcAddressRes.address)
}
inline void BtcAddressRes::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcAddressRes.address)
}
inline ::std::string* BtcAddressRes::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcAddressRes.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BtcAddressRes::release_address() {
  // @@protoc_insertion_point(field_release:btcapi.BtcAddressRes.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BtcAddressRes::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcAddressRes.address)
}

inline const BtcAddressRes* BtcAddressRes::internal_default_instance() {
  return &BtcAddressRes_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace btcapi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_btc_2eproto__INCLUDED
