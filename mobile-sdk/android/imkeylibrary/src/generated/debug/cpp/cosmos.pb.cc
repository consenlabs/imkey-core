// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cosmos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cosmosapi {

namespace {

const ::google::protobuf::Descriptor* Coin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Coin_reflection_ = NULL;
const ::google::protobuf::Descriptor* StdFee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StdFee_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgValue_AddressesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgDelegateValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDelegateValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSendValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSendValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CosmosTxReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CosmosTxReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CosmosTxRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CosmosTxRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CosmosAddressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CosmosAddressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CosmosAddressRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CosmosAddressRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cosmos_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cosmos_2eproto() {
  protobuf_AddDesc_cosmos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cosmos.proto");
  GOOGLE_CHECK(file != NULL);
  Coin_descriptor_ = file->message_type(0);
  static const int Coin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coin, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coin, denom_),
  };
  Coin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Coin_descriptor_,
      Coin::internal_default_instance(),
      Coin_offsets_,
      -1,
      -1,
      -1,
      sizeof(Coin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coin, _internal_metadata_));
  StdFee_descriptor_ = file->message_type(1);
  static const int StdFee_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StdFee, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StdFee, gas_),
  };
  StdFee_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StdFee_descriptor_,
      StdFee::internal_default_instance(),
      StdFee_offsets_,
      -1,
      -1,
      -1,
      sizeof(StdFee),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StdFee, _internal_metadata_));
  SignData_descriptor_ = file->message_type(2);
  static const int SignData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, account_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, chain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, memo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, msgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, sequence_),
  };
  SignData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SignData_descriptor_,
      SignData::internal_default_instance(),
      SignData_offsets_,
      -1,
      -1,
      -1,
      sizeof(SignData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, _internal_metadata_));
  Msg_descriptor_ = file->message_type(3);
  static const int Msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, value_),
  };
  Msg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Msg_descriptor_,
      Msg::internal_default_instance(),
      Msg_offsets_,
      -1,
      -1,
      -1,
      sizeof(Msg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _internal_metadata_));
  MsgValue_descriptor_ = file->message_type(4);
  static const int MsgValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgValue, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgValue, addresses_),
  };
  MsgValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgValue_descriptor_,
      MsgValue::internal_default_instance(),
      MsgValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(MsgValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgValue, _internal_metadata_));
  MsgValue_AddressesEntry_descriptor_ = MsgValue_descriptor_->nested_type(0);
  MsgDelegateValue_descriptor_ = file->message_type(5);
  static const int MsgDelegateValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDelegateValue, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDelegateValue, delegator_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDelegateValue, validator_address_),
  };
  MsgDelegateValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgDelegateValue_descriptor_,
      MsgDelegateValue::internal_default_instance(),
      MsgDelegateValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(MsgDelegateValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDelegateValue, _internal_metadata_));
  MsgSendValue_descriptor_ = file->message_type(6);
  static const int MsgSendValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendValue, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendValue, from_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendValue, to_address_),
  };
  MsgSendValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgSendValue_descriptor_,
      MsgSendValue::internal_default_instance(),
      MsgSendValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(MsgSendValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendValue, _internal_metadata_));
  CosmosTxReq_descriptor_ = file->message_type(7);
  static const int CosmosTxReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxReq, signdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxReq, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxReq, payment_dis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxReq, to_dis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxReq, from_dis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxReq, fee_dis_),
  };
  CosmosTxReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CosmosTxReq_descriptor_,
      CosmosTxReq::internal_default_instance(),
      CosmosTxReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(CosmosTxReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxReq, _internal_metadata_));
  CosmosTxRes_descriptor_ = file->message_type(8);
  static const int CosmosTxRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxRes, tx_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxRes, tx_hash_),
  };
  CosmosTxRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CosmosTxRes_descriptor_,
      CosmosTxRes::internal_default_instance(),
      CosmosTxRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(CosmosTxRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxRes, _internal_metadata_));
  CosmosAddressReq_descriptor_ = file->message_type(9);
  static const int CosmosAddressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosAddressReq, path_),
  };
  CosmosAddressReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CosmosAddressReq_descriptor_,
      CosmosAddressReq::internal_default_instance(),
      CosmosAddressReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(CosmosAddressReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosAddressReq, _internal_metadata_));
  CosmosAddressRes_descriptor_ = file->message_type(10);
  static const int CosmosAddressRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosAddressRes, address_),
  };
  CosmosAddressRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CosmosAddressRes_descriptor_,
      CosmosAddressRes::internal_default_instance(),
      CosmosAddressRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(CosmosAddressRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosAddressRes, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cosmos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Coin_descriptor_, Coin::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StdFee_descriptor_, StdFee::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SignData_descriptor_, SignData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Msg_descriptor_, Msg::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgValue_descriptor_, MsgValue::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        MsgValue_AddressesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                MsgValue_AddressesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgDelegateValue_descriptor_, MsgDelegateValue::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgSendValue_descriptor_, MsgSendValue::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CosmosTxReq_descriptor_, CosmosTxReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CosmosTxRes_descriptor_, CosmosTxRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CosmosAddressReq_descriptor_, CosmosAddressReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CosmosAddressRes_descriptor_, CosmosAddressRes::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cosmos_2eproto() {
  Coin_default_instance_.Shutdown();
  delete Coin_reflection_;
  StdFee_default_instance_.Shutdown();
  delete StdFee_reflection_;
  SignData_default_instance_.Shutdown();
  delete SignData_reflection_;
  Msg_default_instance_.Shutdown();
  delete Msg_reflection_;
  MsgValue_default_instance_.Shutdown();
  delete MsgValue_reflection_;
  MsgDelegateValue_default_instance_.Shutdown();
  delete MsgDelegateValue_reflection_;
  MsgSendValue_default_instance_.Shutdown();
  delete MsgSendValue_reflection_;
  CosmosTxReq_default_instance_.Shutdown();
  delete CosmosTxReq_reflection_;
  CosmosTxRes_default_instance_.Shutdown();
  delete CosmosTxRes_reflection_;
  CosmosAddressReq_default_instance_.Shutdown();
  delete CosmosAddressReq_reflection_;
  CosmosAddressRes_default_instance_.Shutdown();
  delete CosmosAddressRes_reflection_;
}

void protobuf_InitDefaults_cosmos_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fwrappers_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  Coin_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  StdFee_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SignData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Msg_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MsgValue_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MsgDelegateValue_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MsgSendValue_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CosmosTxReq_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CosmosTxRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CosmosAddressReq_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CosmosAddressRes_default_instance_.DefaultConstruct();
  Coin_default_instance_.get_mutable()->InitAsDefaultInstance();
  StdFee_default_instance_.get_mutable()->InitAsDefaultInstance();
  SignData_default_instance_.get_mutable()->InitAsDefaultInstance();
  Msg_default_instance_.get_mutable()->InitAsDefaultInstance();
  MsgValue_default_instance_.get_mutable()->InitAsDefaultInstance();
  MsgDelegateValue_default_instance_.get_mutable()->InitAsDefaultInstance();
  MsgSendValue_default_instance_.get_mutable()->InitAsDefaultInstance();
  CosmosTxReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  CosmosTxRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  CosmosAddressReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  CosmosAddressRes_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_cosmos_2eproto_once_);
void protobuf_InitDefaults_cosmos_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_cosmos_2eproto_once_,
                 &protobuf_InitDefaults_cosmos_2eproto_impl);
}
void protobuf_AddDesc_cosmos_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_cosmos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014cosmos.proto\022\tcosmosapi\032\036google/protob"
    "uf/wrappers.proto\"%\n\004Coin\022\016\n\006amount\030\001 \001("
    "\t\022\r\n\005denom\030\002 \001(\t\"6\n\006StdFee\022\037\n\006amount\030\001 \003"
    "(\0132\017.cosmosapi.Coin\022\013\n\003gas\030\002 \001(\t\"\260\001\n\010Sig"
    "nData\022\026\n\016account_number\030\001 \001(\t\022\020\n\010chain_i"
    "d\030\002 \001(\t\022\036\n\003fee\030\003 \001(\0132\021.cosmosapi.StdFee\022"
    "*\n\004memo\030\004 \001(\0132\034.google.protobuf.StringVa"
    "lue\022\034\n\004msgs\030\005 \003(\0132\016.cosmosapi.Msg\022\020\n\010seq"
    "uence\030\006 \001(\t\"7\n\003Msg\022\014\n\004type\030\001 \001(\t\022\"\n\005valu"
    "e\030\002 \001(\0132\023.cosmosapi.MsgValue\"\224\001\n\010MsgValu"
    "e\022\037\n\006amount\030\001 \003(\0132\017.cosmosapi.Coin\0225\n\tad"
    "dresses\030\002 \003(\0132\".cosmosapi.MsgValue.Addre"
    "ssesEntry\0320\n\016AddressesEntry\022\013\n\003key\030\001 \001(\t"
    "\022\r\n\005value\030\002 \001(\t:\0028\001\"i\n\020MsgDelegateValue\022"
    "\037\n\006amount\030\001 \003(\0132\017.cosmosapi.Coin\022\031\n\021dele"
    "gator_address\030\002 \001(\t\022\031\n\021validator_address"
    "\030\003 \001(\t\"Y\n\014MsgSendValue\022\037\n\006amount\030\001 \003(\0132\017"
    ".cosmosapi.Coin\022\024\n\014from_address\030\002 \001(\t\022\022\n"
    "\nto_address\030\003 \001(\t\"\212\001\n\013CosmosTxReq\022%\n\010sig"
    "nData\030\001 \001(\0132\023.cosmosapi.SignData\022\014\n\004path"
    "\030\002 \001(\t\022\023\n\013payment_dis\030\003 \001(\t\022\016\n\006to_dis\030\004 "
    "\001(\t\022\020\n\010from_dis\030\005 \001(\t\022\017\n\007fee_dis\030\006 \001(\t\"/"
    "\n\013CosmosTxRes\022\017\n\007tx_data\030\001 \001(\t\022\017\n\007tx_has"
    "h\030\002 \001(\t\" \n\020CosmosAddressReq\022\014\n\004path\030\001 \001("
    "\t\"#\n\020CosmosAddressRes\022\017\n\007address\030\001 \001(\tb\006"
    "proto3", 1006);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cosmos.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fwrappers_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cosmos_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_cosmos_2eproto_once_);
void protobuf_AddDesc_cosmos_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_cosmos_2eproto_once_,
                 &protobuf_AddDesc_cosmos_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cosmos_2eproto {
  StaticDescriptorInitializer_cosmos_2eproto() {
    protobuf_AddDesc_cosmos_2eproto();
  }
} static_descriptor_initializer_cosmos_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Coin::kAmountFieldNumber;
const int Coin::kDenomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Coin::Coin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cosmos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmosapi.Coin)
}

void Coin::InitAsDefaultInstance() {
}

Coin::Coin(const Coin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cosmosapi.Coin)
}

void Coin::SharedCtor() {
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  denom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Coin::~Coin() {
  // @@protoc_insertion_point(destructor:cosmosapi.Coin)
  SharedDtor();
}

void Coin::SharedDtor() {
  amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  denom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Coin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Coin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Coin_descriptor_;
}

const Coin& Coin::default_instance() {
  protobuf_InitDefaults_cosmos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Coin> Coin_default_instance_;

Coin* Coin::New(::google::protobuf::Arena* arena) const {
  Coin* n = new Coin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Coin::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmosapi.Coin)
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  denom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Coin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmosapi.Coin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string amount = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->amount().data(), this->amount().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.Coin.amount"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_denom;
        break;
      }

      // optional string denom = 2;
      case 2: {
        if (tag == 18) {
         parse_denom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_denom()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->denom().data(), this->denom().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.Coin.denom"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmosapi.Coin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmosapi.Coin)
  return false;
#undef DO_
}

void Coin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmosapi.Coin)
  // optional string amount = 1;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.Coin.amount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->amount(), output);
  }

  // optional string denom = 2;
  if (this->denom().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->denom().data(), this->denom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.Coin.denom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->denom(), output);
  }

  // @@protoc_insertion_point(serialize_end:cosmosapi.Coin)
}

::google::protobuf::uint8* Coin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmosapi.Coin)
  // optional string amount = 1;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.Coin.amount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->amount(), target);
  }

  // optional string denom = 2;
  if (this->denom().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->denom().data(), this->denom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.Coin.denom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->denom(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cosmosapi.Coin)
  return target;
}

size_t Coin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmosapi.Coin)
  size_t total_size = 0;

  // optional string amount = 1;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->amount());
  }

  // optional string denom = 2;
  if (this->denom().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->denom());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Coin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmosapi.Coin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Coin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Coin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmosapi.Coin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmosapi.Coin)
    UnsafeMergeFrom(*source);
  }
}

void Coin::MergeFrom(const Coin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmosapi.Coin)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Coin::UnsafeMergeFrom(const Coin& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  if (from.denom().size() > 0) {

    denom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.denom_);
  }
}

void Coin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmosapi.Coin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coin::CopyFrom(const Coin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmosapi.Coin)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Coin::IsInitialized() const {

  return true;
}

void Coin::Swap(Coin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Coin::InternalSwap(Coin* other) {
  amount_.Swap(&other->amount_);
  denom_.Swap(&other->denom_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Coin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Coin_descriptor_;
  metadata.reflection = Coin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Coin

// optional string amount = 1;
void Coin::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Coin::amount() const {
  // @@protoc_insertion_point(field_get:cosmosapi.Coin.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Coin::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.Coin.amount)
}
void Coin::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.Coin.amount)
}
void Coin::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.Coin.amount)
}
::std::string* Coin::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.Coin.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Coin::release_amount() {
  // @@protoc_insertion_point(field_release:cosmosapi.Coin.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Coin::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.Coin.amount)
}

// optional string denom = 2;
void Coin::clear_denom() {
  denom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Coin::denom() const {
  // @@protoc_insertion_point(field_get:cosmosapi.Coin.denom)
  return denom_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Coin::set_denom(const ::std::string& value) {
  
  denom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.Coin.denom)
}
void Coin::set_denom(const char* value) {
  
  denom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.Coin.denom)
}
void Coin::set_denom(const char* value, size_t size) {
  
  denom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.Coin.denom)
}
::std::string* Coin::mutable_denom() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.Coin.denom)
  return denom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Coin::release_denom() {
  // @@protoc_insertion_point(field_release:cosmosapi.Coin.denom)
  
  return denom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Coin::set_allocated_denom(::std::string* denom) {
  if (denom != NULL) {
    
  } else {
    
  }
  denom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), denom);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.Coin.denom)
}

inline const Coin* Coin::internal_default_instance() {
  return &Coin_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StdFee::kAmountFieldNumber;
const int StdFee::kGasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StdFee::StdFee()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cosmos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmosapi.StdFee)
}

void StdFee::InitAsDefaultInstance() {
}

StdFee::StdFee(const StdFee& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cosmosapi.StdFee)
}

void StdFee::SharedCtor() {
  gas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StdFee::~StdFee() {
  // @@protoc_insertion_point(destructor:cosmosapi.StdFee)
  SharedDtor();
}

void StdFee::SharedDtor() {
  gas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StdFee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StdFee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StdFee_descriptor_;
}

const StdFee& StdFee::default_instance() {
  protobuf_InitDefaults_cosmos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StdFee> StdFee_default_instance_;

StdFee* StdFee::New(::google::protobuf::Arena* arena) const {
  StdFee* n = new StdFee;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StdFee::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmosapi.StdFee)
  gas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.Clear();
}

bool StdFee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmosapi.StdFee)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmosapi.Coin amount = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_amount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_amount;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_gas;
        break;
      }

      // optional string gas = 2;
      case 2: {
        if (tag == 18) {
         parse_gas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gas()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gas().data(), this->gas().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.StdFee.gas"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmosapi.StdFee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmosapi.StdFee)
  return false;
#undef DO_
}

void StdFee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmosapi.StdFee)
  // repeated .cosmosapi.Coin amount = 1;
  for (unsigned int i = 0, n = this->amount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->amount(i), output);
  }

  // optional string gas = 2;
  if (this->gas().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gas().data(), this->gas().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.StdFee.gas");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gas(), output);
  }

  // @@protoc_insertion_point(serialize_end:cosmosapi.StdFee)
}

::google::protobuf::uint8* StdFee::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmosapi.StdFee)
  // repeated .cosmosapi.Coin amount = 1;
  for (unsigned int i = 0, n = this->amount_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->amount(i), false, target);
  }

  // optional string gas = 2;
  if (this->gas().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gas().data(), this->gas().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.StdFee.gas");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gas(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cosmosapi.StdFee)
  return target;
}

size_t StdFee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmosapi.StdFee)
  size_t total_size = 0;

  // optional string gas = 2;
  if (this->gas().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gas());
  }

  // repeated .cosmosapi.Coin amount = 1;
  {
    unsigned int count = this->amount_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->amount(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StdFee::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmosapi.StdFee)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StdFee* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StdFee>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmosapi.StdFee)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmosapi.StdFee)
    UnsafeMergeFrom(*source);
  }
}

void StdFee::MergeFrom(const StdFee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmosapi.StdFee)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StdFee::UnsafeMergeFrom(const StdFee& from) {
  GOOGLE_DCHECK(&from != this);
  amount_.MergeFrom(from.amount_);
  if (from.gas().size() > 0) {

    gas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gas_);
  }
}

void StdFee::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmosapi.StdFee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StdFee::CopyFrom(const StdFee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmosapi.StdFee)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StdFee::IsInitialized() const {

  return true;
}

void StdFee::Swap(StdFee* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StdFee::InternalSwap(StdFee* other) {
  amount_.UnsafeArenaSwap(&other->amount_);
  gas_.Swap(&other->gas_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StdFee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StdFee_descriptor_;
  metadata.reflection = StdFee_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StdFee

// repeated .cosmosapi.Coin amount = 1;
int StdFee::amount_size() const {
  return amount_.size();
}
void StdFee::clear_amount() {
  amount_.Clear();
}
const ::cosmosapi::Coin& StdFee::amount(int index) const {
  // @@protoc_insertion_point(field_get:cosmosapi.StdFee.amount)
  return amount_.Get(index);
}
::cosmosapi::Coin* StdFee::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:cosmosapi.StdFee.amount)
  return amount_.Mutable(index);
}
::cosmosapi::Coin* StdFee::add_amount() {
  // @@protoc_insertion_point(field_add:cosmosapi.StdFee.amount)
  return amount_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >*
StdFee::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:cosmosapi.StdFee.amount)
  return &amount_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >&
StdFee::amount() const {
  // @@protoc_insertion_point(field_list:cosmosapi.StdFee.amount)
  return amount_;
}

// optional string gas = 2;
void StdFee::clear_gas() {
  gas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StdFee::gas() const {
  // @@protoc_insertion_point(field_get:cosmosapi.StdFee.gas)
  return gas_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StdFee::set_gas(const ::std::string& value) {
  
  gas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.StdFee.gas)
}
void StdFee::set_gas(const char* value) {
  
  gas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.StdFee.gas)
}
void StdFee::set_gas(const char* value, size_t size) {
  
  gas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.StdFee.gas)
}
::std::string* StdFee::mutable_gas() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.StdFee.gas)
  return gas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StdFee::release_gas() {
  // @@protoc_insertion_point(field_release:cosmosapi.StdFee.gas)
  
  return gas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StdFee::set_allocated_gas(::std::string* gas) {
  if (gas != NULL) {
    
  } else {
    
  }
  gas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gas);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.StdFee.gas)
}

inline const StdFee* StdFee::internal_default_instance() {
  return &StdFee_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignData::kAccountNumberFieldNumber;
const int SignData::kChainIdFieldNumber;
const int SignData::kFeeFieldNumber;
const int SignData::kMemoFieldNumber;
const int SignData::kMsgsFieldNumber;
const int SignData::kSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignData::SignData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cosmos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmosapi.SignData)
}

void SignData::InitAsDefaultInstance() {
  fee_ = const_cast< ::cosmosapi::StdFee*>(
      ::cosmosapi::StdFee::internal_default_instance());
  memo_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
}

SignData::SignData(const SignData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cosmosapi.SignData)
}

void SignData::SharedCtor() {
  account_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_ = NULL;
  memo_ = NULL;
  _cached_size_ = 0;
}

SignData::~SignData() {
  // @@protoc_insertion_point(destructor:cosmosapi.SignData)
  SharedDtor();
}

void SignData::SharedDtor() {
  account_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chain_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &SignData_default_instance_.get()) {
    delete fee_;
    delete memo_;
  }
}

void SignData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignData_descriptor_;
}

const SignData& SignData::default_instance() {
  protobuf_InitDefaults_cosmos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SignData> SignData_default_instance_;

SignData* SignData::New(::google::protobuf::Arena* arena) const {
  SignData* n = new SignData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignData::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmosapi.SignData)
  account_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
  if (GetArenaNoVirtual() == NULL && memo_ != NULL) delete memo_;
  memo_ = NULL;
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgs_.Clear();
}

bool SignData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmosapi.SignData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account_number = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_number().data(), this->account_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.SignData.account_number"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chain_id;
        break;
      }

      // optional string chain_id = 2;
      case 2: {
        if (tag == 18) {
         parse_chain_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chain_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chain_id().data(), this->chain_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.SignData.chain_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fee;
        break;
      }

      // optional .cosmosapi.StdFee fee = 3;
      case 3: {
        if (tag == 26) {
         parse_fee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fee()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_memo;
        break;
      }

      // optional .google.protobuf.StringValue memo = 4;
      case 4: {
        if (tag == 34) {
         parse_memo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msgs;
        break;
      }

      // repeated .cosmosapi.Msg msgs = 5;
      case 5: {
        if (tag == 42) {
         parse_msgs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_msgs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_msgs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_sequence;
        break;
      }

      // optional string sequence = 6;
      case 6: {
        if (tag == 50) {
         parse_sequence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.SignData.sequence"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmosapi.SignData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmosapi.SignData)
  return false;
#undef DO_
}

void SignData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmosapi.SignData)
  // optional string account_number = 1;
  if (this->account_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_number().data(), this->account_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.SignData.account_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account_number(), output);
  }

  // optional string chain_id = 2;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), this->chain_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.SignData.chain_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chain_id(), output);
  }

  // optional .cosmosapi.StdFee fee = 3;
  if (this->has_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fee_, output);
  }

  // optional .google.protobuf.StringValue memo = 4;
  if (this->has_memo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->memo_, output);
  }

  // repeated .cosmosapi.Msg msgs = 5;
  for (unsigned int i = 0, n = this->msgs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->msgs(i), output);
  }

  // optional string sequence = 6;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.SignData.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sequence(), output);
  }

  // @@protoc_insertion_point(serialize_end:cosmosapi.SignData)
}

::google::protobuf::uint8* SignData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmosapi.SignData)
  // optional string account_number = 1;
  if (this->account_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_number().data(), this->account_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.SignData.account_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_number(), target);
  }

  // optional string chain_id = 2;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), this->chain_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.SignData.chain_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chain_id(), target);
  }

  // optional .cosmosapi.StdFee fee = 3;
  if (this->has_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->fee_, false, target);
  }

  // optional .google.protobuf.StringValue memo = 4;
  if (this->has_memo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->memo_, false, target);
  }

  // repeated .cosmosapi.Msg msgs = 5;
  for (unsigned int i = 0, n = this->msgs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->msgs(i), false, target);
  }

  // optional string sequence = 6;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.SignData.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sequence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cosmosapi.SignData)
  return target;
}

size_t SignData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmosapi.SignData)
  size_t total_size = 0;

  // optional string account_number = 1;
  if (this->account_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_number());
  }

  // optional string chain_id = 2;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chain_id());
  }

  // optional .cosmosapi.StdFee fee = 3;
  if (this->has_fee()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fee_);
  }

  // optional .google.protobuf.StringValue memo = 4;
  if (this->has_memo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->memo_);
  }

  // optional string sequence = 6;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // repeated .cosmosapi.Msg msgs = 5;
  {
    unsigned int count = this->msgs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmosapi.SignData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SignData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmosapi.SignData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmosapi.SignData)
    UnsafeMergeFrom(*source);
  }
}

void SignData::MergeFrom(const SignData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmosapi.SignData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SignData::UnsafeMergeFrom(const SignData& from) {
  GOOGLE_DCHECK(&from != this);
  msgs_.MergeFrom(from.msgs_);
  if (from.account_number().size() > 0) {

    account_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_number_);
  }
  if (from.chain_id().size() > 0) {

    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  if (from.has_fee()) {
    mutable_fee()->::cosmosapi::StdFee::MergeFrom(from.fee());
  }
  if (from.has_memo()) {
    mutable_memo()->::google::protobuf::StringValue::MergeFrom(from.memo());
  }
  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
}

void SignData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmosapi.SignData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignData::CopyFrom(const SignData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmosapi.SignData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SignData::IsInitialized() const {

  return true;
}

void SignData::Swap(SignData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignData::InternalSwap(SignData* other) {
  account_number_.Swap(&other->account_number_);
  chain_id_.Swap(&other->chain_id_);
  std::swap(fee_, other->fee_);
  std::swap(memo_, other->memo_);
  msgs_.UnsafeArenaSwap(&other->msgs_);
  sequence_.Swap(&other->sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignData_descriptor_;
  metadata.reflection = SignData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignData

// optional string account_number = 1;
void SignData::clear_account_number() {
  account_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignData::account_number() const {
  // @@protoc_insertion_point(field_get:cosmosapi.SignData.account_number)
  return account_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignData::set_account_number(const ::std::string& value) {
  
  account_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.SignData.account_number)
}
void SignData::set_account_number(const char* value) {
  
  account_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.SignData.account_number)
}
void SignData::set_account_number(const char* value, size_t size) {
  
  account_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.SignData.account_number)
}
::std::string* SignData::mutable_account_number() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.SignData.account_number)
  return account_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignData::release_account_number() {
  // @@protoc_insertion_point(field_release:cosmosapi.SignData.account_number)
  
  return account_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignData::set_allocated_account_number(::std::string* account_number) {
  if (account_number != NULL) {
    
  } else {
    
  }
  account_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_number);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.SignData.account_number)
}

// optional string chain_id = 2;
void SignData::clear_chain_id() {
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignData::chain_id() const {
  // @@protoc_insertion_point(field_get:cosmosapi.SignData.chain_id)
  return chain_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignData::set_chain_id(const ::std::string& value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.SignData.chain_id)
}
void SignData::set_chain_id(const char* value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.SignData.chain_id)
}
void SignData::set_chain_id(const char* value, size_t size) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.SignData.chain_id)
}
::std::string* SignData::mutable_chain_id() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.SignData.chain_id)
  return chain_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignData::release_chain_id() {
  // @@protoc_insertion_point(field_release:cosmosapi.SignData.chain_id)
  
  return chain_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignData::set_allocated_chain_id(::std::string* chain_id) {
  if (chain_id != NULL) {
    
  } else {
    
  }
  chain_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_id);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.SignData.chain_id)
}

// optional .cosmosapi.StdFee fee = 3;
bool SignData::has_fee() const {
  return this != internal_default_instance() && fee_ != NULL;
}
void SignData::clear_fee() {
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
}
const ::cosmosapi::StdFee& SignData::fee() const {
  // @@protoc_insertion_point(field_get:cosmosapi.SignData.fee)
  return fee_ != NULL ? *fee_
                         : *::cosmosapi::StdFee::internal_default_instance();
}
::cosmosapi::StdFee* SignData::mutable_fee() {
  
  if (fee_ == NULL) {
    fee_ = new ::cosmosapi::StdFee;
  }
  // @@protoc_insertion_point(field_mutable:cosmosapi.SignData.fee)
  return fee_;
}
::cosmosapi::StdFee* SignData::release_fee() {
  // @@protoc_insertion_point(field_release:cosmosapi.SignData.fee)
  
  ::cosmosapi::StdFee* temp = fee_;
  fee_ = NULL;
  return temp;
}
void SignData::set_allocated_fee(::cosmosapi::StdFee* fee) {
  delete fee_;
  fee_ = fee;
  if (fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.SignData.fee)
}

// optional .google.protobuf.StringValue memo = 4;
bool SignData::has_memo() const {
  return this != internal_default_instance() && memo_ != NULL;
}
void SignData::clear_memo() {
  if (GetArenaNoVirtual() == NULL && memo_ != NULL) delete memo_;
  memo_ = NULL;
}
const ::google::protobuf::StringValue& SignData::memo() const {
  // @@protoc_insertion_point(field_get:cosmosapi.SignData.memo)
  return memo_ != NULL ? *memo_
                         : *::google::protobuf::StringValue::internal_default_instance();
}
::google::protobuf::StringValue* SignData::mutable_memo() {
  
  if (memo_ == NULL) {
    memo_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmosapi.SignData.memo)
  return memo_;
}
::google::protobuf::StringValue* SignData::release_memo() {
  // @@protoc_insertion_point(field_release:cosmosapi.SignData.memo)
  
  ::google::protobuf::StringValue* temp = memo_;
  memo_ = NULL;
  return temp;
}
void SignData::set_allocated_memo(::google::protobuf::StringValue* memo) {
  delete memo_;
  if (memo != NULL && memo->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_memo = new ::google::protobuf::StringValue;
    new_memo->CopyFrom(*memo);
    memo = new_memo;
  }
  memo_ = memo;
  if (memo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.SignData.memo)
}

// repeated .cosmosapi.Msg msgs = 5;
int SignData::msgs_size() const {
  return msgs_.size();
}
void SignData::clear_msgs() {
  msgs_.Clear();
}
const ::cosmosapi::Msg& SignData::msgs(int index) const {
  // @@protoc_insertion_point(field_get:cosmosapi.SignData.msgs)
  return msgs_.Get(index);
}
::cosmosapi::Msg* SignData::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:cosmosapi.SignData.msgs)
  return msgs_.Mutable(index);
}
::cosmosapi::Msg* SignData::add_msgs() {
  // @@protoc_insertion_point(field_add:cosmosapi.SignData.msgs)
  return msgs_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmosapi::Msg >*
SignData::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:cosmosapi.SignData.msgs)
  return &msgs_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Msg >&
SignData::msgs() const {
  // @@protoc_insertion_point(field_list:cosmosapi.SignData.msgs)
  return msgs_;
}

// optional string sequence = 6;
void SignData::clear_sequence() {
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignData::sequence() const {
  // @@protoc_insertion_point(field_get:cosmosapi.SignData.sequence)
  return sequence_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignData::set_sequence(const ::std::string& value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.SignData.sequence)
}
void SignData::set_sequence(const char* value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.SignData.sequence)
}
void SignData::set_sequence(const char* value, size_t size) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.SignData.sequence)
}
::std::string* SignData::mutable_sequence() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.SignData.sequence)
  return sequence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignData::release_sequence() {
  // @@protoc_insertion_point(field_release:cosmosapi.SignData.sequence)
  
  return sequence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignData::set_allocated_sequence(::std::string* sequence) {
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.SignData.sequence)
}

inline const SignData* SignData::internal_default_instance() {
  return &SignData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg::kTypeFieldNumber;
const int Msg::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg::Msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cosmos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmosapi.Msg)
}

void Msg::InitAsDefaultInstance() {
  value_ = const_cast< ::cosmosapi::MsgValue*>(
      ::cosmosapi::MsgValue::internal_default_instance());
}

Msg::Msg(const Msg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cosmosapi.Msg)
}

void Msg::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  _cached_size_ = 0;
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:cosmosapi.Msg)
  SharedDtor();
}

void Msg::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Msg_default_instance_.get()) {
    delete value_;
  }
}

void Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_descriptor_;
}

const Msg& Msg::default_instance() {
  protobuf_InitDefaults_cosmos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Msg> Msg_default_instance_;

Msg* Msg::New(::google::protobuf::Arena* arena) const {
  Msg* n = new Msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmosapi.Msg)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}

bool Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmosapi.Msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.Msg.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .cosmosapi.MsgValue value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmosapi.Msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmosapi.Msg)
  return false;
#undef DO_
}

void Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmosapi.Msg)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.Msg.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional .cosmosapi.MsgValue value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:cosmosapi.Msg)
}

::google::protobuf::uint8* Msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmosapi.Msg)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.Msg.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional .cosmosapi.MsgValue value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cosmosapi.Msg)
  return target;
}

size_t Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmosapi.Msg)
  size_t total_size = 0;

  // optional string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional .cosmosapi.MsgValue value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmosapi.Msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Msg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmosapi.Msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmosapi.Msg)
    UnsafeMergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmosapi.Msg)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Msg::UnsafeMergeFrom(const Msg& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_value()) {
    mutable_value()->::cosmosapi::MsgValue::MergeFrom(from.value());
  }
}

void Msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmosapi.Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmosapi.Msg)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Msg::IsInitialized() const {

  return true;
}

void Msg::Swap(Msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg::InternalSwap(Msg* other) {
  type_.Swap(&other->type_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_descriptor_;
  metadata.reflection = Msg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Msg

// optional string type = 1;
void Msg::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Msg::type() const {
  // @@protoc_insertion_point(field_get:cosmosapi.Msg.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Msg::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.Msg.type)
}
void Msg::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.Msg.type)
}
void Msg::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.Msg.type)
}
::std::string* Msg::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.Msg.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Msg::release_type() {
  // @@protoc_insertion_point(field_release:cosmosapi.Msg.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Msg::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.Msg.type)
}

// optional .cosmosapi.MsgValue value = 2;
bool Msg::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void Msg::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::cosmosapi::MsgValue& Msg::value() const {
  // @@protoc_insertion_point(field_get:cosmosapi.Msg.value)
  return value_ != NULL ? *value_
                         : *::cosmosapi::MsgValue::internal_default_instance();
}
::cosmosapi::MsgValue* Msg::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::cosmosapi::MsgValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmosapi.Msg.value)
  return value_;
}
::cosmosapi::MsgValue* Msg::release_value() {
  // @@protoc_insertion_point(field_release:cosmosapi.Msg.value)
  
  ::cosmosapi::MsgValue* temp = value_;
  value_ = NULL;
  return temp;
}
void Msg::set_allocated_value(::cosmosapi::MsgValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.Msg.value)
}

inline const Msg* Msg::internal_default_instance() {
  return &Msg_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgValue::kAmountFieldNumber;
const int MsgValue::kAddressesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgValue::MsgValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cosmos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmosapi.MsgValue)
}

void MsgValue::InitAsDefaultInstance() {
}

MsgValue::MsgValue(const MsgValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cosmosapi.MsgValue)
}

void MsgValue::SharedCtor() {
  addresses_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  addresses_.SetEntryDescriptor(
      &::cosmosapi::MsgValue_AddressesEntry_descriptor_);
  _cached_size_ = 0;
}

MsgValue::~MsgValue() {
  // @@protoc_insertion_point(destructor:cosmosapi.MsgValue)
  SharedDtor();
}

void MsgValue::SharedDtor() {
}

void MsgValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgValue_descriptor_;
}

const MsgValue& MsgValue::default_instance() {
  protobuf_InitDefaults_cosmos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MsgValue> MsgValue_default_instance_;

MsgValue* MsgValue::New(::google::protobuf::Arena* arena) const {
  MsgValue* n = new MsgValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgValue::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmosapi.MsgValue)
  amount_.Clear();
  addresses_.Clear();
}

bool MsgValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmosapi.MsgValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmosapi.Coin amount = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_amount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_amount;
        if (input->ExpectTag(18)) goto parse_loop_addresses;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> addresses = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_addresses:
          MsgValue_AddressesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&addresses_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.MsgValue.AddressesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.MsgValue.AddressesEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_addresses;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmosapi.MsgValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmosapi.MsgValue)
  return false;
#undef DO_
}

void MsgValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmosapi.MsgValue)
  // repeated .cosmosapi.Coin amount = 1;
  for (unsigned int i = 0, n = this->amount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->amount(i), output);
  }

  // map<string, string> addresses = 2;
  if (!this->addresses().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "cosmosapi.MsgValue.AddressesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "cosmosapi.MsgValue.AddressesEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->addresses().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->addresses().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->addresses().begin();
          it != this->addresses().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MsgValue_AddressesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(addresses_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MsgValue_AddressesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->addresses().begin();
          it != this->addresses().end(); ++it) {
        entry.reset(addresses_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:cosmosapi.MsgValue)
}

::google::protobuf::uint8* MsgValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmosapi.MsgValue)
  // repeated .cosmosapi.Coin amount = 1;
  for (unsigned int i = 0, n = this->amount_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->amount(i), false, target);
  }

  // map<string, string> addresses = 2;
  if (!this->addresses().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "cosmosapi.MsgValue.AddressesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "cosmosapi.MsgValue.AddressesEntry.value");
      }
    };

    if (deterministic &&
        this->addresses().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->addresses().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->addresses().begin();
          it != this->addresses().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MsgValue_AddressesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(addresses_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MsgValue_AddressesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->addresses().begin();
          it != this->addresses().end(); ++it) {
        entry.reset(addresses_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:cosmosapi.MsgValue)
  return target;
}

size_t MsgValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmosapi.MsgValue)
  size_t total_size = 0;

  // repeated .cosmosapi.Coin amount = 1;
  {
    unsigned int count = this->amount_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->amount(i));
    }
  }

  // map<string, string> addresses = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->addresses_size());
  {
    ::google::protobuf::scoped_ptr<MsgValue_AddressesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->addresses().begin();
        it != this->addresses().end(); ++it) {
      entry.reset(addresses_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmosapi.MsgValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmosapi.MsgValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmosapi.MsgValue)
    UnsafeMergeFrom(*source);
  }
}

void MsgValue::MergeFrom(const MsgValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmosapi.MsgValue)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MsgValue::UnsafeMergeFrom(const MsgValue& from) {
  GOOGLE_DCHECK(&from != this);
  amount_.MergeFrom(from.amount_);
  addresses_.MergeFrom(from.addresses_);
}

void MsgValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmosapi.MsgValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgValue::CopyFrom(const MsgValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmosapi.MsgValue)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MsgValue::IsInitialized() const {

  return true;
}

void MsgValue::Swap(MsgValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgValue::InternalSwap(MsgValue* other) {
  amount_.UnsafeArenaSwap(&other->amount_);
  addresses_.Swap(&other->addresses_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgValue_descriptor_;
  metadata.reflection = MsgValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgValue

// repeated .cosmosapi.Coin amount = 1;
int MsgValue::amount_size() const {
  return amount_.size();
}
void MsgValue::clear_amount() {
  amount_.Clear();
}
const ::cosmosapi::Coin& MsgValue::amount(int index) const {
  // @@protoc_insertion_point(field_get:cosmosapi.MsgValue.amount)
  return amount_.Get(index);
}
::cosmosapi::Coin* MsgValue::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:cosmosapi.MsgValue.amount)
  return amount_.Mutable(index);
}
::cosmosapi::Coin* MsgValue::add_amount() {
  // @@protoc_insertion_point(field_add:cosmosapi.MsgValue.amount)
  return amount_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >*
MsgValue::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:cosmosapi.MsgValue.amount)
  return &amount_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >&
MsgValue::amount() const {
  // @@protoc_insertion_point(field_list:cosmosapi.MsgValue.amount)
  return amount_;
}

// map<string, string> addresses = 2;
int MsgValue::addresses_size() const {
  return addresses_.size();
}
void MsgValue::clear_addresses() {
  addresses_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
MsgValue::addresses() const {
  // @@protoc_insertion_point(field_map:cosmosapi.MsgValue.addresses)
  return addresses_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
MsgValue::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_map:cosmosapi.MsgValue.addresses)
  return addresses_.MutableMap();
}

inline const MsgValue* MsgValue::internal_default_instance() {
  return &MsgValue_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgDelegateValue::kAmountFieldNumber;
const int MsgDelegateValue::kDelegatorAddressFieldNumber;
const int MsgDelegateValue::kValidatorAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgDelegateValue::MsgDelegateValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cosmos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmosapi.MsgDelegateValue)
}

void MsgDelegateValue::InitAsDefaultInstance() {
}

MsgDelegateValue::MsgDelegateValue(const MsgDelegateValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cosmosapi.MsgDelegateValue)
}

void MsgDelegateValue::SharedCtor() {
  delegator_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validator_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MsgDelegateValue::~MsgDelegateValue() {
  // @@protoc_insertion_point(destructor:cosmosapi.MsgDelegateValue)
  SharedDtor();
}

void MsgDelegateValue::SharedDtor() {
  delegator_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validator_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MsgDelegateValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDelegateValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDelegateValue_descriptor_;
}

const MsgDelegateValue& MsgDelegateValue::default_instance() {
  protobuf_InitDefaults_cosmos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MsgDelegateValue> MsgDelegateValue_default_instance_;

MsgDelegateValue* MsgDelegateValue::New(::google::protobuf::Arena* arena) const {
  MsgDelegateValue* n = new MsgDelegateValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgDelegateValue::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmosapi.MsgDelegateValue)
  delegator_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validator_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.Clear();
}

bool MsgDelegateValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmosapi.MsgDelegateValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmosapi.Coin amount = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_amount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_amount;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_delegator_address;
        break;
      }

      // optional string delegator_address = 2;
      case 2: {
        if (tag == 18) {
         parse_delegator_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_delegator_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->delegator_address().data(), this->delegator_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.MsgDelegateValue.delegator_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_validator_address;
        break;
      }

      // optional string validator_address = 3;
      case 3: {
        if (tag == 26) {
         parse_validator_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_validator_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->validator_address().data(), this->validator_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.MsgDelegateValue.validator_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmosapi.MsgDelegateValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmosapi.MsgDelegateValue)
  return false;
#undef DO_
}

void MsgDelegateValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmosapi.MsgDelegateValue)
  // repeated .cosmosapi.Coin amount = 1;
  for (unsigned int i = 0, n = this->amount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->amount(i), output);
  }

  // optional string delegator_address = 2;
  if (this->delegator_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->delegator_address().data(), this->delegator_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.MsgDelegateValue.delegator_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->delegator_address(), output);
  }

  // optional string validator_address = 3;
  if (this->validator_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->validator_address().data(), this->validator_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.MsgDelegateValue.validator_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->validator_address(), output);
  }

  // @@protoc_insertion_point(serialize_end:cosmosapi.MsgDelegateValue)
}

::google::protobuf::uint8* MsgDelegateValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmosapi.MsgDelegateValue)
  // repeated .cosmosapi.Coin amount = 1;
  for (unsigned int i = 0, n = this->amount_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->amount(i), false, target);
  }

  // optional string delegator_address = 2;
  if (this->delegator_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->delegator_address().data(), this->delegator_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.MsgDelegateValue.delegator_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->delegator_address(), target);
  }

  // optional string validator_address = 3;
  if (this->validator_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->validator_address().data(), this->validator_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.MsgDelegateValue.validator_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->validator_address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cosmosapi.MsgDelegateValue)
  return target;
}

size_t MsgDelegateValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmosapi.MsgDelegateValue)
  size_t total_size = 0;

  // optional string delegator_address = 2;
  if (this->delegator_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->delegator_address());
  }

  // optional string validator_address = 3;
  if (this->validator_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->validator_address());
  }

  // repeated .cosmosapi.Coin amount = 1;
  {
    unsigned int count = this->amount_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->amount(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDelegateValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmosapi.MsgDelegateValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgDelegateValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgDelegateValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmosapi.MsgDelegateValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmosapi.MsgDelegateValue)
    UnsafeMergeFrom(*source);
  }
}

void MsgDelegateValue::MergeFrom(const MsgDelegateValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmosapi.MsgDelegateValue)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MsgDelegateValue::UnsafeMergeFrom(const MsgDelegateValue& from) {
  GOOGLE_DCHECK(&from != this);
  amount_.MergeFrom(from.amount_);
  if (from.delegator_address().size() > 0) {

    delegator_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delegator_address_);
  }
  if (from.validator_address().size() > 0) {

    validator_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.validator_address_);
  }
}

void MsgDelegateValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmosapi.MsgDelegateValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDelegateValue::CopyFrom(const MsgDelegateValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmosapi.MsgDelegateValue)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MsgDelegateValue::IsInitialized() const {

  return true;
}

void MsgDelegateValue::Swap(MsgDelegateValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgDelegateValue::InternalSwap(MsgDelegateValue* other) {
  amount_.UnsafeArenaSwap(&other->amount_);
  delegator_address_.Swap(&other->delegator_address_);
  validator_address_.Swap(&other->validator_address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgDelegateValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDelegateValue_descriptor_;
  metadata.reflection = MsgDelegateValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgDelegateValue

// repeated .cosmosapi.Coin amount = 1;
int MsgDelegateValue::amount_size() const {
  return amount_.size();
}
void MsgDelegateValue::clear_amount() {
  amount_.Clear();
}
const ::cosmosapi::Coin& MsgDelegateValue::amount(int index) const {
  // @@protoc_insertion_point(field_get:cosmosapi.MsgDelegateValue.amount)
  return amount_.Get(index);
}
::cosmosapi::Coin* MsgDelegateValue::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:cosmosapi.MsgDelegateValue.amount)
  return amount_.Mutable(index);
}
::cosmosapi::Coin* MsgDelegateValue::add_amount() {
  // @@protoc_insertion_point(field_add:cosmosapi.MsgDelegateValue.amount)
  return amount_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >*
MsgDelegateValue::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:cosmosapi.MsgDelegateValue.amount)
  return &amount_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >&
MsgDelegateValue::amount() const {
  // @@protoc_insertion_point(field_list:cosmosapi.MsgDelegateValue.amount)
  return amount_;
}

// optional string delegator_address = 2;
void MsgDelegateValue::clear_delegator_address() {
  delegator_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MsgDelegateValue::delegator_address() const {
  // @@protoc_insertion_point(field_get:cosmosapi.MsgDelegateValue.delegator_address)
  return delegator_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgDelegateValue::set_delegator_address(const ::std::string& value) {
  
  delegator_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.MsgDelegateValue.delegator_address)
}
void MsgDelegateValue::set_delegator_address(const char* value) {
  
  delegator_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.MsgDelegateValue.delegator_address)
}
void MsgDelegateValue::set_delegator_address(const char* value, size_t size) {
  
  delegator_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.MsgDelegateValue.delegator_address)
}
::std::string* MsgDelegateValue::mutable_delegator_address() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.MsgDelegateValue.delegator_address)
  return delegator_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgDelegateValue::release_delegator_address() {
  // @@protoc_insertion_point(field_release:cosmosapi.MsgDelegateValue.delegator_address)
  
  return delegator_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgDelegateValue::set_allocated_delegator_address(::std::string* delegator_address) {
  if (delegator_address != NULL) {
    
  } else {
    
  }
  delegator_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delegator_address);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.MsgDelegateValue.delegator_address)
}

// optional string validator_address = 3;
void MsgDelegateValue::clear_validator_address() {
  validator_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MsgDelegateValue::validator_address() const {
  // @@protoc_insertion_point(field_get:cosmosapi.MsgDelegateValue.validator_address)
  return validator_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgDelegateValue::set_validator_address(const ::std::string& value) {
  
  validator_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.MsgDelegateValue.validator_address)
}
void MsgDelegateValue::set_validator_address(const char* value) {
  
  validator_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.MsgDelegateValue.validator_address)
}
void MsgDelegateValue::set_validator_address(const char* value, size_t size) {
  
  validator_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.MsgDelegateValue.validator_address)
}
::std::string* MsgDelegateValue::mutable_validator_address() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.MsgDelegateValue.validator_address)
  return validator_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgDelegateValue::release_validator_address() {
  // @@protoc_insertion_point(field_release:cosmosapi.MsgDelegateValue.validator_address)
  
  return validator_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgDelegateValue::set_allocated_validator_address(::std::string* validator_address) {
  if (validator_address != NULL) {
    
  } else {
    
  }
  validator_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), validator_address);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.MsgDelegateValue.validator_address)
}

inline const MsgDelegateValue* MsgDelegateValue::internal_default_instance() {
  return &MsgDelegateValue_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgSendValue::kAmountFieldNumber;
const int MsgSendValue::kFromAddressFieldNumber;
const int MsgSendValue::kToAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgSendValue::MsgSendValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cosmos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmosapi.MsgSendValue)
}

void MsgSendValue::InitAsDefaultInstance() {
}

MsgSendValue::MsgSendValue(const MsgSendValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cosmosapi.MsgSendValue)
}

void MsgSendValue::SharedCtor() {
  from_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MsgSendValue::~MsgSendValue() {
  // @@protoc_insertion_point(destructor:cosmosapi.MsgSendValue)
  SharedDtor();
}

void MsgSendValue::SharedDtor() {
  from_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MsgSendValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSendValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSendValue_descriptor_;
}

const MsgSendValue& MsgSendValue::default_instance() {
  protobuf_InitDefaults_cosmos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MsgSendValue> MsgSendValue_default_instance_;

MsgSendValue* MsgSendValue::New(::google::protobuf::Arena* arena) const {
  MsgSendValue* n = new MsgSendValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgSendValue::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmosapi.MsgSendValue)
  from_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.Clear();
}

bool MsgSendValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmosapi.MsgSendValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmosapi.Coin amount = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_amount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_amount;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_from_address;
        break;
      }

      // optional string from_address = 2;
      case 2: {
        if (tag == 18) {
         parse_from_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_address().data(), this->from_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.MsgSendValue.from_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_to_address;
        break;
      }

      // optional string to_address = 3;
      case 3: {
        if (tag == 26) {
         parse_to_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_address().data(), this->to_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.MsgSendValue.to_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmosapi.MsgSendValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmosapi.MsgSendValue)
  return false;
#undef DO_
}

void MsgSendValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmosapi.MsgSendValue)
  // repeated .cosmosapi.Coin amount = 1;
  for (unsigned int i = 0, n = this->amount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->amount(i), output);
  }

  // optional string from_address = 2;
  if (this->from_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_address().data(), this->from_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.MsgSendValue.from_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->from_address(), output);
  }

  // optional string to_address = 3;
  if (this->to_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_address().data(), this->to_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.MsgSendValue.to_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->to_address(), output);
  }

  // @@protoc_insertion_point(serialize_end:cosmosapi.MsgSendValue)
}

::google::protobuf::uint8* MsgSendValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmosapi.MsgSendValue)
  // repeated .cosmosapi.Coin amount = 1;
  for (unsigned int i = 0, n = this->amount_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->amount(i), false, target);
  }

  // optional string from_address = 2;
  if (this->from_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_address().data(), this->from_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.MsgSendValue.from_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from_address(), target);
  }

  // optional string to_address = 3;
  if (this->to_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_address().data(), this->to_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.MsgSendValue.to_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->to_address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cosmosapi.MsgSendValue)
  return target;
}

size_t MsgSendValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmosapi.MsgSendValue)
  size_t total_size = 0;

  // optional string from_address = 2;
  if (this->from_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_address());
  }

  // optional string to_address = 3;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_address());
  }

  // repeated .cosmosapi.Coin amount = 1;
  {
    unsigned int count = this->amount_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->amount(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSendValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmosapi.MsgSendValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgSendValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgSendValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmosapi.MsgSendValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmosapi.MsgSendValue)
    UnsafeMergeFrom(*source);
  }
}

void MsgSendValue::MergeFrom(const MsgSendValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmosapi.MsgSendValue)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MsgSendValue::UnsafeMergeFrom(const MsgSendValue& from) {
  GOOGLE_DCHECK(&from != this);
  amount_.MergeFrom(from.amount_);
  if (from.from_address().size() > 0) {

    from_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_address_);
  }
  if (from.to_address().size() > 0) {

    to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
  }
}

void MsgSendValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmosapi.MsgSendValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSendValue::CopyFrom(const MsgSendValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmosapi.MsgSendValue)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MsgSendValue::IsInitialized() const {

  return true;
}

void MsgSendValue::Swap(MsgSendValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgSendValue::InternalSwap(MsgSendValue* other) {
  amount_.UnsafeArenaSwap(&other->amount_);
  from_address_.Swap(&other->from_address_);
  to_address_.Swap(&other->to_address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgSendValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSendValue_descriptor_;
  metadata.reflection = MsgSendValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgSendValue

// repeated .cosmosapi.Coin amount = 1;
int MsgSendValue::amount_size() const {
  return amount_.size();
}
void MsgSendValue::clear_amount() {
  amount_.Clear();
}
const ::cosmosapi::Coin& MsgSendValue::amount(int index) const {
  // @@protoc_insertion_point(field_get:cosmosapi.MsgSendValue.amount)
  return amount_.Get(index);
}
::cosmosapi::Coin* MsgSendValue::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:cosmosapi.MsgSendValue.amount)
  return amount_.Mutable(index);
}
::cosmosapi::Coin* MsgSendValue::add_amount() {
  // @@protoc_insertion_point(field_add:cosmosapi.MsgSendValue.amount)
  return amount_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >*
MsgSendValue::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:cosmosapi.MsgSendValue.amount)
  return &amount_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >&
MsgSendValue::amount() const {
  // @@protoc_insertion_point(field_list:cosmosapi.MsgSendValue.amount)
  return amount_;
}

// optional string from_address = 2;
void MsgSendValue::clear_from_address() {
  from_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MsgSendValue::from_address() const {
  // @@protoc_insertion_point(field_get:cosmosapi.MsgSendValue.from_address)
  return from_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgSendValue::set_from_address(const ::std::string& value) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.MsgSendValue.from_address)
}
void MsgSendValue::set_from_address(const char* value) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.MsgSendValue.from_address)
}
void MsgSendValue::set_from_address(const char* value, size_t size) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.MsgSendValue.from_address)
}
::std::string* MsgSendValue::mutable_from_address() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.MsgSendValue.from_address)
  return from_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgSendValue::release_from_address() {
  // @@protoc_insertion_point(field_release:cosmosapi.MsgSendValue.from_address)
  
  return from_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgSendValue::set_allocated_from_address(::std::string* from_address) {
  if (from_address != NULL) {
    
  } else {
    
  }
  from_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_address);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.MsgSendValue.from_address)
}

// optional string to_address = 3;
void MsgSendValue::clear_to_address() {
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MsgSendValue::to_address() const {
  // @@protoc_insertion_point(field_get:cosmosapi.MsgSendValue.to_address)
  return to_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgSendValue::set_to_address(const ::std::string& value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.MsgSendValue.to_address)
}
void MsgSendValue::set_to_address(const char* value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.MsgSendValue.to_address)
}
void MsgSendValue::set_to_address(const char* value, size_t size) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.MsgSendValue.to_address)
}
::std::string* MsgSendValue::mutable_to_address() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.MsgSendValue.to_address)
  return to_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgSendValue::release_to_address() {
  // @@protoc_insertion_point(field_release:cosmosapi.MsgSendValue.to_address)
  
  return to_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgSendValue::set_allocated_to_address(::std::string* to_address) {
  if (to_address != NULL) {
    
  } else {
    
  }
  to_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_address);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.MsgSendValue.to_address)
}

inline const MsgSendValue* MsgSendValue::internal_default_instance() {
  return &MsgSendValue_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosmosTxReq::kSignDataFieldNumber;
const int CosmosTxReq::kPathFieldNumber;
const int CosmosTxReq::kPaymentDisFieldNumber;
const int CosmosTxReq::kToDisFieldNumber;
const int CosmosTxReq::kFromDisFieldNumber;
const int CosmosTxReq::kFeeDisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosmosTxReq::CosmosTxReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cosmos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmosapi.CosmosTxReq)
}

void CosmosTxReq::InitAsDefaultInstance() {
  signdata_ = const_cast< ::cosmosapi::SignData*>(
      ::cosmosapi::SignData::internal_default_instance());
}

CosmosTxReq::CosmosTxReq(const CosmosTxReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cosmosapi.CosmosTxReq)
}

void CosmosTxReq::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payment_dis_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_dis_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_dis_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_dis_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signdata_ = NULL;
  _cached_size_ = 0;
}

CosmosTxReq::~CosmosTxReq() {
  // @@protoc_insertion_point(destructor:cosmosapi.CosmosTxReq)
  SharedDtor();
}

void CosmosTxReq::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payment_dis_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_dis_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_dis_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_dis_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &CosmosTxReq_default_instance_.get()) {
    delete signdata_;
  }
}

void CosmosTxReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CosmosTxReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CosmosTxReq_descriptor_;
}

const CosmosTxReq& CosmosTxReq::default_instance() {
  protobuf_InitDefaults_cosmos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CosmosTxReq> CosmosTxReq_default_instance_;

CosmosTxReq* CosmosTxReq::New(::google::protobuf::Arena* arena) const {
  CosmosTxReq* n = new CosmosTxReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CosmosTxReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmosapi.CosmosTxReq)
  if (GetArenaNoVirtual() == NULL && signdata_ != NULL) delete signdata_;
  signdata_ = NULL;
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payment_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CosmosTxReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmosapi.CosmosTxReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cosmosapi.SignData signData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosTxReq.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_payment_dis;
        break;
      }

      // optional string payment_dis = 3;
      case 3: {
        if (tag == 26) {
         parse_payment_dis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payment_dis()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->payment_dis().data(), this->payment_dis().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosTxReq.payment_dis"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_to_dis;
        break;
      }

      // optional string to_dis = 4;
      case 4: {
        if (tag == 34) {
         parse_to_dis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_dis()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_dis().data(), this->to_dis().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosTxReq.to_dis"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_from_dis;
        break;
      }

      // optional string from_dis = 5;
      case 5: {
        if (tag == 42) {
         parse_from_dis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_dis()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_dis().data(), this->from_dis().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosTxReq.from_dis"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fee_dis;
        break;
      }

      // optional string fee_dis = 6;
      case 6: {
        if (tag == 50) {
         parse_fee_dis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fee_dis()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fee_dis().data(), this->fee_dis().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosTxReq.fee_dis"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmosapi.CosmosTxReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmosapi.CosmosTxReq)
  return false;
#undef DO_
}

void CosmosTxReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmosapi.CosmosTxReq)
  // optional .cosmosapi.SignData signData = 1;
  if (this->has_signdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->signdata_, output);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxReq.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional string payment_dis = 3;
  if (this->payment_dis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payment_dis().data(), this->payment_dis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxReq.payment_dis");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->payment_dis(), output);
  }

  // optional string to_dis = 4;
  if (this->to_dis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_dis().data(), this->to_dis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxReq.to_dis");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to_dis(), output);
  }

  // optional string from_dis = 5;
  if (this->from_dis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_dis().data(), this->from_dis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxReq.from_dis");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->from_dis(), output);
  }

  // optional string fee_dis = 6;
  if (this->fee_dis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fee_dis().data(), this->fee_dis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxReq.fee_dis");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fee_dis(), output);
  }

  // @@protoc_insertion_point(serialize_end:cosmosapi.CosmosTxReq)
}

::google::protobuf::uint8* CosmosTxReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmosapi.CosmosTxReq)
  // optional .cosmosapi.SignData signData = 1;
  if (this->has_signdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->signdata_, false, target);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxReq.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional string payment_dis = 3;
  if (this->payment_dis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payment_dis().data(), this->payment_dis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxReq.payment_dis");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->payment_dis(), target);
  }

  // optional string to_dis = 4;
  if (this->to_dis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_dis().data(), this->to_dis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxReq.to_dis");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to_dis(), target);
  }

  // optional string from_dis = 5;
  if (this->from_dis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_dis().data(), this->from_dis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxReq.from_dis");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->from_dis(), target);
  }

  // optional string fee_dis = 6;
  if (this->fee_dis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fee_dis().data(), this->fee_dis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxReq.fee_dis");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fee_dis(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cosmosapi.CosmosTxReq)
  return target;
}

size_t CosmosTxReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmosapi.CosmosTxReq)
  size_t total_size = 0;

  // optional .cosmosapi.SignData signData = 1;
  if (this->has_signdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signdata_);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional string payment_dis = 3;
  if (this->payment_dis().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->payment_dis());
  }

  // optional string to_dis = 4;
  if (this->to_dis().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_dis());
  }

  // optional string from_dis = 5;
  if (this->from_dis().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_dis());
  }

  // optional string fee_dis = 6;
  if (this->fee_dis().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fee_dis());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CosmosTxReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmosapi.CosmosTxReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CosmosTxReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosmosTxReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmosapi.CosmosTxReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmosapi.CosmosTxReq)
    UnsafeMergeFrom(*source);
  }
}

void CosmosTxReq::MergeFrom(const CosmosTxReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmosapi.CosmosTxReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CosmosTxReq::UnsafeMergeFrom(const CosmosTxReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_signdata()) {
    mutable_signdata()->::cosmosapi::SignData::MergeFrom(from.signdata());
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.payment_dis().size() > 0) {

    payment_dis_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payment_dis_);
  }
  if (from.to_dis().size() > 0) {

    to_dis_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_dis_);
  }
  if (from.from_dis().size() > 0) {

    from_dis_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_dis_);
  }
  if (from.fee_dis().size() > 0) {

    fee_dis_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fee_dis_);
  }
}

void CosmosTxReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmosapi.CosmosTxReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosmosTxReq::CopyFrom(const CosmosTxReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmosapi.CosmosTxReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CosmosTxReq::IsInitialized() const {

  return true;
}

void CosmosTxReq::Swap(CosmosTxReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosmosTxReq::InternalSwap(CosmosTxReq* other) {
  std::swap(signdata_, other->signdata_);
  path_.Swap(&other->path_);
  payment_dis_.Swap(&other->payment_dis_);
  to_dis_.Swap(&other->to_dis_);
  from_dis_.Swap(&other->from_dis_);
  fee_dis_.Swap(&other->fee_dis_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CosmosTxReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CosmosTxReq_descriptor_;
  metadata.reflection = CosmosTxReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CosmosTxReq

// optional .cosmosapi.SignData signData = 1;
bool CosmosTxReq::has_signdata() const {
  return this != internal_default_instance() && signdata_ != NULL;
}
void CosmosTxReq::clear_signdata() {
  if (GetArenaNoVirtual() == NULL && signdata_ != NULL) delete signdata_;
  signdata_ = NULL;
}
const ::cosmosapi::SignData& CosmosTxReq::signdata() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxReq.signData)
  return signdata_ != NULL ? *signdata_
                         : *::cosmosapi::SignData::internal_default_instance();
}
::cosmosapi::SignData* CosmosTxReq::mutable_signdata() {
  
  if (signdata_ == NULL) {
    signdata_ = new ::cosmosapi::SignData;
  }
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxReq.signData)
  return signdata_;
}
::cosmosapi::SignData* CosmosTxReq::release_signdata() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxReq.signData)
  
  ::cosmosapi::SignData* temp = signdata_;
  signdata_ = NULL;
  return temp;
}
void CosmosTxReq::set_allocated_signdata(::cosmosapi::SignData* signdata) {
  delete signdata_;
  signdata_ = signdata;
  if (signdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxReq.signData)
}

// optional string path = 2;
void CosmosTxReq::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosTxReq::path() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxReq.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxReq::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxReq.path)
}
void CosmosTxReq::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxReq.path)
}
void CosmosTxReq::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxReq.path)
}
::std::string* CosmosTxReq::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxReq.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosTxReq::release_path() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxReq.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxReq::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxReq.path)
}

// optional string payment_dis = 3;
void CosmosTxReq::clear_payment_dis() {
  payment_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosTxReq::payment_dis() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxReq.payment_dis)
  return payment_dis_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxReq::set_payment_dis(const ::std::string& value) {
  
  payment_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxReq.payment_dis)
}
void CosmosTxReq::set_payment_dis(const char* value) {
  
  payment_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxReq.payment_dis)
}
void CosmosTxReq::set_payment_dis(const char* value, size_t size) {
  
  payment_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxReq.payment_dis)
}
::std::string* CosmosTxReq::mutable_payment_dis() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxReq.payment_dis)
  return payment_dis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosTxReq::release_payment_dis() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxReq.payment_dis)
  
  return payment_dis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxReq::set_allocated_payment_dis(::std::string* payment_dis) {
  if (payment_dis != NULL) {
    
  } else {
    
  }
  payment_dis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payment_dis);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxReq.payment_dis)
}

// optional string to_dis = 4;
void CosmosTxReq::clear_to_dis() {
  to_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosTxReq::to_dis() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxReq.to_dis)
  return to_dis_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxReq::set_to_dis(const ::std::string& value) {
  
  to_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxReq.to_dis)
}
void CosmosTxReq::set_to_dis(const char* value) {
  
  to_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxReq.to_dis)
}
void CosmosTxReq::set_to_dis(const char* value, size_t size) {
  
  to_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxReq.to_dis)
}
::std::string* CosmosTxReq::mutable_to_dis() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxReq.to_dis)
  return to_dis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosTxReq::release_to_dis() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxReq.to_dis)
  
  return to_dis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxReq::set_allocated_to_dis(::std::string* to_dis) {
  if (to_dis != NULL) {
    
  } else {
    
  }
  to_dis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_dis);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxReq.to_dis)
}

// optional string from_dis = 5;
void CosmosTxReq::clear_from_dis() {
  from_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosTxReq::from_dis() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxReq.from_dis)
  return from_dis_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxReq::set_from_dis(const ::std::string& value) {
  
  from_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxReq.from_dis)
}
void CosmosTxReq::set_from_dis(const char* value) {
  
  from_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxReq.from_dis)
}
void CosmosTxReq::set_from_dis(const char* value, size_t size) {
  
  from_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxReq.from_dis)
}
::std::string* CosmosTxReq::mutable_from_dis() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxReq.from_dis)
  return from_dis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosTxReq::release_from_dis() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxReq.from_dis)
  
  return from_dis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxReq::set_allocated_from_dis(::std::string* from_dis) {
  if (from_dis != NULL) {
    
  } else {
    
  }
  from_dis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_dis);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxReq.from_dis)
}

// optional string fee_dis = 6;
void CosmosTxReq::clear_fee_dis() {
  fee_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosTxReq::fee_dis() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxReq.fee_dis)
  return fee_dis_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxReq::set_fee_dis(const ::std::string& value) {
  
  fee_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxReq.fee_dis)
}
void CosmosTxReq::set_fee_dis(const char* value) {
  
  fee_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxReq.fee_dis)
}
void CosmosTxReq::set_fee_dis(const char* value, size_t size) {
  
  fee_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxReq.fee_dis)
}
::std::string* CosmosTxReq::mutable_fee_dis() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxReq.fee_dis)
  return fee_dis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosTxReq::release_fee_dis() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxReq.fee_dis)
  
  return fee_dis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxReq::set_allocated_fee_dis(::std::string* fee_dis) {
  if (fee_dis != NULL) {
    
  } else {
    
  }
  fee_dis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fee_dis);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxReq.fee_dis)
}

inline const CosmosTxReq* CosmosTxReq::internal_default_instance() {
  return &CosmosTxReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosmosTxRes::kTxDataFieldNumber;
const int CosmosTxRes::kTxHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosmosTxRes::CosmosTxRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cosmos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmosapi.CosmosTxRes)
}

void CosmosTxRes::InitAsDefaultInstance() {
}

CosmosTxRes::CosmosTxRes(const CosmosTxRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cosmosapi.CosmosTxRes)
}

void CosmosTxRes::SharedCtor() {
  tx_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CosmosTxRes::~CosmosTxRes() {
  // @@protoc_insertion_point(destructor:cosmosapi.CosmosTxRes)
  SharedDtor();
}

void CosmosTxRes::SharedDtor() {
  tx_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CosmosTxRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CosmosTxRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CosmosTxRes_descriptor_;
}

const CosmosTxRes& CosmosTxRes::default_instance() {
  protobuf_InitDefaults_cosmos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CosmosTxRes> CosmosTxRes_default_instance_;

CosmosTxRes* CosmosTxRes::New(::google::protobuf::Arena* arena) const {
  CosmosTxRes* n = new CosmosTxRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CosmosTxRes::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmosapi.CosmosTxRes)
  tx_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CosmosTxRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmosapi.CosmosTxRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tx_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tx_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tx_data().data(), this->tx_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosTxRes.tx_data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tx_hash;
        break;
      }

      // optional string tx_hash = 2;
      case 2: {
        if (tag == 18) {
         parse_tx_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tx_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tx_hash().data(), this->tx_hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosTxRes.tx_hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmosapi.CosmosTxRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmosapi.CosmosTxRes)
  return false;
#undef DO_
}

void CosmosTxRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmosapi.CosmosTxRes)
  // optional string tx_data = 1;
  if (this->tx_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_data().data(), this->tx_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxRes.tx_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tx_data(), output);
  }

  // optional string tx_hash = 2;
  if (this->tx_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_hash().data(), this->tx_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxRes.tx_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tx_hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:cosmosapi.CosmosTxRes)
}

::google::protobuf::uint8* CosmosTxRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmosapi.CosmosTxRes)
  // optional string tx_data = 1;
  if (this->tx_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_data().data(), this->tx_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxRes.tx_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tx_data(), target);
  }

  // optional string tx_hash = 2;
  if (this->tx_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_hash().data(), this->tx_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxRes.tx_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tx_hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cosmosapi.CosmosTxRes)
  return target;
}

size_t CosmosTxRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmosapi.CosmosTxRes)
  size_t total_size = 0;

  // optional string tx_data = 1;
  if (this->tx_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tx_data());
  }

  // optional string tx_hash = 2;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tx_hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CosmosTxRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmosapi.CosmosTxRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CosmosTxRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosmosTxRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmosapi.CosmosTxRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmosapi.CosmosTxRes)
    UnsafeMergeFrom(*source);
  }
}

void CosmosTxRes::MergeFrom(const CosmosTxRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmosapi.CosmosTxRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CosmosTxRes::UnsafeMergeFrom(const CosmosTxRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.tx_data().size() > 0) {

    tx_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_data_);
  }
  if (from.tx_hash().size() > 0) {

    tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
}

void CosmosTxRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmosapi.CosmosTxRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosmosTxRes::CopyFrom(const CosmosTxRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmosapi.CosmosTxRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CosmosTxRes::IsInitialized() const {

  return true;
}

void CosmosTxRes::Swap(CosmosTxRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosmosTxRes::InternalSwap(CosmosTxRes* other) {
  tx_data_.Swap(&other->tx_data_);
  tx_hash_.Swap(&other->tx_hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CosmosTxRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CosmosTxRes_descriptor_;
  metadata.reflection = CosmosTxRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CosmosTxRes

// optional string tx_data = 1;
void CosmosTxRes::clear_tx_data() {
  tx_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosTxRes::tx_data() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxRes.tx_data)
  return tx_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxRes::set_tx_data(const ::std::string& value) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxRes.tx_data)
}
void CosmosTxRes::set_tx_data(const char* value) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxRes.tx_data)
}
void CosmosTxRes::set_tx_data(const char* value, size_t size) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxRes.tx_data)
}
::std::string* CosmosTxRes::mutable_tx_data() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxRes.tx_data)
  return tx_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosTxRes::release_tx_data() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxRes.tx_data)
  
  return tx_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxRes::set_allocated_tx_data(::std::string* tx_data) {
  if (tx_data != NULL) {
    
  } else {
    
  }
  tx_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_data);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxRes.tx_data)
}

// optional string tx_hash = 2;
void CosmosTxRes::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosTxRes::tx_hash() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxRes.tx_hash)
  return tx_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxRes::set_tx_hash(const ::std::string& value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxRes.tx_hash)
}
void CosmosTxRes::set_tx_hash(const char* value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxRes.tx_hash)
}
void CosmosTxRes::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxRes.tx_hash)
}
::std::string* CosmosTxRes::mutable_tx_hash() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxRes.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosTxRes::release_tx_hash() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxRes.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxRes::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxRes.tx_hash)
}

inline const CosmosTxRes* CosmosTxRes::internal_default_instance() {
  return &CosmosTxRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosmosAddressReq::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosmosAddressReq::CosmosAddressReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cosmos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmosapi.CosmosAddressReq)
}

void CosmosAddressReq::InitAsDefaultInstance() {
}

CosmosAddressReq::CosmosAddressReq(const CosmosAddressReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cosmosapi.CosmosAddressReq)
}

void CosmosAddressReq::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CosmosAddressReq::~CosmosAddressReq() {
  // @@protoc_insertion_point(destructor:cosmosapi.CosmosAddressReq)
  SharedDtor();
}

void CosmosAddressReq::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CosmosAddressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CosmosAddressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CosmosAddressReq_descriptor_;
}

const CosmosAddressReq& CosmosAddressReq::default_instance() {
  protobuf_InitDefaults_cosmos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CosmosAddressReq> CosmosAddressReq_default_instance_;

CosmosAddressReq* CosmosAddressReq::New(::google::protobuf::Arena* arena) const {
  CosmosAddressReq* n = new CosmosAddressReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CosmosAddressReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmosapi.CosmosAddressReq)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CosmosAddressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmosapi.CosmosAddressReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosAddressReq.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmosapi.CosmosAddressReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmosapi.CosmosAddressReq)
  return false;
#undef DO_
}

void CosmosAddressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmosapi.CosmosAddressReq)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosAddressReq.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:cosmosapi.CosmosAddressReq)
}

::google::protobuf::uint8* CosmosAddressReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmosapi.CosmosAddressReq)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosAddressReq.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cosmosapi.CosmosAddressReq)
  return target;
}

size_t CosmosAddressReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmosapi.CosmosAddressReq)
  size_t total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CosmosAddressReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmosapi.CosmosAddressReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CosmosAddressReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosmosAddressReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmosapi.CosmosAddressReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmosapi.CosmosAddressReq)
    UnsafeMergeFrom(*source);
  }
}

void CosmosAddressReq::MergeFrom(const CosmosAddressReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmosapi.CosmosAddressReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CosmosAddressReq::UnsafeMergeFrom(const CosmosAddressReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void CosmosAddressReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmosapi.CosmosAddressReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosmosAddressReq::CopyFrom(const CosmosAddressReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmosapi.CosmosAddressReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CosmosAddressReq::IsInitialized() const {

  return true;
}

void CosmosAddressReq::Swap(CosmosAddressReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosmosAddressReq::InternalSwap(CosmosAddressReq* other) {
  path_.Swap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CosmosAddressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CosmosAddressReq_descriptor_;
  metadata.reflection = CosmosAddressReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CosmosAddressReq

// optional string path = 1;
void CosmosAddressReq::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosAddressReq::path() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosAddressReq.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosAddressReq::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosAddressReq.path)
}
void CosmosAddressReq::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosAddressReq.path)
}
void CosmosAddressReq::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosAddressReq.path)
}
::std::string* CosmosAddressReq::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosAddressReq.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosAddressReq::release_path() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosAddressReq.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosAddressReq::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosAddressReq.path)
}

inline const CosmosAddressReq* CosmosAddressReq::internal_default_instance() {
  return &CosmosAddressReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosmosAddressRes::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosmosAddressRes::CosmosAddressRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cosmos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmosapi.CosmosAddressRes)
}

void CosmosAddressRes::InitAsDefaultInstance() {
}

CosmosAddressRes::CosmosAddressRes(const CosmosAddressRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cosmosapi.CosmosAddressRes)
}

void CosmosAddressRes::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CosmosAddressRes::~CosmosAddressRes() {
  // @@protoc_insertion_point(destructor:cosmosapi.CosmosAddressRes)
  SharedDtor();
}

void CosmosAddressRes::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CosmosAddressRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CosmosAddressRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CosmosAddressRes_descriptor_;
}

const CosmosAddressRes& CosmosAddressRes::default_instance() {
  protobuf_InitDefaults_cosmos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CosmosAddressRes> CosmosAddressRes_default_instance_;

CosmosAddressRes* CosmosAddressRes::New(::google::protobuf::Arena* arena) const {
  CosmosAddressRes* n = new CosmosAddressRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CosmosAddressRes::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmosapi.CosmosAddressRes)
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CosmosAddressRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmosapi.CosmosAddressRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosAddressRes.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmosapi.CosmosAddressRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmosapi.CosmosAddressRes)
  return false;
#undef DO_
}

void CosmosAddressRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmosapi.CosmosAddressRes)
  // optional string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosAddressRes.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // @@protoc_insertion_point(serialize_end:cosmosapi.CosmosAddressRes)
}

::google::protobuf::uint8* CosmosAddressRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmosapi.CosmosAddressRes)
  // optional string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosAddressRes.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cosmosapi.CosmosAddressRes)
  return target;
}

size_t CosmosAddressRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmosapi.CosmosAddressRes)
  size_t total_size = 0;

  // optional string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CosmosAddressRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmosapi.CosmosAddressRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CosmosAddressRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosmosAddressRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmosapi.CosmosAddressRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmosapi.CosmosAddressRes)
    UnsafeMergeFrom(*source);
  }
}

void CosmosAddressRes::MergeFrom(const CosmosAddressRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmosapi.CosmosAddressRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CosmosAddressRes::UnsafeMergeFrom(const CosmosAddressRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void CosmosAddressRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmosapi.CosmosAddressRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosmosAddressRes::CopyFrom(const CosmosAddressRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmosapi.CosmosAddressRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CosmosAddressRes::IsInitialized() const {

  return true;
}

void CosmosAddressRes::Swap(CosmosAddressRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosmosAddressRes::InternalSwap(CosmosAddressRes* other) {
  address_.Swap(&other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CosmosAddressRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CosmosAddressRes_descriptor_;
  metadata.reflection = CosmosAddressRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CosmosAddressRes

// optional string address = 1;
void CosmosAddressRes::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosAddressRes::address() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosAddressRes.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosAddressRes::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosAddressRes.address)
}
void CosmosAddressRes::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosAddressRes.address)
}
void CosmosAddressRes::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosAddressRes.address)
}
::std::string* CosmosAddressRes::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosAddressRes.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosAddressRes::release_address() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosAddressRes.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosAddressRes::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosAddressRes.address)
}

inline const CosmosAddressRes* CosmosAddressRes::internal_default_instance() {
  return &CosmosAddressRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cosmosapi

// @@protoc_insertion_point(global_scope)
