// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: btc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "btc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace btcapi {

namespace {

const ::google::protobuf::Descriptor* Utxo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Utxo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BtcTxReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtcTxReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BtcTxRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtcTxRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* BtcSegwitTxReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtcSegwitTxReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BtcSegwitTxRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtcSegwitTxRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* BtcXpubReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtcXpubReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BtcXpubRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtcXpubRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* BtcAddressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtcAddressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BtcAddressRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtcAddressRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_btc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_btc_2eproto() {
  protobuf_AddDesc_btc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "btc.proto");
  GOOGLE_CHECK(file != NULL);
  Utxo_descriptor_ = file->message_type(0);
  static const int Utxo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utxo, tx_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utxo, vout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utxo, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utxo, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utxo, script_pubkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utxo, derived_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utxo, sequence_),
  };
  Utxo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Utxo_descriptor_,
      Utxo::internal_default_instance(),
      Utxo_offsets_,
      -1,
      -1,
      -1,
      sizeof(Utxo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utxo, _internal_metadata_));
  BtcTxReq_descriptor_ = file->message_type(1);
  static const int BtcTxReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcTxReq, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcTxReq, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcTxReq, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcTxReq, change_address_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcTxReq, unspents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcTxReq, extra_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcTxReq, property_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcTxReq, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcTxReq, path_prefix_),
  };
  BtcTxReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BtcTxReq_descriptor_,
      BtcTxReq::internal_default_instance(),
      BtcTxReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(BtcTxReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcTxReq, _internal_metadata_));
  BtcTxRes_descriptor_ = file->message_type(2);
  static const int BtcTxRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcTxRes, tx_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcTxRes, tx_hash_),
  };
  BtcTxRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BtcTxRes_descriptor_,
      BtcTxRes::internal_default_instance(),
      BtcTxRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(BtcTxRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcTxRes, _internal_metadata_));
  BtcSegwitTxReq_descriptor_ = file->message_type(3);
  static const int BtcSegwitTxReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcSegwitTxReq, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcSegwitTxReq, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcSegwitTxReq, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcSegwitTxReq, change_address_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcSegwitTxReq, unspents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcSegwitTxReq, extra_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcSegwitTxReq, property_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcSegwitTxReq, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcSegwitTxReq, path_prefix_),
  };
  BtcSegwitTxReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BtcSegwitTxReq_descriptor_,
      BtcSegwitTxReq::internal_default_instance(),
      BtcSegwitTxReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(BtcSegwitTxReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcSegwitTxReq, _internal_metadata_));
  BtcSegwitTxRes_descriptor_ = file->message_type(4);
  static const int BtcSegwitTxRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcSegwitTxRes, witness_tx_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcSegwitTxRes, wtx_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcSegwitTxRes, tx_hash_),
  };
  BtcSegwitTxRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BtcSegwitTxRes_descriptor_,
      BtcSegwitTxRes::internal_default_instance(),
      BtcSegwitTxRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(BtcSegwitTxRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcSegwitTxRes, _internal_metadata_));
  BtcXpubReq_descriptor_ = file->message_type(5);
  static const int BtcXpubReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcXpubReq, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcXpubReq, path_),
  };
  BtcXpubReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BtcXpubReq_descriptor_,
      BtcXpubReq::internal_default_instance(),
      BtcXpubReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(BtcXpubReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcXpubReq, _internal_metadata_));
  BtcXpubRes_descriptor_ = file->message_type(6);
  static const int BtcXpubRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcXpubRes, xpub_),
  };
  BtcXpubRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BtcXpubRes_descriptor_,
      BtcXpubRes::internal_default_instance(),
      BtcXpubRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(BtcXpubRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcXpubRes, _internal_metadata_));
  BtcAddressReq_descriptor_ = file->message_type(7);
  static const int BtcAddressReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcAddressReq, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcAddressReq, path_),
  };
  BtcAddressReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BtcAddressReq_descriptor_,
      BtcAddressReq::internal_default_instance(),
      BtcAddressReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(BtcAddressReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcAddressReq, _internal_metadata_));
  BtcAddressRes_descriptor_ = file->message_type(8);
  static const int BtcAddressRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcAddressRes, address_),
  };
  BtcAddressRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BtcAddressRes_descriptor_,
      BtcAddressRes::internal_default_instance(),
      BtcAddressRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(BtcAddressRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtcAddressRes, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_btc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Utxo_descriptor_, Utxo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BtcTxReq_descriptor_, BtcTxReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BtcTxRes_descriptor_, BtcTxRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BtcSegwitTxReq_descriptor_, BtcSegwitTxReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BtcSegwitTxRes_descriptor_, BtcSegwitTxRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BtcXpubReq_descriptor_, BtcXpubReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BtcXpubRes_descriptor_, BtcXpubRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BtcAddressReq_descriptor_, BtcAddressReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BtcAddressRes_descriptor_, BtcAddressRes::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_btc_2eproto() {
  Utxo_default_instance_.Shutdown();
  delete Utxo_reflection_;
  BtcTxReq_default_instance_.Shutdown();
  delete BtcTxReq_reflection_;
  BtcTxRes_default_instance_.Shutdown();
  delete BtcTxRes_reflection_;
  BtcSegwitTxReq_default_instance_.Shutdown();
  delete BtcSegwitTxReq_reflection_;
  BtcSegwitTxRes_default_instance_.Shutdown();
  delete BtcSegwitTxRes_reflection_;
  BtcXpubReq_default_instance_.Shutdown();
  delete BtcXpubReq_reflection_;
  BtcXpubRes_default_instance_.Shutdown();
  delete BtcXpubRes_reflection_;
  BtcAddressReq_default_instance_.Shutdown();
  delete BtcAddressReq_reflection_;
  BtcAddressRes_default_instance_.Shutdown();
  delete BtcAddressRes_reflection_;
}

void protobuf_InitDefaults_btc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Utxo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BtcTxReq_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BtcTxRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BtcSegwitTxReq_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BtcSegwitTxRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BtcXpubReq_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BtcXpubRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BtcAddressReq_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BtcAddressRes_default_instance_.DefaultConstruct();
  Utxo_default_instance_.get_mutable()->InitAsDefaultInstance();
  BtcTxReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  BtcTxRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  BtcSegwitTxReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  BtcSegwitTxRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  BtcXpubReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  BtcXpubRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  BtcAddressReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  BtcAddressRes_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_btc_2eproto_once_);
void protobuf_InitDefaults_btc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_btc_2eproto_once_,
                 &protobuf_InitDefaults_btc_2eproto_impl);
}
void protobuf_AddDesc_btc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_btc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tbtc.proto\022\006btcapi\"\205\001\n\004Utxo\022\017\n\007tx_hash\030"
    "\001 \001(\t\022\014\n\004vout\030\002 \001(\005\022\016\n\006amount\030\003 \001(\003\022\017\n\007a"
    "ddress\030\004 \001(\t\022\025\n\rscript_pubKey\030\005 \001(\t\022\024\n\014d"
    "erived_path\030\006 \001(\t\022\020\n\010sequence\030\007 \001(\003\"\300\001\n\010"
    "BtcTxReq\022\n\n\002to\030\001 \001(\t\022\016\n\006amount\030\002 \001(\003\022\013\n\003"
    "fee\030\003 \001(\003\022\034\n\024change_address_index\030\004 \001(\r\022"
    "\036\n\010unspents\030\005 \003(\0132\014.btcapi.Utxo\022\022\n\nextra"
    "_data\030\006 \001(\014\022\023\n\013property_id\030\007 \001(\005\022\017\n\007netw"
    "ork\030\010 \001(\t\022\023\n\013path_prefix\030\t \001(\t\",\n\010BtcTxR"
    "es\022\017\n\007tx_data\030\001 \001(\t\022\017\n\007tx_hash\030\002 \001(\t\"\306\001\n"
    "\016BtcSegwitTxReq\022\n\n\002to\030\001 \001(\t\022\016\n\006amount\030\002 "
    "\001(\003\022\013\n\003fee\030\003 \001(\003\022\034\n\024change_address_index"
    "\030\004 \001(\r\022\036\n\010unspents\030\005 \003(\0132\014.btcapi.Utxo\022\022"
    "\n\nextra_data\030\006 \001(\014\022\023\n\013property_id\030\007 \001(\005\022"
    "\017\n\007network\030\010 \001(\t\022\023\n\013path_prefix\030\t \001(\t\"L\n"
    "\016BtcSegwitTxRes\022\027\n\017witness_tx_data\030\001 \001(\t"
    "\022\020\n\010wtx_hash\030\002 \001(\t\022\017\n\007tx_hash\030\003 \001(\t\"+\n\nB"
    "tcXpubReq\022\017\n\007network\030\001 \001(\t\022\014\n\004path\030\002 \001(\t"
    "\"\032\n\nBtcXpubRes\022\014\n\004xpub\030\001 \001(\t\".\n\rBtcAddre"
    "ssReq\022\017\n\007network\030\001 \001(\t\022\014\n\004path\030\002 \001(\t\" \n\r"
    "BtcAddressRes\022\017\n\007address\030\001 \001(\tb\006proto3", 838);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "btc.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_btc_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_btc_2eproto_once_);
void protobuf_AddDesc_btc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_btc_2eproto_once_,
                 &protobuf_AddDesc_btc_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_btc_2eproto {
  StaticDescriptorInitializer_btc_2eproto() {
    protobuf_AddDesc_btc_2eproto();
  }
} static_descriptor_initializer_btc_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Utxo::kTxHashFieldNumber;
const int Utxo::kVoutFieldNumber;
const int Utxo::kAmountFieldNumber;
const int Utxo::kAddressFieldNumber;
const int Utxo::kScriptPubKeyFieldNumber;
const int Utxo::kDerivedPathFieldNumber;
const int Utxo::kSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Utxo::Utxo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_btc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:btcapi.Utxo)
}

void Utxo::InitAsDefaultInstance() {
}

Utxo::Utxo(const Utxo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:btcapi.Utxo)
}

void Utxo::SharedCtor() {
  tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  derived_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, reinterpret_cast<char*>(&vout_) -
    reinterpret_cast<char*>(&amount_) + sizeof(vout_));
  _cached_size_ = 0;
}

Utxo::~Utxo() {
  // @@protoc_insertion_point(destructor:btcapi.Utxo)
  SharedDtor();
}

void Utxo::SharedDtor() {
  tx_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  derived_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Utxo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Utxo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Utxo_descriptor_;
}

const Utxo& Utxo::default_instance() {
  protobuf_InitDefaults_btc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Utxo> Utxo_default_instance_;

Utxo* Utxo::New(::google::protobuf::Arena* arena) const {
  Utxo* n = new Utxo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Utxo::Clear() {
// @@protoc_insertion_point(message_clear_start:btcapi.Utxo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Utxo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Utxo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(amount_, vout_);
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  derived_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Utxo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:btcapi.Utxo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tx_hash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tx_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tx_hash().data(), this->tx_hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.Utxo.tx_hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vout;
        break;
      }

      // optional int32 vout = 2;
      case 2: {
        if (tag == 16) {
         parse_vout:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vout_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // optional int64 amount = 3;
      case 3: {
        if (tag == 24) {
         parse_amount:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_address;
        break;
      }

      // optional string address = 4;
      case 4: {
        if (tag == 34) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.Utxo.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_script_pubKey;
        break;
      }

      // optional string script_pubKey = 5;
      case 5: {
        if (tag == 42) {
         parse_script_pubKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script_pubkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->script_pubkey().data(), this->script_pubkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.Utxo.script_pubKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_derived_path;
        break;
      }

      // optional string derived_path = 6;
      case 6: {
        if (tag == 50) {
         parse_derived_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_derived_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->derived_path().data(), this->derived_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.Utxo.derived_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sequence;
        break;
      }

      // optional int64 sequence = 7;
      case 7: {
        if (tag == 56) {
         parse_sequence:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:btcapi.Utxo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:btcapi.Utxo)
  return false;
#undef DO_
}

void Utxo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:btcapi.Utxo)
  // optional string tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_hash().data(), this->tx_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.Utxo.tx_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tx_hash(), output);
  }

  // optional int32 vout = 2;
  if (this->vout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vout(), output);
  }

  // optional int64 amount = 3;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->amount(), output);
  }

  // optional string address = 4;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.Utxo.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->address(), output);
  }

  // optional string script_pubKey = 5;
  if (this->script_pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->script_pubkey().data(), this->script_pubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.Utxo.script_pubKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->script_pubkey(), output);
  }

  // optional string derived_path = 6;
  if (this->derived_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->derived_path().data(), this->derived_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.Utxo.derived_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->derived_path(), output);
  }

  // optional int64 sequence = 7;
  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->sequence(), output);
  }

  // @@protoc_insertion_point(serialize_end:btcapi.Utxo)
}

::google::protobuf::uint8* Utxo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:btcapi.Utxo)
  // optional string tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_hash().data(), this->tx_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.Utxo.tx_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tx_hash(), target);
  }

  // optional int32 vout = 2;
  if (this->vout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vout(), target);
  }

  // optional int64 amount = 3;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->amount(), target);
  }

  // optional string address = 4;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.Utxo.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->address(), target);
  }

  // optional string script_pubKey = 5;
  if (this->script_pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->script_pubkey().data(), this->script_pubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.Utxo.script_pubKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->script_pubkey(), target);
  }

  // optional string derived_path = 6;
  if (this->derived_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->derived_path().data(), this->derived_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.Utxo.derived_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->derived_path(), target);
  }

  // optional int64 sequence = 7;
  if (this->sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->sequence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:btcapi.Utxo)
  return target;
}

size_t Utxo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:btcapi.Utxo)
  size_t total_size = 0;

  // optional string tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tx_hash());
  }

  // optional int32 vout = 2;
  if (this->vout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vout());
  }

  // optional int64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->amount());
  }

  // optional string address = 4;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // optional string script_pubKey = 5;
  if (this->script_pubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->script_pubkey());
  }

  // optional string derived_path = 6;
  if (this->derived_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->derived_path());
  }

  // optional int64 sequence = 7;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Utxo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:btcapi.Utxo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Utxo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Utxo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:btcapi.Utxo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:btcapi.Utxo)
    UnsafeMergeFrom(*source);
  }
}

void Utxo::MergeFrom(const Utxo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:btcapi.Utxo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Utxo::UnsafeMergeFrom(const Utxo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.tx_hash().size() > 0) {

    tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
  if (from.vout() != 0) {
    set_vout(from.vout());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.script_pubkey().size() > 0) {

    script_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_pubkey_);
  }
  if (from.derived_path().size() > 0) {

    derived_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.derived_path_);
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
}

void Utxo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:btcapi.Utxo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Utxo::CopyFrom(const Utxo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:btcapi.Utxo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Utxo::IsInitialized() const {

  return true;
}

void Utxo::Swap(Utxo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Utxo::InternalSwap(Utxo* other) {
  tx_hash_.Swap(&other->tx_hash_);
  std::swap(vout_, other->vout_);
  std::swap(amount_, other->amount_);
  address_.Swap(&other->address_);
  script_pubkey_.Swap(&other->script_pubkey_);
  derived_path_.Swap(&other->derived_path_);
  std::swap(sequence_, other->sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Utxo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Utxo_descriptor_;
  metadata.reflection = Utxo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Utxo

// optional string tx_hash = 1;
void Utxo::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Utxo::tx_hash() const {
  // @@protoc_insertion_point(field_get:btcapi.Utxo.tx_hash)
  return tx_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Utxo::set_tx_hash(const ::std::string& value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.Utxo.tx_hash)
}
void Utxo::set_tx_hash(const char* value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.Utxo.tx_hash)
}
void Utxo::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.Utxo.tx_hash)
}
::std::string* Utxo::mutable_tx_hash() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.Utxo.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Utxo::release_tx_hash() {
  // @@protoc_insertion_point(field_release:btcapi.Utxo.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Utxo::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:btcapi.Utxo.tx_hash)
}

// optional int32 vout = 2;
void Utxo::clear_vout() {
  vout_ = 0;
}
::google::protobuf::int32 Utxo::vout() const {
  // @@protoc_insertion_point(field_get:btcapi.Utxo.vout)
  return vout_;
}
void Utxo::set_vout(::google::protobuf::int32 value) {
  
  vout_ = value;
  // @@protoc_insertion_point(field_set:btcapi.Utxo.vout)
}

// optional int64 amount = 3;
void Utxo::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Utxo::amount() const {
  // @@protoc_insertion_point(field_get:btcapi.Utxo.amount)
  return amount_;
}
void Utxo::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:btcapi.Utxo.amount)
}

// optional string address = 4;
void Utxo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Utxo::address() const {
  // @@protoc_insertion_point(field_get:btcapi.Utxo.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Utxo::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.Utxo.address)
}
void Utxo::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.Utxo.address)
}
void Utxo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.Utxo.address)
}
::std::string* Utxo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.Utxo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Utxo::release_address() {
  // @@protoc_insertion_point(field_release:btcapi.Utxo.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Utxo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:btcapi.Utxo.address)
}

// optional string script_pubKey = 5;
void Utxo::clear_script_pubkey() {
  script_pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Utxo::script_pubkey() const {
  // @@protoc_insertion_point(field_get:btcapi.Utxo.script_pubKey)
  return script_pubkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Utxo::set_script_pubkey(const ::std::string& value) {
  
  script_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.Utxo.script_pubKey)
}
void Utxo::set_script_pubkey(const char* value) {
  
  script_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.Utxo.script_pubKey)
}
void Utxo::set_script_pubkey(const char* value, size_t size) {
  
  script_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.Utxo.script_pubKey)
}
::std::string* Utxo::mutable_script_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.Utxo.script_pubKey)
  return script_pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Utxo::release_script_pubkey() {
  // @@protoc_insertion_point(field_release:btcapi.Utxo.script_pubKey)
  
  return script_pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Utxo::set_allocated_script_pubkey(::std::string* script_pubkey) {
  if (script_pubkey != NULL) {
    
  } else {
    
  }
  script_pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script_pubkey);
  // @@protoc_insertion_point(field_set_allocated:btcapi.Utxo.script_pubKey)
}

// optional string derived_path = 6;
void Utxo::clear_derived_path() {
  derived_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Utxo::derived_path() const {
  // @@protoc_insertion_point(field_get:btcapi.Utxo.derived_path)
  return derived_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Utxo::set_derived_path(const ::std::string& value) {
  
  derived_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.Utxo.derived_path)
}
void Utxo::set_derived_path(const char* value) {
  
  derived_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.Utxo.derived_path)
}
void Utxo::set_derived_path(const char* value, size_t size) {
  
  derived_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.Utxo.derived_path)
}
::std::string* Utxo::mutable_derived_path() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.Utxo.derived_path)
  return derived_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Utxo::release_derived_path() {
  // @@protoc_insertion_point(field_release:btcapi.Utxo.derived_path)
  
  return derived_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Utxo::set_allocated_derived_path(::std::string* derived_path) {
  if (derived_path != NULL) {
    
  } else {
    
  }
  derived_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), derived_path);
  // @@protoc_insertion_point(field_set_allocated:btcapi.Utxo.derived_path)
}

// optional int64 sequence = 7;
void Utxo::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Utxo::sequence() const {
  // @@protoc_insertion_point(field_get:btcapi.Utxo.sequence)
  return sequence_;
}
void Utxo::set_sequence(::google::protobuf::int64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:btcapi.Utxo.sequence)
}

inline const Utxo* Utxo::internal_default_instance() {
  return &Utxo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BtcTxReq::kToFieldNumber;
const int BtcTxReq::kAmountFieldNumber;
const int BtcTxReq::kFeeFieldNumber;
const int BtcTxReq::kChangeAddressIndexFieldNumber;
const int BtcTxReq::kUnspentsFieldNumber;
const int BtcTxReq::kExtraDataFieldNumber;
const int BtcTxReq::kPropertyIdFieldNumber;
const int BtcTxReq::kNetworkFieldNumber;
const int BtcTxReq::kPathPrefixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BtcTxReq::BtcTxReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_btc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:btcapi.BtcTxReq)
}

void BtcTxReq::InitAsDefaultInstance() {
}

BtcTxReq::BtcTxReq(const BtcTxReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:btcapi.BtcTxReq)
}

void BtcTxReq::SharedCtor() {
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, reinterpret_cast<char*>(&property_id_) -
    reinterpret_cast<char*>(&amount_) + sizeof(property_id_));
  _cached_size_ = 0;
}

BtcTxReq::~BtcTxReq() {
  // @@protoc_insertion_point(destructor:btcapi.BtcTxReq)
  SharedDtor();
}

void BtcTxReq::SharedDtor() {
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BtcTxReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtcTxReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtcTxReq_descriptor_;
}

const BtcTxReq& BtcTxReq::default_instance() {
  protobuf_InitDefaults_btc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BtcTxReq> BtcTxReq_default_instance_;

BtcTxReq* BtcTxReq::New(::google::protobuf::Arena* arena) const {
  BtcTxReq* n = new BtcTxReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BtcTxReq::Clear() {
// @@protoc_insertion_point(message_clear_start:btcapi.BtcTxReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BtcTxReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BtcTxReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(amount_, property_id_);
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  unspents_.Clear();
}

bool BtcTxReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:btcapi.BtcTxReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string to = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.BtcTxReq.to"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional int64 amount = 2;
      case 2: {
        if (tag == 16) {
         parse_amount:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fee;
        break;
      }

      // optional int64 fee = 3;
      case 3: {
        if (tag == 24) {
         parse_fee:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fee_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_change_address_index;
        break;
      }

      // optional uint32 change_address_index = 4;
      case 4: {
        if (tag == 32) {
         parse_change_address_index:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_address_index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_unspents;
        break;
      }

      // repeated .btcapi.Utxo unspents = 5;
      case 5: {
        if (tag == 42) {
         parse_unspents:
          DO_(input->IncrementRecursionDepth());
         parse_loop_unspents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_unspents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_unspents;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_extra_data;
        break;
      }

      // optional bytes extra_data = 6;
      case 6: {
        if (tag == 50) {
         parse_extra_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_property_id;
        break;
      }

      // optional int32 property_id = 7;
      case 7: {
        if (tag == 56) {
         parse_property_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_network;
        break;
      }

      // optional string network = 8;
      case 8: {
        if (tag == 66) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.BtcTxReq.network"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_path_prefix;
        break;
      }

      // optional string path_prefix = 9;
      case 9: {
        if (tag == 74) {
         parse_path_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path_prefix().data(), this->path_prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.BtcTxReq.path_prefix"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:btcapi.BtcTxReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:btcapi.BtcTxReq)
  return false;
#undef DO_
}

void BtcTxReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:btcapi.BtcTxReq)
  // optional string to = 1;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcTxReq.to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->to(), output);
  }

  // optional int64 amount = 2;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->amount(), output);
  }

  // optional int64 fee = 3;
  if (this->fee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->fee(), output);
  }

  // optional uint32 change_address_index = 4;
  if (this->change_address_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->change_address_index(), output);
  }

  // repeated .btcapi.Utxo unspents = 5;
  for (unsigned int i = 0, n = this->unspents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->unspents(i), output);
  }

  // optional bytes extra_data = 6;
  if (this->extra_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->extra_data(), output);
  }

  // optional int32 property_id = 7;
  if (this->property_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->property_id(), output);
  }

  // optional string network = 8;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcTxReq.network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->network(), output);
  }

  // optional string path_prefix = 9;
  if (this->path_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path_prefix().data(), this->path_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcTxReq.path_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->path_prefix(), output);
  }

  // @@protoc_insertion_point(serialize_end:btcapi.BtcTxReq)
}

::google::protobuf::uint8* BtcTxReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:btcapi.BtcTxReq)
  // optional string to = 1;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcTxReq.to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->to(), target);
  }

  // optional int64 amount = 2;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->amount(), target);
  }

  // optional int64 fee = 3;
  if (this->fee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->fee(), target);
  }

  // optional uint32 change_address_index = 4;
  if (this->change_address_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->change_address_index(), target);
  }

  // repeated .btcapi.Utxo unspents = 5;
  for (unsigned int i = 0, n = this->unspents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->unspents(i), false, target);
  }

  // optional bytes extra_data = 6;
  if (this->extra_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->extra_data(), target);
  }

  // optional int32 property_id = 7;
  if (this->property_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->property_id(), target);
  }

  // optional string network = 8;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcTxReq.network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->network(), target);
  }

  // optional string path_prefix = 9;
  if (this->path_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path_prefix().data(), this->path_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcTxReq.path_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->path_prefix(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:btcapi.BtcTxReq)
  return target;
}

size_t BtcTxReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:btcapi.BtcTxReq)
  size_t total_size = 0;

  // optional string to = 1;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to());
  }

  // optional int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->amount());
  }

  // optional int64 fee = 3;
  if (this->fee() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fee());
  }

  // optional uint32 change_address_index = 4;
  if (this->change_address_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->change_address_index());
  }

  // optional bytes extra_data = 6;
  if (this->extra_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->extra_data());
  }

  // optional int32 property_id = 7;
  if (this->property_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->property_id());
  }

  // optional string network = 8;
  if (this->network().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->network());
  }

  // optional string path_prefix = 9;
  if (this->path_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path_prefix());
  }

  // repeated .btcapi.Utxo unspents = 5;
  {
    unsigned int count = this->unspents_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unspents(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtcTxReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:btcapi.BtcTxReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BtcTxReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BtcTxReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:btcapi.BtcTxReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:btcapi.BtcTxReq)
    UnsafeMergeFrom(*source);
  }
}

void BtcTxReq::MergeFrom(const BtcTxReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:btcapi.BtcTxReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BtcTxReq::UnsafeMergeFrom(const BtcTxReq& from) {
  GOOGLE_DCHECK(&from != this);
  unspents_.MergeFrom(from.unspents_);
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.fee() != 0) {
    set_fee(from.fee());
  }
  if (from.change_address_index() != 0) {
    set_change_address_index(from.change_address_index());
  }
  if (from.extra_data().size() > 0) {

    extra_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_data_);
  }
  if (from.property_id() != 0) {
    set_property_id(from.property_id());
  }
  if (from.network().size() > 0) {

    network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
  if (from.path_prefix().size() > 0) {

    path_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_prefix_);
  }
}

void BtcTxReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:btcapi.BtcTxReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtcTxReq::CopyFrom(const BtcTxReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:btcapi.BtcTxReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BtcTxReq::IsInitialized() const {

  return true;
}

void BtcTxReq::Swap(BtcTxReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BtcTxReq::InternalSwap(BtcTxReq* other) {
  to_.Swap(&other->to_);
  std::swap(amount_, other->amount_);
  std::swap(fee_, other->fee_);
  std::swap(change_address_index_, other->change_address_index_);
  unspents_.UnsafeArenaSwap(&other->unspents_);
  extra_data_.Swap(&other->extra_data_);
  std::swap(property_id_, other->property_id_);
  network_.Swap(&other->network_);
  path_prefix_.Swap(&other->path_prefix_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BtcTxReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtcTxReq_descriptor_;
  metadata.reflection = BtcTxReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BtcTxReq

// optional string to = 1;
void BtcTxReq::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcTxReq::to() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcTxReq::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcTxReq.to)
}
void BtcTxReq::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcTxReq.to)
}
void BtcTxReq::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcTxReq.to)
}
::std::string* BtcTxReq::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcTxReq.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcTxReq::release_to() {
  // @@protoc_insertion_point(field_release:btcapi.BtcTxReq.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcTxReq::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcTxReq.to)
}

// optional int64 amount = 2;
void BtcTxReq::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 BtcTxReq::amount() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.amount)
  return amount_;
}
void BtcTxReq::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:btcapi.BtcTxReq.amount)
}

// optional int64 fee = 3;
void BtcTxReq::clear_fee() {
  fee_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 BtcTxReq::fee() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.fee)
  return fee_;
}
void BtcTxReq::set_fee(::google::protobuf::int64 value) {
  
  fee_ = value;
  // @@protoc_insertion_point(field_set:btcapi.BtcTxReq.fee)
}

// optional uint32 change_address_index = 4;
void BtcTxReq::clear_change_address_index() {
  change_address_index_ = 0u;
}
::google::protobuf::uint32 BtcTxReq::change_address_index() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.change_address_index)
  return change_address_index_;
}
void BtcTxReq::set_change_address_index(::google::protobuf::uint32 value) {
  
  change_address_index_ = value;
  // @@protoc_insertion_point(field_set:btcapi.BtcTxReq.change_address_index)
}

// repeated .btcapi.Utxo unspents = 5;
int BtcTxReq::unspents_size() const {
  return unspents_.size();
}
void BtcTxReq::clear_unspents() {
  unspents_.Clear();
}
const ::btcapi::Utxo& BtcTxReq::unspents(int index) const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.unspents)
  return unspents_.Get(index);
}
::btcapi::Utxo* BtcTxReq::mutable_unspents(int index) {
  // @@protoc_insertion_point(field_mutable:btcapi.BtcTxReq.unspents)
  return unspents_.Mutable(index);
}
::btcapi::Utxo* BtcTxReq::add_unspents() {
  // @@protoc_insertion_point(field_add:btcapi.BtcTxReq.unspents)
  return unspents_.Add();
}
::google::protobuf::RepeatedPtrField< ::btcapi::Utxo >*
BtcTxReq::mutable_unspents() {
  // @@protoc_insertion_point(field_mutable_list:btcapi.BtcTxReq.unspents)
  return &unspents_;
}
const ::google::protobuf::RepeatedPtrField< ::btcapi::Utxo >&
BtcTxReq::unspents() const {
  // @@protoc_insertion_point(field_list:btcapi.BtcTxReq.unspents)
  return unspents_;
}

// optional bytes extra_data = 6;
void BtcTxReq::clear_extra_data() {
  extra_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcTxReq::extra_data() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.extra_data)
  return extra_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcTxReq::set_extra_data(const ::std::string& value) {
  
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcTxReq.extra_data)
}
void BtcTxReq::set_extra_data(const char* value) {
  
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcTxReq.extra_data)
}
void BtcTxReq::set_extra_data(const void* value, size_t size) {
  
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcTxReq.extra_data)
}
::std::string* BtcTxReq::mutable_extra_data() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcTxReq.extra_data)
  return extra_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcTxReq::release_extra_data() {
  // @@protoc_insertion_point(field_release:btcapi.BtcTxReq.extra_data)
  
  return extra_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcTxReq::set_allocated_extra_data(::std::string* extra_data) {
  if (extra_data != NULL) {
    
  } else {
    
  }
  extra_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra_data);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcTxReq.extra_data)
}

// optional int32 property_id = 7;
void BtcTxReq::clear_property_id() {
  property_id_ = 0;
}
::google::protobuf::int32 BtcTxReq::property_id() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.property_id)
  return property_id_;
}
void BtcTxReq::set_property_id(::google::protobuf::int32 value) {
  
  property_id_ = value;
  // @@protoc_insertion_point(field_set:btcapi.BtcTxReq.property_id)
}

// optional string network = 8;
void BtcTxReq::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcTxReq::network() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.network)
  return network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcTxReq::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcTxReq.network)
}
void BtcTxReq::set_network(const char* value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcTxReq.network)
}
void BtcTxReq::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcTxReq.network)
}
::std::string* BtcTxReq::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcTxReq.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcTxReq::release_network() {
  // @@protoc_insertion_point(field_release:btcapi.BtcTxReq.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcTxReq::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcTxReq.network)
}

// optional string path_prefix = 9;
void BtcTxReq::clear_path_prefix() {
  path_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcTxReq::path_prefix() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxReq.path_prefix)
  return path_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcTxReq::set_path_prefix(const ::std::string& value) {
  
  path_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcTxReq.path_prefix)
}
void BtcTxReq::set_path_prefix(const char* value) {
  
  path_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcTxReq.path_prefix)
}
void BtcTxReq::set_path_prefix(const char* value, size_t size) {
  
  path_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcTxReq.path_prefix)
}
::std::string* BtcTxReq::mutable_path_prefix() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcTxReq.path_prefix)
  return path_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcTxReq::release_path_prefix() {
  // @@protoc_insertion_point(field_release:btcapi.BtcTxReq.path_prefix)
  
  return path_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcTxReq::set_allocated_path_prefix(::std::string* path_prefix) {
  if (path_prefix != NULL) {
    
  } else {
    
  }
  path_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path_prefix);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcTxReq.path_prefix)
}

inline const BtcTxReq* BtcTxReq::internal_default_instance() {
  return &BtcTxReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BtcTxRes::kTxDataFieldNumber;
const int BtcTxRes::kTxHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BtcTxRes::BtcTxRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_btc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:btcapi.BtcTxRes)
}

void BtcTxRes::InitAsDefaultInstance() {
}

BtcTxRes::BtcTxRes(const BtcTxRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:btcapi.BtcTxRes)
}

void BtcTxRes::SharedCtor() {
  tx_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BtcTxRes::~BtcTxRes() {
  // @@protoc_insertion_point(destructor:btcapi.BtcTxRes)
  SharedDtor();
}

void BtcTxRes::SharedDtor() {
  tx_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BtcTxRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtcTxRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtcTxRes_descriptor_;
}

const BtcTxRes& BtcTxRes::default_instance() {
  protobuf_InitDefaults_btc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BtcTxRes> BtcTxRes_default_instance_;

BtcTxRes* BtcTxRes::New(::google::protobuf::Arena* arena) const {
  BtcTxRes* n = new BtcTxRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BtcTxRes::Clear() {
// @@protoc_insertion_point(message_clear_start:btcapi.BtcTxRes)
  tx_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BtcTxRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:btcapi.BtcTxRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tx_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tx_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tx_data().data(), this->tx_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.BtcTxRes.tx_data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tx_hash;
        break;
      }

      // optional string tx_hash = 2;
      case 2: {
        if (tag == 18) {
         parse_tx_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tx_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tx_hash().data(), this->tx_hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.BtcTxRes.tx_hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:btcapi.BtcTxRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:btcapi.BtcTxRes)
  return false;
#undef DO_
}

void BtcTxRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:btcapi.BtcTxRes)
  // optional string tx_data = 1;
  if (this->tx_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_data().data(), this->tx_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcTxRes.tx_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tx_data(), output);
  }

  // optional string tx_hash = 2;
  if (this->tx_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_hash().data(), this->tx_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcTxRes.tx_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tx_hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:btcapi.BtcTxRes)
}

::google::protobuf::uint8* BtcTxRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:btcapi.BtcTxRes)
  // optional string tx_data = 1;
  if (this->tx_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_data().data(), this->tx_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcTxRes.tx_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tx_data(), target);
  }

  // optional string tx_hash = 2;
  if (this->tx_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_hash().data(), this->tx_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcTxRes.tx_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tx_hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:btcapi.BtcTxRes)
  return target;
}

size_t BtcTxRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:btcapi.BtcTxRes)
  size_t total_size = 0;

  // optional string tx_data = 1;
  if (this->tx_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tx_data());
  }

  // optional string tx_hash = 2;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tx_hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtcTxRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:btcapi.BtcTxRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BtcTxRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BtcTxRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:btcapi.BtcTxRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:btcapi.BtcTxRes)
    UnsafeMergeFrom(*source);
  }
}

void BtcTxRes::MergeFrom(const BtcTxRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:btcapi.BtcTxRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BtcTxRes::UnsafeMergeFrom(const BtcTxRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.tx_data().size() > 0) {

    tx_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_data_);
  }
  if (from.tx_hash().size() > 0) {

    tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
}

void BtcTxRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:btcapi.BtcTxRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtcTxRes::CopyFrom(const BtcTxRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:btcapi.BtcTxRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BtcTxRes::IsInitialized() const {

  return true;
}

void BtcTxRes::Swap(BtcTxRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BtcTxRes::InternalSwap(BtcTxRes* other) {
  tx_data_.Swap(&other->tx_data_);
  tx_hash_.Swap(&other->tx_hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BtcTxRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtcTxRes_descriptor_;
  metadata.reflection = BtcTxRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BtcTxRes

// optional string tx_data = 1;
void BtcTxRes::clear_tx_data() {
  tx_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcTxRes::tx_data() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxRes.tx_data)
  return tx_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcTxRes::set_tx_data(const ::std::string& value) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcTxRes.tx_data)
}
void BtcTxRes::set_tx_data(const char* value) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcTxRes.tx_data)
}
void BtcTxRes::set_tx_data(const char* value, size_t size) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcTxRes.tx_data)
}
::std::string* BtcTxRes::mutable_tx_data() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcTxRes.tx_data)
  return tx_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcTxRes::release_tx_data() {
  // @@protoc_insertion_point(field_release:btcapi.BtcTxRes.tx_data)
  
  return tx_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcTxRes::set_allocated_tx_data(::std::string* tx_data) {
  if (tx_data != NULL) {
    
  } else {
    
  }
  tx_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_data);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcTxRes.tx_data)
}

// optional string tx_hash = 2;
void BtcTxRes::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcTxRes::tx_hash() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcTxRes.tx_hash)
  return tx_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcTxRes::set_tx_hash(const ::std::string& value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcTxRes.tx_hash)
}
void BtcTxRes::set_tx_hash(const char* value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcTxRes.tx_hash)
}
void BtcTxRes::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcTxRes.tx_hash)
}
::std::string* BtcTxRes::mutable_tx_hash() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcTxRes.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcTxRes::release_tx_hash() {
  // @@protoc_insertion_point(field_release:btcapi.BtcTxRes.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcTxRes::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcTxRes.tx_hash)
}

inline const BtcTxRes* BtcTxRes::internal_default_instance() {
  return &BtcTxRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BtcSegwitTxReq::kToFieldNumber;
const int BtcSegwitTxReq::kAmountFieldNumber;
const int BtcSegwitTxReq::kFeeFieldNumber;
const int BtcSegwitTxReq::kChangeAddressIndexFieldNumber;
const int BtcSegwitTxReq::kUnspentsFieldNumber;
const int BtcSegwitTxReq::kExtraDataFieldNumber;
const int BtcSegwitTxReq::kPropertyIdFieldNumber;
const int BtcSegwitTxReq::kNetworkFieldNumber;
const int BtcSegwitTxReq::kPathPrefixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BtcSegwitTxReq::BtcSegwitTxReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_btc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:btcapi.BtcSegwitTxReq)
}

void BtcSegwitTxReq::InitAsDefaultInstance() {
}

BtcSegwitTxReq::BtcSegwitTxReq(const BtcSegwitTxReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:btcapi.BtcSegwitTxReq)
}

void BtcSegwitTxReq::SharedCtor() {
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, reinterpret_cast<char*>(&property_id_) -
    reinterpret_cast<char*>(&amount_) + sizeof(property_id_));
  _cached_size_ = 0;
}

BtcSegwitTxReq::~BtcSegwitTxReq() {
  // @@protoc_insertion_point(destructor:btcapi.BtcSegwitTxReq)
  SharedDtor();
}

void BtcSegwitTxReq::SharedDtor() {
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BtcSegwitTxReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtcSegwitTxReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtcSegwitTxReq_descriptor_;
}

const BtcSegwitTxReq& BtcSegwitTxReq::default_instance() {
  protobuf_InitDefaults_btc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BtcSegwitTxReq> BtcSegwitTxReq_default_instance_;

BtcSegwitTxReq* BtcSegwitTxReq::New(::google::protobuf::Arena* arena) const {
  BtcSegwitTxReq* n = new BtcSegwitTxReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BtcSegwitTxReq::Clear() {
// @@protoc_insertion_point(message_clear_start:btcapi.BtcSegwitTxReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BtcSegwitTxReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BtcSegwitTxReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(amount_, property_id_);
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  unspents_.Clear();
}

bool BtcSegwitTxReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:btcapi.BtcSegwitTxReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string to = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.BtcSegwitTxReq.to"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional int64 amount = 2;
      case 2: {
        if (tag == 16) {
         parse_amount:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fee;
        break;
      }

      // optional int64 fee = 3;
      case 3: {
        if (tag == 24) {
         parse_fee:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fee_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_change_address_index;
        break;
      }

      // optional uint32 change_address_index = 4;
      case 4: {
        if (tag == 32) {
         parse_change_address_index:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_address_index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_unspents;
        break;
      }

      // repeated .btcapi.Utxo unspents = 5;
      case 5: {
        if (tag == 42) {
         parse_unspents:
          DO_(input->IncrementRecursionDepth());
         parse_loop_unspents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_unspents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_unspents;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_extra_data;
        break;
      }

      // optional bytes extra_data = 6;
      case 6: {
        if (tag == 50) {
         parse_extra_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_property_id;
        break;
      }

      // optional int32 property_id = 7;
      case 7: {
        if (tag == 56) {
         parse_property_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_network;
        break;
      }

      // optional string network = 8;
      case 8: {
        if (tag == 66) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.BtcSegwitTxReq.network"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_path_prefix;
        break;
      }

      // optional string path_prefix = 9;
      case 9: {
        if (tag == 74) {
         parse_path_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path_prefix().data(), this->path_prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.BtcSegwitTxReq.path_prefix"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:btcapi.BtcSegwitTxReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:btcapi.BtcSegwitTxReq)
  return false;
#undef DO_
}

void BtcSegwitTxReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:btcapi.BtcSegwitTxReq)
  // optional string to = 1;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcSegwitTxReq.to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->to(), output);
  }

  // optional int64 amount = 2;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->amount(), output);
  }

  // optional int64 fee = 3;
  if (this->fee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->fee(), output);
  }

  // optional uint32 change_address_index = 4;
  if (this->change_address_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->change_address_index(), output);
  }

  // repeated .btcapi.Utxo unspents = 5;
  for (unsigned int i = 0, n = this->unspents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->unspents(i), output);
  }

  // optional bytes extra_data = 6;
  if (this->extra_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->extra_data(), output);
  }

  // optional int32 property_id = 7;
  if (this->property_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->property_id(), output);
  }

  // optional string network = 8;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcSegwitTxReq.network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->network(), output);
  }

  // optional string path_prefix = 9;
  if (this->path_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path_prefix().data(), this->path_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcSegwitTxReq.path_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->path_prefix(), output);
  }

  // @@protoc_insertion_point(serialize_end:btcapi.BtcSegwitTxReq)
}

::google::protobuf::uint8* BtcSegwitTxReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:btcapi.BtcSegwitTxReq)
  // optional string to = 1;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcSegwitTxReq.to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->to(), target);
  }

  // optional int64 amount = 2;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->amount(), target);
  }

  // optional int64 fee = 3;
  if (this->fee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->fee(), target);
  }

  // optional uint32 change_address_index = 4;
  if (this->change_address_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->change_address_index(), target);
  }

  // repeated .btcapi.Utxo unspents = 5;
  for (unsigned int i = 0, n = this->unspents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->unspents(i), false, target);
  }

  // optional bytes extra_data = 6;
  if (this->extra_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->extra_data(), target);
  }

  // optional int32 property_id = 7;
  if (this->property_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->property_id(), target);
  }

  // optional string network = 8;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcSegwitTxReq.network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->network(), target);
  }

  // optional string path_prefix = 9;
  if (this->path_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path_prefix().data(), this->path_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcSegwitTxReq.path_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->path_prefix(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:btcapi.BtcSegwitTxReq)
  return target;
}

size_t BtcSegwitTxReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:btcapi.BtcSegwitTxReq)
  size_t total_size = 0;

  // optional string to = 1;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to());
  }

  // optional int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->amount());
  }

  // optional int64 fee = 3;
  if (this->fee() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fee());
  }

  // optional uint32 change_address_index = 4;
  if (this->change_address_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->change_address_index());
  }

  // optional bytes extra_data = 6;
  if (this->extra_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->extra_data());
  }

  // optional int32 property_id = 7;
  if (this->property_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->property_id());
  }

  // optional string network = 8;
  if (this->network().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->network());
  }

  // optional string path_prefix = 9;
  if (this->path_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path_prefix());
  }

  // repeated .btcapi.Utxo unspents = 5;
  {
    unsigned int count = this->unspents_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unspents(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtcSegwitTxReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:btcapi.BtcSegwitTxReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BtcSegwitTxReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BtcSegwitTxReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:btcapi.BtcSegwitTxReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:btcapi.BtcSegwitTxReq)
    UnsafeMergeFrom(*source);
  }
}

void BtcSegwitTxReq::MergeFrom(const BtcSegwitTxReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:btcapi.BtcSegwitTxReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BtcSegwitTxReq::UnsafeMergeFrom(const BtcSegwitTxReq& from) {
  GOOGLE_DCHECK(&from != this);
  unspents_.MergeFrom(from.unspents_);
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.fee() != 0) {
    set_fee(from.fee());
  }
  if (from.change_address_index() != 0) {
    set_change_address_index(from.change_address_index());
  }
  if (from.extra_data().size() > 0) {

    extra_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_data_);
  }
  if (from.property_id() != 0) {
    set_property_id(from.property_id());
  }
  if (from.network().size() > 0) {

    network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
  if (from.path_prefix().size() > 0) {

    path_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_prefix_);
  }
}

void BtcSegwitTxReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:btcapi.BtcSegwitTxReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtcSegwitTxReq::CopyFrom(const BtcSegwitTxReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:btcapi.BtcSegwitTxReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BtcSegwitTxReq::IsInitialized() const {

  return true;
}

void BtcSegwitTxReq::Swap(BtcSegwitTxReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BtcSegwitTxReq::InternalSwap(BtcSegwitTxReq* other) {
  to_.Swap(&other->to_);
  std::swap(amount_, other->amount_);
  std::swap(fee_, other->fee_);
  std::swap(change_address_index_, other->change_address_index_);
  unspents_.UnsafeArenaSwap(&other->unspents_);
  extra_data_.Swap(&other->extra_data_);
  std::swap(property_id_, other->property_id_);
  network_.Swap(&other->network_);
  path_prefix_.Swap(&other->path_prefix_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BtcSegwitTxReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtcSegwitTxReq_descriptor_;
  metadata.reflection = BtcSegwitTxReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BtcSegwitTxReq

// optional string to = 1;
void BtcSegwitTxReq::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcSegwitTxReq::to() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcSegwitTxReq::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxReq.to)
}
void BtcSegwitTxReq::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcSegwitTxReq.to)
}
void BtcSegwitTxReq::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcSegwitTxReq.to)
}
::std::string* BtcSegwitTxReq::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcSegwitTxReq.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcSegwitTxReq::release_to() {
  // @@protoc_insertion_point(field_release:btcapi.BtcSegwitTxReq.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcSegwitTxReq::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcSegwitTxReq.to)
}

// optional int64 amount = 2;
void BtcSegwitTxReq::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 BtcSegwitTxReq::amount() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.amount)
  return amount_;
}
void BtcSegwitTxReq::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxReq.amount)
}

// optional int64 fee = 3;
void BtcSegwitTxReq::clear_fee() {
  fee_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 BtcSegwitTxReq::fee() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.fee)
  return fee_;
}
void BtcSegwitTxReq::set_fee(::google::protobuf::int64 value) {
  
  fee_ = value;
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxReq.fee)
}

// optional uint32 change_address_index = 4;
void BtcSegwitTxReq::clear_change_address_index() {
  change_address_index_ = 0u;
}
::google::protobuf::uint32 BtcSegwitTxReq::change_address_index() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.change_address_index)
  return change_address_index_;
}
void BtcSegwitTxReq::set_change_address_index(::google::protobuf::uint32 value) {
  
  change_address_index_ = value;
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxReq.change_address_index)
}

// repeated .btcapi.Utxo unspents = 5;
int BtcSegwitTxReq::unspents_size() const {
  return unspents_.size();
}
void BtcSegwitTxReq::clear_unspents() {
  unspents_.Clear();
}
const ::btcapi::Utxo& BtcSegwitTxReq::unspents(int index) const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.unspents)
  return unspents_.Get(index);
}
::btcapi::Utxo* BtcSegwitTxReq::mutable_unspents(int index) {
  // @@protoc_insertion_point(field_mutable:btcapi.BtcSegwitTxReq.unspents)
  return unspents_.Mutable(index);
}
::btcapi::Utxo* BtcSegwitTxReq::add_unspents() {
  // @@protoc_insertion_point(field_add:btcapi.BtcSegwitTxReq.unspents)
  return unspents_.Add();
}
::google::protobuf::RepeatedPtrField< ::btcapi::Utxo >*
BtcSegwitTxReq::mutable_unspents() {
  // @@protoc_insertion_point(field_mutable_list:btcapi.BtcSegwitTxReq.unspents)
  return &unspents_;
}
const ::google::protobuf::RepeatedPtrField< ::btcapi::Utxo >&
BtcSegwitTxReq::unspents() const {
  // @@protoc_insertion_point(field_list:btcapi.BtcSegwitTxReq.unspents)
  return unspents_;
}

// optional bytes extra_data = 6;
void BtcSegwitTxReq::clear_extra_data() {
  extra_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcSegwitTxReq::extra_data() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.extra_data)
  return extra_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcSegwitTxReq::set_extra_data(const ::std::string& value) {
  
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxReq.extra_data)
}
void BtcSegwitTxReq::set_extra_data(const char* value) {
  
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcSegwitTxReq.extra_data)
}
void BtcSegwitTxReq::set_extra_data(const void* value, size_t size) {
  
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcSegwitTxReq.extra_data)
}
::std::string* BtcSegwitTxReq::mutable_extra_data() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcSegwitTxReq.extra_data)
  return extra_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcSegwitTxReq::release_extra_data() {
  // @@protoc_insertion_point(field_release:btcapi.BtcSegwitTxReq.extra_data)
  
  return extra_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcSegwitTxReq::set_allocated_extra_data(::std::string* extra_data) {
  if (extra_data != NULL) {
    
  } else {
    
  }
  extra_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra_data);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcSegwitTxReq.extra_data)
}

// optional int32 property_id = 7;
void BtcSegwitTxReq::clear_property_id() {
  property_id_ = 0;
}
::google::protobuf::int32 BtcSegwitTxReq::property_id() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.property_id)
  return property_id_;
}
void BtcSegwitTxReq::set_property_id(::google::protobuf::int32 value) {
  
  property_id_ = value;
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxReq.property_id)
}

// optional string network = 8;
void BtcSegwitTxReq::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcSegwitTxReq::network() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.network)
  return network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcSegwitTxReq::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxReq.network)
}
void BtcSegwitTxReq::set_network(const char* value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcSegwitTxReq.network)
}
void BtcSegwitTxReq::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcSegwitTxReq.network)
}
::std::string* BtcSegwitTxReq::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcSegwitTxReq.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcSegwitTxReq::release_network() {
  // @@protoc_insertion_point(field_release:btcapi.BtcSegwitTxReq.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcSegwitTxReq::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcSegwitTxReq.network)
}

// optional string path_prefix = 9;
void BtcSegwitTxReq::clear_path_prefix() {
  path_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcSegwitTxReq::path_prefix() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxReq.path_prefix)
  return path_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcSegwitTxReq::set_path_prefix(const ::std::string& value) {
  
  path_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxReq.path_prefix)
}
void BtcSegwitTxReq::set_path_prefix(const char* value) {
  
  path_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcSegwitTxReq.path_prefix)
}
void BtcSegwitTxReq::set_path_prefix(const char* value, size_t size) {
  
  path_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcSegwitTxReq.path_prefix)
}
::std::string* BtcSegwitTxReq::mutable_path_prefix() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcSegwitTxReq.path_prefix)
  return path_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcSegwitTxReq::release_path_prefix() {
  // @@protoc_insertion_point(field_release:btcapi.BtcSegwitTxReq.path_prefix)
  
  return path_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcSegwitTxReq::set_allocated_path_prefix(::std::string* path_prefix) {
  if (path_prefix != NULL) {
    
  } else {
    
  }
  path_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path_prefix);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcSegwitTxReq.path_prefix)
}

inline const BtcSegwitTxReq* BtcSegwitTxReq::internal_default_instance() {
  return &BtcSegwitTxReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BtcSegwitTxRes::kWitnessTxDataFieldNumber;
const int BtcSegwitTxRes::kWtxHashFieldNumber;
const int BtcSegwitTxRes::kTxHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BtcSegwitTxRes::BtcSegwitTxRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_btc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:btcapi.BtcSegwitTxRes)
}

void BtcSegwitTxRes::InitAsDefaultInstance() {
}

BtcSegwitTxRes::BtcSegwitTxRes(const BtcSegwitTxRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:btcapi.BtcSegwitTxRes)
}

void BtcSegwitTxRes::SharedCtor() {
  witness_tx_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wtx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BtcSegwitTxRes::~BtcSegwitTxRes() {
  // @@protoc_insertion_point(destructor:btcapi.BtcSegwitTxRes)
  SharedDtor();
}

void BtcSegwitTxRes::SharedDtor() {
  witness_tx_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wtx_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BtcSegwitTxRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtcSegwitTxRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtcSegwitTxRes_descriptor_;
}

const BtcSegwitTxRes& BtcSegwitTxRes::default_instance() {
  protobuf_InitDefaults_btc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BtcSegwitTxRes> BtcSegwitTxRes_default_instance_;

BtcSegwitTxRes* BtcSegwitTxRes::New(::google::protobuf::Arena* arena) const {
  BtcSegwitTxRes* n = new BtcSegwitTxRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BtcSegwitTxRes::Clear() {
// @@protoc_insertion_point(message_clear_start:btcapi.BtcSegwitTxRes)
  witness_tx_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wtx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BtcSegwitTxRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:btcapi.BtcSegwitTxRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string witness_tx_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_witness_tx_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->witness_tx_data().data(), this->witness_tx_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.BtcSegwitTxRes.witness_tx_data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wtx_hash;
        break;
      }

      // optional string wtx_hash = 2;
      case 2: {
        if (tag == 18) {
         parse_wtx_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wtx_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->wtx_hash().data(), this->wtx_hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.BtcSegwitTxRes.wtx_hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tx_hash;
        break;
      }

      // optional string tx_hash = 3;
      case 3: {
        if (tag == 26) {
         parse_tx_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tx_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tx_hash().data(), this->tx_hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.BtcSegwitTxRes.tx_hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:btcapi.BtcSegwitTxRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:btcapi.BtcSegwitTxRes)
  return false;
#undef DO_
}

void BtcSegwitTxRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:btcapi.BtcSegwitTxRes)
  // optional string witness_tx_data = 1;
  if (this->witness_tx_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->witness_tx_data().data(), this->witness_tx_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcSegwitTxRes.witness_tx_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->witness_tx_data(), output);
  }

  // optional string wtx_hash = 2;
  if (this->wtx_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wtx_hash().data(), this->wtx_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcSegwitTxRes.wtx_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->wtx_hash(), output);
  }

  // optional string tx_hash = 3;
  if (this->tx_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_hash().data(), this->tx_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcSegwitTxRes.tx_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tx_hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:btcapi.BtcSegwitTxRes)
}

::google::protobuf::uint8* BtcSegwitTxRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:btcapi.BtcSegwitTxRes)
  // optional string witness_tx_data = 1;
  if (this->witness_tx_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->witness_tx_data().data(), this->witness_tx_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcSegwitTxRes.witness_tx_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->witness_tx_data(), target);
  }

  // optional string wtx_hash = 2;
  if (this->wtx_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wtx_hash().data(), this->wtx_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcSegwitTxRes.wtx_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wtx_hash(), target);
  }

  // optional string tx_hash = 3;
  if (this->tx_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_hash().data(), this->tx_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcSegwitTxRes.tx_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tx_hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:btcapi.BtcSegwitTxRes)
  return target;
}

size_t BtcSegwitTxRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:btcapi.BtcSegwitTxRes)
  size_t total_size = 0;

  // optional string witness_tx_data = 1;
  if (this->witness_tx_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->witness_tx_data());
  }

  // optional string wtx_hash = 2;
  if (this->wtx_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wtx_hash());
  }

  // optional string tx_hash = 3;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tx_hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtcSegwitTxRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:btcapi.BtcSegwitTxRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BtcSegwitTxRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BtcSegwitTxRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:btcapi.BtcSegwitTxRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:btcapi.BtcSegwitTxRes)
    UnsafeMergeFrom(*source);
  }
}

void BtcSegwitTxRes::MergeFrom(const BtcSegwitTxRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:btcapi.BtcSegwitTxRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BtcSegwitTxRes::UnsafeMergeFrom(const BtcSegwitTxRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.witness_tx_data().size() > 0) {

    witness_tx_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.witness_tx_data_);
  }
  if (from.wtx_hash().size() > 0) {

    wtx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wtx_hash_);
  }
  if (from.tx_hash().size() > 0) {

    tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
}

void BtcSegwitTxRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:btcapi.BtcSegwitTxRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtcSegwitTxRes::CopyFrom(const BtcSegwitTxRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:btcapi.BtcSegwitTxRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BtcSegwitTxRes::IsInitialized() const {

  return true;
}

void BtcSegwitTxRes::Swap(BtcSegwitTxRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BtcSegwitTxRes::InternalSwap(BtcSegwitTxRes* other) {
  witness_tx_data_.Swap(&other->witness_tx_data_);
  wtx_hash_.Swap(&other->wtx_hash_);
  tx_hash_.Swap(&other->tx_hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BtcSegwitTxRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtcSegwitTxRes_descriptor_;
  metadata.reflection = BtcSegwitTxRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BtcSegwitTxRes

// optional string witness_tx_data = 1;
void BtcSegwitTxRes::clear_witness_tx_data() {
  witness_tx_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcSegwitTxRes::witness_tx_data() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxRes.witness_tx_data)
  return witness_tx_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcSegwitTxRes::set_witness_tx_data(const ::std::string& value) {
  
  witness_tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxRes.witness_tx_data)
}
void BtcSegwitTxRes::set_witness_tx_data(const char* value) {
  
  witness_tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcSegwitTxRes.witness_tx_data)
}
void BtcSegwitTxRes::set_witness_tx_data(const char* value, size_t size) {
  
  witness_tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcSegwitTxRes.witness_tx_data)
}
::std::string* BtcSegwitTxRes::mutable_witness_tx_data() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcSegwitTxRes.witness_tx_data)
  return witness_tx_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcSegwitTxRes::release_witness_tx_data() {
  // @@protoc_insertion_point(field_release:btcapi.BtcSegwitTxRes.witness_tx_data)
  
  return witness_tx_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcSegwitTxRes::set_allocated_witness_tx_data(::std::string* witness_tx_data) {
  if (witness_tx_data != NULL) {
    
  } else {
    
  }
  witness_tx_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), witness_tx_data);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcSegwitTxRes.witness_tx_data)
}

// optional string wtx_hash = 2;
void BtcSegwitTxRes::clear_wtx_hash() {
  wtx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcSegwitTxRes::wtx_hash() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxRes.wtx_hash)
  return wtx_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcSegwitTxRes::set_wtx_hash(const ::std::string& value) {
  
  wtx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxRes.wtx_hash)
}
void BtcSegwitTxRes::set_wtx_hash(const char* value) {
  
  wtx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcSegwitTxRes.wtx_hash)
}
void BtcSegwitTxRes::set_wtx_hash(const char* value, size_t size) {
  
  wtx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcSegwitTxRes.wtx_hash)
}
::std::string* BtcSegwitTxRes::mutable_wtx_hash() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcSegwitTxRes.wtx_hash)
  return wtx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcSegwitTxRes::release_wtx_hash() {
  // @@protoc_insertion_point(field_release:btcapi.BtcSegwitTxRes.wtx_hash)
  
  return wtx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcSegwitTxRes::set_allocated_wtx_hash(::std::string* wtx_hash) {
  if (wtx_hash != NULL) {
    
  } else {
    
  }
  wtx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wtx_hash);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcSegwitTxRes.wtx_hash)
}

// optional string tx_hash = 3;
void BtcSegwitTxRes::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcSegwitTxRes::tx_hash() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcSegwitTxRes.tx_hash)
  return tx_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcSegwitTxRes::set_tx_hash(const ::std::string& value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcSegwitTxRes.tx_hash)
}
void BtcSegwitTxRes::set_tx_hash(const char* value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcSegwitTxRes.tx_hash)
}
void BtcSegwitTxRes::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcSegwitTxRes.tx_hash)
}
::std::string* BtcSegwitTxRes::mutable_tx_hash() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcSegwitTxRes.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcSegwitTxRes::release_tx_hash() {
  // @@protoc_insertion_point(field_release:btcapi.BtcSegwitTxRes.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcSegwitTxRes::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcSegwitTxRes.tx_hash)
}

inline const BtcSegwitTxRes* BtcSegwitTxRes::internal_default_instance() {
  return &BtcSegwitTxRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BtcXpubReq::kNetworkFieldNumber;
const int BtcXpubReq::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BtcXpubReq::BtcXpubReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_btc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:btcapi.BtcXpubReq)
}

void BtcXpubReq::InitAsDefaultInstance() {
}

BtcXpubReq::BtcXpubReq(const BtcXpubReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:btcapi.BtcXpubReq)
}

void BtcXpubReq::SharedCtor() {
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BtcXpubReq::~BtcXpubReq() {
  // @@protoc_insertion_point(destructor:btcapi.BtcXpubReq)
  SharedDtor();
}

void BtcXpubReq::SharedDtor() {
  network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BtcXpubReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtcXpubReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtcXpubReq_descriptor_;
}

const BtcXpubReq& BtcXpubReq::default_instance() {
  protobuf_InitDefaults_btc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BtcXpubReq> BtcXpubReq_default_instance_;

BtcXpubReq* BtcXpubReq::New(::google::protobuf::Arena* arena) const {
  BtcXpubReq* n = new BtcXpubReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BtcXpubReq::Clear() {
// @@protoc_insertion_point(message_clear_start:btcapi.BtcXpubReq)
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BtcXpubReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:btcapi.BtcXpubReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string network = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.BtcXpubReq.network"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.BtcXpubReq.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:btcapi.BtcXpubReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:btcapi.BtcXpubReq)
  return false;
#undef DO_
}

void BtcXpubReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:btcapi.BtcXpubReq)
  // optional string network = 1;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcXpubReq.network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->network(), output);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcXpubReq.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:btcapi.BtcXpubReq)
}

::google::protobuf::uint8* BtcXpubReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:btcapi.BtcXpubReq)
  // optional string network = 1;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcXpubReq.network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->network(), target);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcXpubReq.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:btcapi.BtcXpubReq)
  return target;
}

size_t BtcXpubReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:btcapi.BtcXpubReq)
  size_t total_size = 0;

  // optional string network = 1;
  if (this->network().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->network());
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtcXpubReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:btcapi.BtcXpubReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BtcXpubReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BtcXpubReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:btcapi.BtcXpubReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:btcapi.BtcXpubReq)
    UnsafeMergeFrom(*source);
  }
}

void BtcXpubReq::MergeFrom(const BtcXpubReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:btcapi.BtcXpubReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BtcXpubReq::UnsafeMergeFrom(const BtcXpubReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.network().size() > 0) {

    network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void BtcXpubReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:btcapi.BtcXpubReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtcXpubReq::CopyFrom(const BtcXpubReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:btcapi.BtcXpubReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BtcXpubReq::IsInitialized() const {

  return true;
}

void BtcXpubReq::Swap(BtcXpubReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BtcXpubReq::InternalSwap(BtcXpubReq* other) {
  network_.Swap(&other->network_);
  path_.Swap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BtcXpubReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtcXpubReq_descriptor_;
  metadata.reflection = BtcXpubReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BtcXpubReq

// optional string network = 1;
void BtcXpubReq::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcXpubReq::network() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcXpubReq.network)
  return network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcXpubReq::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcXpubReq.network)
}
void BtcXpubReq::set_network(const char* value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcXpubReq.network)
}
void BtcXpubReq::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcXpubReq.network)
}
::std::string* BtcXpubReq::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcXpubReq.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcXpubReq::release_network() {
  // @@protoc_insertion_point(field_release:btcapi.BtcXpubReq.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcXpubReq::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcXpubReq.network)
}

// optional string path = 2;
void BtcXpubReq::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcXpubReq::path() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcXpubReq.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcXpubReq::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcXpubReq.path)
}
void BtcXpubReq::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcXpubReq.path)
}
void BtcXpubReq::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcXpubReq.path)
}
::std::string* BtcXpubReq::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcXpubReq.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcXpubReq::release_path() {
  // @@protoc_insertion_point(field_release:btcapi.BtcXpubReq.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcXpubReq::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcXpubReq.path)
}

inline const BtcXpubReq* BtcXpubReq::internal_default_instance() {
  return &BtcXpubReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BtcXpubRes::kXpubFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BtcXpubRes::BtcXpubRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_btc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:btcapi.BtcXpubRes)
}

void BtcXpubRes::InitAsDefaultInstance() {
}

BtcXpubRes::BtcXpubRes(const BtcXpubRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:btcapi.BtcXpubRes)
}

void BtcXpubRes::SharedCtor() {
  xpub_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BtcXpubRes::~BtcXpubRes() {
  // @@protoc_insertion_point(destructor:btcapi.BtcXpubRes)
  SharedDtor();
}

void BtcXpubRes::SharedDtor() {
  xpub_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BtcXpubRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtcXpubRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtcXpubRes_descriptor_;
}

const BtcXpubRes& BtcXpubRes::default_instance() {
  protobuf_InitDefaults_btc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BtcXpubRes> BtcXpubRes_default_instance_;

BtcXpubRes* BtcXpubRes::New(::google::protobuf::Arena* arena) const {
  BtcXpubRes* n = new BtcXpubRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BtcXpubRes::Clear() {
// @@protoc_insertion_point(message_clear_start:btcapi.BtcXpubRes)
  xpub_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BtcXpubRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:btcapi.BtcXpubRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string xpub = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xpub()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->xpub().data(), this->xpub().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.BtcXpubRes.xpub"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:btcapi.BtcXpubRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:btcapi.BtcXpubRes)
  return false;
#undef DO_
}

void BtcXpubRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:btcapi.BtcXpubRes)
  // optional string xpub = 1;
  if (this->xpub().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xpub().data(), this->xpub().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcXpubRes.xpub");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->xpub(), output);
  }

  // @@protoc_insertion_point(serialize_end:btcapi.BtcXpubRes)
}

::google::protobuf::uint8* BtcXpubRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:btcapi.BtcXpubRes)
  // optional string xpub = 1;
  if (this->xpub().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xpub().data(), this->xpub().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcXpubRes.xpub");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->xpub(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:btcapi.BtcXpubRes)
  return target;
}

size_t BtcXpubRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:btcapi.BtcXpubRes)
  size_t total_size = 0;

  // optional string xpub = 1;
  if (this->xpub().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->xpub());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtcXpubRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:btcapi.BtcXpubRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BtcXpubRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BtcXpubRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:btcapi.BtcXpubRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:btcapi.BtcXpubRes)
    UnsafeMergeFrom(*source);
  }
}

void BtcXpubRes::MergeFrom(const BtcXpubRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:btcapi.BtcXpubRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BtcXpubRes::UnsafeMergeFrom(const BtcXpubRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.xpub().size() > 0) {

    xpub_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xpub_);
  }
}

void BtcXpubRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:btcapi.BtcXpubRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtcXpubRes::CopyFrom(const BtcXpubRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:btcapi.BtcXpubRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BtcXpubRes::IsInitialized() const {

  return true;
}

void BtcXpubRes::Swap(BtcXpubRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BtcXpubRes::InternalSwap(BtcXpubRes* other) {
  xpub_.Swap(&other->xpub_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BtcXpubRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtcXpubRes_descriptor_;
  metadata.reflection = BtcXpubRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BtcXpubRes

// optional string xpub = 1;
void BtcXpubRes::clear_xpub() {
  xpub_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcXpubRes::xpub() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcXpubRes.xpub)
  return xpub_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcXpubRes::set_xpub(const ::std::string& value) {
  
  xpub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcXpubRes.xpub)
}
void BtcXpubRes::set_xpub(const char* value) {
  
  xpub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcXpubRes.xpub)
}
void BtcXpubRes::set_xpub(const char* value, size_t size) {
  
  xpub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcXpubRes.xpub)
}
::std::string* BtcXpubRes::mutable_xpub() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcXpubRes.xpub)
  return xpub_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcXpubRes::release_xpub() {
  // @@protoc_insertion_point(field_release:btcapi.BtcXpubRes.xpub)
  
  return xpub_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcXpubRes::set_allocated_xpub(::std::string* xpub) {
  if (xpub != NULL) {
    
  } else {
    
  }
  xpub_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xpub);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcXpubRes.xpub)
}

inline const BtcXpubRes* BtcXpubRes::internal_default_instance() {
  return &BtcXpubRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BtcAddressReq::kNetworkFieldNumber;
const int BtcAddressReq::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BtcAddressReq::BtcAddressReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_btc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:btcapi.BtcAddressReq)
}

void BtcAddressReq::InitAsDefaultInstance() {
}

BtcAddressReq::BtcAddressReq(const BtcAddressReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:btcapi.BtcAddressReq)
}

void BtcAddressReq::SharedCtor() {
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BtcAddressReq::~BtcAddressReq() {
  // @@protoc_insertion_point(destructor:btcapi.BtcAddressReq)
  SharedDtor();
}

void BtcAddressReq::SharedDtor() {
  network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BtcAddressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtcAddressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtcAddressReq_descriptor_;
}

const BtcAddressReq& BtcAddressReq::default_instance() {
  protobuf_InitDefaults_btc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BtcAddressReq> BtcAddressReq_default_instance_;

BtcAddressReq* BtcAddressReq::New(::google::protobuf::Arena* arena) const {
  BtcAddressReq* n = new BtcAddressReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BtcAddressReq::Clear() {
// @@protoc_insertion_point(message_clear_start:btcapi.BtcAddressReq)
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BtcAddressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:btcapi.BtcAddressReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string network = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.BtcAddressReq.network"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.BtcAddressReq.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:btcapi.BtcAddressReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:btcapi.BtcAddressReq)
  return false;
#undef DO_
}

void BtcAddressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:btcapi.BtcAddressReq)
  // optional string network = 1;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcAddressReq.network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->network(), output);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcAddressReq.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:btcapi.BtcAddressReq)
}

::google::protobuf::uint8* BtcAddressReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:btcapi.BtcAddressReq)
  // optional string network = 1;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcAddressReq.network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->network(), target);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcAddressReq.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:btcapi.BtcAddressReq)
  return target;
}

size_t BtcAddressReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:btcapi.BtcAddressReq)
  size_t total_size = 0;

  // optional string network = 1;
  if (this->network().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->network());
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtcAddressReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:btcapi.BtcAddressReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BtcAddressReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BtcAddressReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:btcapi.BtcAddressReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:btcapi.BtcAddressReq)
    UnsafeMergeFrom(*source);
  }
}

void BtcAddressReq::MergeFrom(const BtcAddressReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:btcapi.BtcAddressReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BtcAddressReq::UnsafeMergeFrom(const BtcAddressReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.network().size() > 0) {

    network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void BtcAddressReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:btcapi.BtcAddressReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtcAddressReq::CopyFrom(const BtcAddressReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:btcapi.BtcAddressReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BtcAddressReq::IsInitialized() const {

  return true;
}

void BtcAddressReq::Swap(BtcAddressReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BtcAddressReq::InternalSwap(BtcAddressReq* other) {
  network_.Swap(&other->network_);
  path_.Swap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BtcAddressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtcAddressReq_descriptor_;
  metadata.reflection = BtcAddressReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BtcAddressReq

// optional string network = 1;
void BtcAddressReq::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcAddressReq::network() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcAddressReq.network)
  return network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcAddressReq::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcAddressReq.network)
}
void BtcAddressReq::set_network(const char* value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcAddressReq.network)
}
void BtcAddressReq::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcAddressReq.network)
}
::std::string* BtcAddressReq::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcAddressReq.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcAddressReq::release_network() {
  // @@protoc_insertion_point(field_release:btcapi.BtcAddressReq.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcAddressReq::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcAddressReq.network)
}

// optional string path = 2;
void BtcAddressReq::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcAddressReq::path() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcAddressReq.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcAddressReq::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcAddressReq.path)
}
void BtcAddressReq::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcAddressReq.path)
}
void BtcAddressReq::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcAddressReq.path)
}
::std::string* BtcAddressReq::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcAddressReq.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcAddressReq::release_path() {
  // @@protoc_insertion_point(field_release:btcapi.BtcAddressReq.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcAddressReq::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcAddressReq.path)
}

inline const BtcAddressReq* BtcAddressReq::internal_default_instance() {
  return &BtcAddressReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BtcAddressRes::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BtcAddressRes::BtcAddressRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_btc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:btcapi.BtcAddressRes)
}

void BtcAddressRes::InitAsDefaultInstance() {
}

BtcAddressRes::BtcAddressRes(const BtcAddressRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:btcapi.BtcAddressRes)
}

void BtcAddressRes::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BtcAddressRes::~BtcAddressRes() {
  // @@protoc_insertion_point(destructor:btcapi.BtcAddressRes)
  SharedDtor();
}

void BtcAddressRes::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BtcAddressRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtcAddressRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtcAddressRes_descriptor_;
}

const BtcAddressRes& BtcAddressRes::default_instance() {
  protobuf_InitDefaults_btc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BtcAddressRes> BtcAddressRes_default_instance_;

BtcAddressRes* BtcAddressRes::New(::google::protobuf::Arena* arena) const {
  BtcAddressRes* n = new BtcAddressRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BtcAddressRes::Clear() {
// @@protoc_insertion_point(message_clear_start:btcapi.BtcAddressRes)
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BtcAddressRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:btcapi.BtcAddressRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "btcapi.BtcAddressRes.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:btcapi.BtcAddressRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:btcapi.BtcAddressRes)
  return false;
#undef DO_
}

void BtcAddressRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:btcapi.BtcAddressRes)
  // optional string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcAddressRes.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // @@protoc_insertion_point(serialize_end:btcapi.BtcAddressRes)
}

::google::protobuf::uint8* BtcAddressRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:btcapi.BtcAddressRes)
  // optional string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "btcapi.BtcAddressRes.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:btcapi.BtcAddressRes)
  return target;
}

size_t BtcAddressRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:btcapi.BtcAddressRes)
  size_t total_size = 0;

  // optional string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtcAddressRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:btcapi.BtcAddressRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BtcAddressRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BtcAddressRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:btcapi.BtcAddressRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:btcapi.BtcAddressRes)
    UnsafeMergeFrom(*source);
  }
}

void BtcAddressRes::MergeFrom(const BtcAddressRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:btcapi.BtcAddressRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BtcAddressRes::UnsafeMergeFrom(const BtcAddressRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void BtcAddressRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:btcapi.BtcAddressRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtcAddressRes::CopyFrom(const BtcAddressRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:btcapi.BtcAddressRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BtcAddressRes::IsInitialized() const {

  return true;
}

void BtcAddressRes::Swap(BtcAddressRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BtcAddressRes::InternalSwap(BtcAddressRes* other) {
  address_.Swap(&other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BtcAddressRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtcAddressRes_descriptor_;
  metadata.reflection = BtcAddressRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BtcAddressRes

// optional string address = 1;
void BtcAddressRes::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BtcAddressRes::address() const {
  // @@protoc_insertion_point(field_get:btcapi.BtcAddressRes.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcAddressRes::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:btcapi.BtcAddressRes.address)
}
void BtcAddressRes::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:btcapi.BtcAddressRes.address)
}
void BtcAddressRes::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:btcapi.BtcAddressRes.address)
}
::std::string* BtcAddressRes::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:btcapi.BtcAddressRes.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BtcAddressRes::release_address() {
  // @@protoc_insertion_point(field_release:btcapi.BtcAddressRes.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BtcAddressRes::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:btcapi.BtcAddressRes.address)
}

inline const BtcAddressRes* BtcAddressRes::internal_default_instance() {
  return &BtcAddressRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace btcapi

// @@protoc_insertion_point(global_scope)
