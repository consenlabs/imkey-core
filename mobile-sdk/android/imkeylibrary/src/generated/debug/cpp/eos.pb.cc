// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "eos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace eosapi {

namespace {

const ::google::protobuf::Descriptor* EosTxReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EosTxReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EosSignData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EosSignData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EosTxRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EosTxRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* EosSignResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EosSignResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* EosPubkeyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EosPubkeyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EosPubkeyRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EosPubkeyRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* EosMessageSignReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EosMessageSignReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EosMessageSignRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EosMessageSignRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_eos_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_eos_2eproto() {
  protobuf_AddDesc_eos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "eos.proto");
  GOOGLE_CHECK(file != NULL);
  EosTxReq_descriptor_ = file->message_type(0);
  static const int EosTxReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosTxReq, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosTxReq, sign_datas_),
  };
  EosTxReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EosTxReq_descriptor_,
      EosTxReq::internal_default_instance(),
      EosTxReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(EosTxReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosTxReq, _internal_metadata_));
  EosSignData_descriptor_ = file->message_type(1);
  static const int EosSignData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosSignData, tx_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosSignData, pub_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosSignData, chain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosSignData, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosSignData, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosSignData, payment_),
  };
  EosSignData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EosSignData_descriptor_,
      EosSignData::internal_default_instance(),
      EosSignData_offsets_,
      -1,
      -1,
      -1,
      sizeof(EosSignData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosSignData, _internal_metadata_));
  EosTxRes_descriptor_ = file->message_type(2);
  static const int EosTxRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosTxRes, trans_multi_signs_),
  };
  EosTxRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EosTxRes_descriptor_,
      EosTxRes::internal_default_instance(),
      EosTxRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(EosTxRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosTxRes, _internal_metadata_));
  EosSignResult_descriptor_ = file->message_type(3);
  static const int EosSignResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosSignResult, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosSignResult, signs_),
  };
  EosSignResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EosSignResult_descriptor_,
      EosSignResult::internal_default_instance(),
      EosSignResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(EosSignResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosSignResult, _internal_metadata_));
  EosPubkeyReq_descriptor_ = file->message_type(4);
  static const int EosPubkeyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosPubkeyReq, path_),
  };
  EosPubkeyReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EosPubkeyReq_descriptor_,
      EosPubkeyReq::internal_default_instance(),
      EosPubkeyReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(EosPubkeyReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosPubkeyReq, _internal_metadata_));
  EosPubkeyRes_descriptor_ = file->message_type(5);
  static const int EosPubkeyRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosPubkeyRes, pubkey_),
  };
  EosPubkeyRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EosPubkeyRes_descriptor_,
      EosPubkeyRes::internal_default_instance(),
      EosPubkeyRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(EosPubkeyRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosPubkeyRes, _internal_metadata_));
  EosMessageSignReq_descriptor_ = file->message_type(6);
  static const int EosMessageSignReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosMessageSignReq, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosMessageSignReq, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosMessageSignReq, is_hex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosMessageSignReq, pubkey_),
  };
  EosMessageSignReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EosMessageSignReq_descriptor_,
      EosMessageSignReq::internal_default_instance(),
      EosMessageSignReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(EosMessageSignReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosMessageSignReq, _internal_metadata_));
  EosMessageSignRes_descriptor_ = file->message_type(7);
  static const int EosMessageSignRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosMessageSignRes, signature_),
  };
  EosMessageSignRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EosMessageSignRes_descriptor_,
      EosMessageSignRes::internal_default_instance(),
      EosMessageSignRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(EosMessageSignRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosMessageSignRes, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_eos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EosTxReq_descriptor_, EosTxReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EosSignData_descriptor_, EosSignData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EosTxRes_descriptor_, EosTxRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EosSignResult_descriptor_, EosSignResult::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EosPubkeyReq_descriptor_, EosPubkeyReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EosPubkeyRes_descriptor_, EosPubkeyRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EosMessageSignReq_descriptor_, EosMessageSignReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EosMessageSignRes_descriptor_, EosMessageSignRes::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_eos_2eproto() {
  EosTxReq_default_instance_.Shutdown();
  delete EosTxReq_reflection_;
  EosSignData_default_instance_.Shutdown();
  delete EosSignData_reflection_;
  EosTxRes_default_instance_.Shutdown();
  delete EosTxRes_reflection_;
  EosSignResult_default_instance_.Shutdown();
  delete EosSignResult_reflection_;
  EosPubkeyReq_default_instance_.Shutdown();
  delete EosPubkeyReq_reflection_;
  EosPubkeyRes_default_instance_.Shutdown();
  delete EosPubkeyRes_reflection_;
  EosMessageSignReq_default_instance_.Shutdown();
  delete EosMessageSignReq_reflection_;
  EosMessageSignRes_default_instance_.Shutdown();
  delete EosMessageSignRes_reflection_;
}

void protobuf_InitDefaults_eos_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  EosTxReq_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EosSignData_default_instance_.DefaultConstruct();
  EosTxRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EosSignResult_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EosPubkeyReq_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EosPubkeyRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EosMessageSignReq_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EosMessageSignRes_default_instance_.DefaultConstruct();
  EosTxReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  EosSignData_default_instance_.get_mutable()->InitAsDefaultInstance();
  EosTxRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  EosSignResult_default_instance_.get_mutable()->InitAsDefaultInstance();
  EosPubkeyReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  EosPubkeyRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  EosMessageSignReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  EosMessageSignRes_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_eos_2eproto_once_);
void protobuf_InitDefaults_eos_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_eos_2eproto_once_,
                 &protobuf_InitDefaults_eos_2eproto_impl);
}
void protobuf_AddDesc_eos_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_eos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\teos.proto\022\006eosapi\"A\n\010EosTxReq\022\014\n\004path\030"
    "\001 \001(\t\022\'\n\nsign_datas\030\002 \003(\0132\023.eosapi.EosSi"
    "gnData\"m\n\013EosSignData\022\017\n\007tx_data\030\001 \001(\t\022\020"
    "\n\010pub_keys\030\002 \003(\t\022\020\n\010chain_id\030\003 \001(\t\022\n\n\002to"
    "\030\004 \001(\t\022\014\n\004from\030\005 \001(\t\022\017\n\007payment\030\006 \001(\t\"<\n"
    "\010EosTxRes\0220\n\021trans_multi_signs\030\001 \003(\0132\025.e"
    "osapi.EosSignResult\",\n\rEosSignResult\022\014\n\004"
    "hash\030\001 \001(\t\022\r\n\005signs\030\002 \003(\t\"\034\n\014EosPubkeyRe"
    "q\022\014\n\004path\030\001 \001(\t\"\036\n\014EosPubkeyRes\022\016\n\006pubke"
    "y\030\001 \001(\t\"O\n\021EosMessageSignReq\022\014\n\004path\030\001 \001"
    "(\t\022\014\n\004data\030\002 \001(\t\022\016\n\006is_hex\030\003 \001(\010\022\016\n\006pubk"
    "ey\030\004 \001(\t\"&\n\021EosMessageSignRes\022\021\n\tsignatu"
    "re\030\001 \001(\tb\006proto3", 496);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "eos.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_eos_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_eos_2eproto_once_);
void protobuf_AddDesc_eos_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_eos_2eproto_once_,
                 &protobuf_AddDesc_eos_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_eos_2eproto {
  StaticDescriptorInitializer_eos_2eproto() {
    protobuf_AddDesc_eos_2eproto();
  }
} static_descriptor_initializer_eos_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxReq::kPathFieldNumber;
const int EosTxReq::kSignDatasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxReq::EosTxReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eosapi.EosTxReq)
}

void EosTxReq::InitAsDefaultInstance() {
}

EosTxReq::EosTxReq(const EosTxReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eosapi.EosTxReq)
}

void EosTxReq::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EosTxReq::~EosTxReq() {
  // @@protoc_insertion_point(destructor:eosapi.EosTxReq)
  SharedDtor();
}

void EosTxReq::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosTxReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EosTxReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EosTxReq_descriptor_;
}

const EosTxReq& EosTxReq::default_instance() {
  protobuf_InitDefaults_eos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EosTxReq> EosTxReq_default_instance_;

EosTxReq* EosTxReq::New(::google::protobuf::Arena* arena) const {
  EosTxReq* n = new EosTxReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EosTxReq::Clear() {
// @@protoc_insertion_point(message_clear_start:eosapi.EosTxReq)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_datas_.Clear();
}

bool EosTxReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eosapi.EosTxReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosTxReq.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sign_datas;
        break;
      }

      // repeated .eosapi.EosSignData sign_datas = 2;
      case 2: {
        if (tag == 18) {
         parse_sign_datas:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sign_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sign_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_sign_datas;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eosapi.EosTxReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eosapi.EosTxReq)
  return false;
#undef DO_
}

void EosTxReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eosapi.EosTxReq)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosTxReq.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // repeated .eosapi.EosSignData sign_datas = 2;
  for (unsigned int i = 0, n = this->sign_datas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sign_datas(i), output);
  }

  // @@protoc_insertion_point(serialize_end:eosapi.EosTxReq)
}

::google::protobuf::uint8* EosTxReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eosapi.EosTxReq)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosTxReq.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // repeated .eosapi.EosSignData sign_datas = 2;
  for (unsigned int i = 0, n = this->sign_datas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->sign_datas(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eosapi.EosTxReq)
  return target;
}

size_t EosTxReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eosapi.EosTxReq)
  size_t total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // repeated .eosapi.EosSignData sign_datas = 2;
  {
    unsigned int count = this->sign_datas_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign_datas(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EosTxReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eosapi.EosTxReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EosTxReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EosTxReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eosapi.EosTxReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eosapi.EosTxReq)
    UnsafeMergeFrom(*source);
  }
}

void EosTxReq::MergeFrom(const EosTxReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eosapi.EosTxReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EosTxReq::UnsafeMergeFrom(const EosTxReq& from) {
  GOOGLE_DCHECK(&from != this);
  sign_datas_.MergeFrom(from.sign_datas_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void EosTxReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eosapi.EosTxReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxReq::CopyFrom(const EosTxReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eosapi.EosTxReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EosTxReq::IsInitialized() const {

  return true;
}

void EosTxReq::Swap(EosTxReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxReq::InternalSwap(EosTxReq* other) {
  path_.Swap(&other->path_);
  sign_datas_.UnsafeArenaSwap(&other->sign_datas_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EosTxReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EosTxReq_descriptor_;
  metadata.reflection = EosTxReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EosTxReq

// optional string path = 1;
void EosTxReq::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosTxReq::path() const {
  // @@protoc_insertion_point(field_get:eosapi.EosTxReq.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosTxReq::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosTxReq.path)
}
void EosTxReq::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosTxReq.path)
}
void EosTxReq::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosTxReq.path)
}
::std::string* EosTxReq::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosTxReq.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosTxReq::release_path() {
  // @@protoc_insertion_point(field_release:eosapi.EosTxReq.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosTxReq::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosTxReq.path)
}

// repeated .eosapi.EosSignData sign_datas = 2;
int EosTxReq::sign_datas_size() const {
  return sign_datas_.size();
}
void EosTxReq::clear_sign_datas() {
  sign_datas_.Clear();
}
const ::eosapi::EosSignData& EosTxReq::sign_datas(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosTxReq.sign_datas)
  return sign_datas_.Get(index);
}
::eosapi::EosSignData* EosTxReq::mutable_sign_datas(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosTxReq.sign_datas)
  return sign_datas_.Mutable(index);
}
::eosapi::EosSignData* EosTxReq::add_sign_datas() {
  // @@protoc_insertion_point(field_add:eosapi.EosTxReq.sign_datas)
  return sign_datas_.Add();
}
::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData >*
EosTxReq::mutable_sign_datas() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosTxReq.sign_datas)
  return &sign_datas_;
}
const ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData >&
EosTxReq::sign_datas() const {
  // @@protoc_insertion_point(field_list:eosapi.EosTxReq.sign_datas)
  return sign_datas_;
}

inline const EosTxReq* EosTxReq::internal_default_instance() {
  return &EosTxReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosSignData::kTxDataFieldNumber;
const int EosSignData::kPubKeysFieldNumber;
const int EosSignData::kChainIdFieldNumber;
const int EosSignData::kToFieldNumber;
const int EosSignData::kFromFieldNumber;
const int EosSignData::kPaymentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosSignData::EosSignData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eosapi.EosSignData)
}

void EosSignData::InitAsDefaultInstance() {
}

EosSignData::EosSignData(const EosSignData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eosapi.EosSignData)
}

void EosSignData::SharedCtor() {
  tx_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EosSignData::~EosSignData() {
  // @@protoc_insertion_point(destructor:eosapi.EosSignData)
  SharedDtor();
}

void EosSignData::SharedDtor() {
  tx_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chain_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosSignData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EosSignData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EosSignData_descriptor_;
}

const EosSignData& EosSignData::default_instance() {
  protobuf_InitDefaults_eos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EosSignData> EosSignData_default_instance_;

EosSignData* EosSignData::New(::google::protobuf::Arena* arena) const {
  EosSignData* n = new EosSignData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EosSignData::Clear() {
// @@protoc_insertion_point(message_clear_start:eosapi.EosSignData)
  tx_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pub_keys_.Clear();
}

bool EosSignData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eosapi.EosSignData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tx_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tx_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tx_data().data(), this->tx_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosSignData.tx_data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pub_keys;
        break;
      }

      // repeated string pub_keys = 2;
      case 2: {
        if (tag == 18) {
         parse_pub_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pub_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pub_keys(this->pub_keys_size() - 1).data(),
            this->pub_keys(this->pub_keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosSignData.pub_keys"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pub_keys;
        if (input->ExpectTag(26)) goto parse_chain_id;
        break;
      }

      // optional string chain_id = 3;
      case 3: {
        if (tag == 26) {
         parse_chain_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chain_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chain_id().data(), this->chain_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosSignData.chain_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_to;
        break;
      }

      // optional string to = 4;
      case 4: {
        if (tag == 34) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosSignData.to"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_from;
        break;
      }

      // optional string from = 5;
      case 5: {
        if (tag == 42) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosSignData.from"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_payment;
        break;
      }

      // optional string payment = 6;
      case 6: {
        if (tag == 50) {
         parse_payment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->payment().data(), this->payment().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosSignData.payment"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eosapi.EosSignData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eosapi.EosSignData)
  return false;
#undef DO_
}

void EosSignData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eosapi.EosSignData)
  // optional string tx_data = 1;
  if (this->tx_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_data().data(), this->tx_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.tx_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tx_data(), output);
  }

  // repeated string pub_keys = 2;
  for (int i = 0; i < this->pub_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pub_keys(i).data(), this->pub_keys(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.pub_keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pub_keys(i), output);
  }

  // optional string chain_id = 3;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), this->chain_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.chain_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->chain_id(), output);
  }

  // optional string to = 4;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to(), output);
  }

  // optional string from = 5;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->from(), output);
  }

  // optional string payment = 6;
  if (this->payment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payment().data(), this->payment().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.payment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->payment(), output);
  }

  // @@protoc_insertion_point(serialize_end:eosapi.EosSignData)
}

::google::protobuf::uint8* EosSignData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eosapi.EosSignData)
  // optional string tx_data = 1;
  if (this->tx_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_data().data(), this->tx_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.tx_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tx_data(), target);
  }

  // repeated string pub_keys = 2;
  for (int i = 0; i < this->pub_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pub_keys(i).data(), this->pub_keys(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.pub_keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->pub_keys(i), target);
  }

  // optional string chain_id = 3;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), this->chain_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.chain_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chain_id(), target);
  }

  // optional string to = 4;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to(), target);
  }

  // optional string from = 5;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->from(), target);
  }

  // optional string payment = 6;
  if (this->payment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payment().data(), this->payment().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.payment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->payment(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eosapi.EosSignData)
  return target;
}

size_t EosSignData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eosapi.EosSignData)
  size_t total_size = 0;

  // optional string tx_data = 1;
  if (this->tx_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tx_data());
  }

  // optional string chain_id = 3;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chain_id());
  }

  // optional string to = 4;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to());
  }

  // optional string from = 5;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());
  }

  // optional string payment = 6;
  if (this->payment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->payment());
  }

  // repeated string pub_keys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->pub_keys_size());
  for (int i = 0; i < this->pub_keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pub_keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EosSignData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eosapi.EosSignData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EosSignData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EosSignData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eosapi.EosSignData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eosapi.EosSignData)
    UnsafeMergeFrom(*source);
  }
}

void EosSignData::MergeFrom(const EosSignData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eosapi.EosSignData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EosSignData::UnsafeMergeFrom(const EosSignData& from) {
  GOOGLE_DCHECK(&from != this);
  pub_keys_.UnsafeMergeFrom(from.pub_keys_);
  if (from.tx_data().size() > 0) {

    tx_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_data_);
  }
  if (from.chain_id().size() > 0) {

    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.payment().size() > 0) {

    payment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payment_);
  }
}

void EosSignData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eosapi.EosSignData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosSignData::CopyFrom(const EosSignData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eosapi.EosSignData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EosSignData::IsInitialized() const {

  return true;
}

void EosSignData::Swap(EosSignData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosSignData::InternalSwap(EosSignData* other) {
  tx_data_.Swap(&other->tx_data_);
  pub_keys_.UnsafeArenaSwap(&other->pub_keys_);
  chain_id_.Swap(&other->chain_id_);
  to_.Swap(&other->to_);
  from_.Swap(&other->from_);
  payment_.Swap(&other->payment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EosSignData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EosSignData_descriptor_;
  metadata.reflection = EosSignData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EosSignData

// optional string tx_data = 1;
void EosSignData::clear_tx_data() {
  tx_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosSignData::tx_data() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.tx_data)
  return tx_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_tx_data(const ::std::string& value) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.tx_data)
}
void EosSignData::set_tx_data(const char* value) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.tx_data)
}
void EosSignData::set_tx_data(const char* value, size_t size) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.tx_data)
}
::std::string* EosSignData::mutable_tx_data() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.tx_data)
  return tx_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosSignData::release_tx_data() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.tx_data)
  
  return tx_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_allocated_tx_data(::std::string* tx_data) {
  if (tx_data != NULL) {
    
  } else {
    
  }
  tx_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_data);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.tx_data)
}

// repeated string pub_keys = 2;
int EosSignData::pub_keys_size() const {
  return pub_keys_.size();
}
void EosSignData::clear_pub_keys() {
  pub_keys_.Clear();
}
const ::std::string& EosSignData::pub_keys(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.pub_keys)
  return pub_keys_.Get(index);
}
::std::string* EosSignData::mutable_pub_keys(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.pub_keys)
  return pub_keys_.Mutable(index);
}
void EosSignData::set_pub_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.pub_keys)
  pub_keys_.Mutable(index)->assign(value);
}
void EosSignData::set_pub_keys(int index, const char* value) {
  pub_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.pub_keys)
}
void EosSignData::set_pub_keys(int index, const char* value, size_t size) {
  pub_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.pub_keys)
}
::std::string* EosSignData::add_pub_keys() {
  // @@protoc_insertion_point(field_add_mutable:eosapi.EosSignData.pub_keys)
  return pub_keys_.Add();
}
void EosSignData::add_pub_keys(const ::std::string& value) {
  pub_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eosapi.EosSignData.pub_keys)
}
void EosSignData::add_pub_keys(const char* value) {
  pub_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eosapi.EosSignData.pub_keys)
}
void EosSignData::add_pub_keys(const char* value, size_t size) {
  pub_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eosapi.EosSignData.pub_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
EosSignData::pub_keys() const {
  // @@protoc_insertion_point(field_list:eosapi.EosSignData.pub_keys)
  return pub_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
EosSignData::mutable_pub_keys() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosSignData.pub_keys)
  return &pub_keys_;
}

// optional string chain_id = 3;
void EosSignData::clear_chain_id() {
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosSignData::chain_id() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.chain_id)
  return chain_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_chain_id(const ::std::string& value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.chain_id)
}
void EosSignData::set_chain_id(const char* value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.chain_id)
}
void EosSignData::set_chain_id(const char* value, size_t size) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.chain_id)
}
::std::string* EosSignData::mutable_chain_id() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.chain_id)
  return chain_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosSignData::release_chain_id() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.chain_id)
  
  return chain_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_allocated_chain_id(::std::string* chain_id) {
  if (chain_id != NULL) {
    
  } else {
    
  }
  chain_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_id);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.chain_id)
}

// optional string to = 4;
void EosSignData::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosSignData::to() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.to)
}
void EosSignData::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.to)
}
void EosSignData::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.to)
}
::std::string* EosSignData::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosSignData::release_to() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.to)
}

// optional string from = 5;
void EosSignData::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosSignData::from() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.from)
  return from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.from)
}
void EosSignData::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.from)
}
void EosSignData::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.from)
}
::std::string* EosSignData::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosSignData::release_from() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.from)
}

// optional string payment = 6;
void EosSignData::clear_payment() {
  payment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosSignData::payment() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.payment)
  return payment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_payment(const ::std::string& value) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.payment)
}
void EosSignData::set_payment(const char* value) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.payment)
}
void EosSignData::set_payment(const char* value, size_t size) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.payment)
}
::std::string* EosSignData::mutable_payment() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.payment)
  return payment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosSignData::release_payment() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.payment)
  
  return payment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_allocated_payment(::std::string* payment) {
  if (payment != NULL) {
    
  } else {
    
  }
  payment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payment);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.payment)
}

inline const EosSignData* EosSignData::internal_default_instance() {
  return &EosSignData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxRes::kTransMultiSignsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxRes::EosTxRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eosapi.EosTxRes)
}

void EosTxRes::InitAsDefaultInstance() {
}

EosTxRes::EosTxRes(const EosTxRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eosapi.EosTxRes)
}

void EosTxRes::SharedCtor() {
  _cached_size_ = 0;
}

EosTxRes::~EosTxRes() {
  // @@protoc_insertion_point(destructor:eosapi.EosTxRes)
  SharedDtor();
}

void EosTxRes::SharedDtor() {
}

void EosTxRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EosTxRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EosTxRes_descriptor_;
}

const EosTxRes& EosTxRes::default_instance() {
  protobuf_InitDefaults_eos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EosTxRes> EosTxRes_default_instance_;

EosTxRes* EosTxRes::New(::google::protobuf::Arena* arena) const {
  EosTxRes* n = new EosTxRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EosTxRes::Clear() {
// @@protoc_insertion_point(message_clear_start:eosapi.EosTxRes)
  trans_multi_signs_.Clear();
}

bool EosTxRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eosapi.EosTxRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .eosapi.EosSignResult trans_multi_signs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_trans_multi_signs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trans_multi_signs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_trans_multi_signs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eosapi.EosTxRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eosapi.EosTxRes)
  return false;
#undef DO_
}

void EosTxRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eosapi.EosTxRes)
  // repeated .eosapi.EosSignResult trans_multi_signs = 1;
  for (unsigned int i = 0, n = this->trans_multi_signs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trans_multi_signs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:eosapi.EosTxRes)
}

::google::protobuf::uint8* EosTxRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eosapi.EosTxRes)
  // repeated .eosapi.EosSignResult trans_multi_signs = 1;
  for (unsigned int i = 0, n = this->trans_multi_signs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->trans_multi_signs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eosapi.EosTxRes)
  return target;
}

size_t EosTxRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eosapi.EosTxRes)
  size_t total_size = 0;

  // repeated .eosapi.EosSignResult trans_multi_signs = 1;
  {
    unsigned int count = this->trans_multi_signs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trans_multi_signs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EosTxRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eosapi.EosTxRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EosTxRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EosTxRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eosapi.EosTxRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eosapi.EosTxRes)
    UnsafeMergeFrom(*source);
  }
}

void EosTxRes::MergeFrom(const EosTxRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eosapi.EosTxRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EosTxRes::UnsafeMergeFrom(const EosTxRes& from) {
  GOOGLE_DCHECK(&from != this);
  trans_multi_signs_.MergeFrom(from.trans_multi_signs_);
}

void EosTxRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eosapi.EosTxRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxRes::CopyFrom(const EosTxRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eosapi.EosTxRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EosTxRes::IsInitialized() const {

  return true;
}

void EosTxRes::Swap(EosTxRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxRes::InternalSwap(EosTxRes* other) {
  trans_multi_signs_.UnsafeArenaSwap(&other->trans_multi_signs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EosTxRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EosTxRes_descriptor_;
  metadata.reflection = EosTxRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EosTxRes

// repeated .eosapi.EosSignResult trans_multi_signs = 1;
int EosTxRes::trans_multi_signs_size() const {
  return trans_multi_signs_.size();
}
void EosTxRes::clear_trans_multi_signs() {
  trans_multi_signs_.Clear();
}
const ::eosapi::EosSignResult& EosTxRes::trans_multi_signs(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosTxRes.trans_multi_signs)
  return trans_multi_signs_.Get(index);
}
::eosapi::EosSignResult* EosTxRes::mutable_trans_multi_signs(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosTxRes.trans_multi_signs)
  return trans_multi_signs_.Mutable(index);
}
::eosapi::EosSignResult* EosTxRes::add_trans_multi_signs() {
  // @@protoc_insertion_point(field_add:eosapi.EosTxRes.trans_multi_signs)
  return trans_multi_signs_.Add();
}
::google::protobuf::RepeatedPtrField< ::eosapi::EosSignResult >*
EosTxRes::mutable_trans_multi_signs() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosTxRes.trans_multi_signs)
  return &trans_multi_signs_;
}
const ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignResult >&
EosTxRes::trans_multi_signs() const {
  // @@protoc_insertion_point(field_list:eosapi.EosTxRes.trans_multi_signs)
  return trans_multi_signs_;
}

inline const EosTxRes* EosTxRes::internal_default_instance() {
  return &EosTxRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosSignResult::kHashFieldNumber;
const int EosSignResult::kSignsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosSignResult::EosSignResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eosapi.EosSignResult)
}

void EosSignResult::InitAsDefaultInstance() {
}

EosSignResult::EosSignResult(const EosSignResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eosapi.EosSignResult)
}

void EosSignResult::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EosSignResult::~EosSignResult() {
  // @@protoc_insertion_point(destructor:eosapi.EosSignResult)
  SharedDtor();
}

void EosSignResult::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosSignResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EosSignResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EosSignResult_descriptor_;
}

const EosSignResult& EosSignResult::default_instance() {
  protobuf_InitDefaults_eos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EosSignResult> EosSignResult_default_instance_;

EosSignResult* EosSignResult::New(::google::protobuf::Arena* arena) const {
  EosSignResult* n = new EosSignResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EosSignResult::Clear() {
// @@protoc_insertion_point(message_clear_start:eosapi.EosSignResult)
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signs_.Clear();
}

bool EosSignResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eosapi.EosSignResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosSignResult.hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_signs;
        break;
      }

      // repeated string signs = 2;
      case 2: {
        if (tag == 18) {
         parse_signs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_signs()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signs(this->signs_size() - 1).data(),
            this->signs(this->signs_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosSignResult.signs"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_signs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eosapi.EosSignResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eosapi.EosSignResult)
  return false;
#undef DO_
}

void EosSignResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eosapi.EosSignResult)
  // optional string hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignResult.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hash(), output);
  }

  // repeated string signs = 2;
  for (int i = 0; i < this->signs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signs(i).data(), this->signs(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignResult.signs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->signs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:eosapi.EosSignResult)
}

::google::protobuf::uint8* EosSignResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eosapi.EosSignResult)
  // optional string hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignResult.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hash(), target);
  }

  // repeated string signs = 2;
  for (int i = 0; i < this->signs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signs(i).data(), this->signs(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignResult.signs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->signs(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eosapi.EosSignResult)
  return target;
}

size_t EosSignResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eosapi.EosSignResult)
  size_t total_size = 0;

  // optional string hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  // repeated string signs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->signs_size());
  for (int i = 0; i < this->signs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->signs(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EosSignResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eosapi.EosSignResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EosSignResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EosSignResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eosapi.EosSignResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eosapi.EosSignResult)
    UnsafeMergeFrom(*source);
  }
}

void EosSignResult::MergeFrom(const EosSignResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eosapi.EosSignResult)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EosSignResult::UnsafeMergeFrom(const EosSignResult& from) {
  GOOGLE_DCHECK(&from != this);
  signs_.UnsafeMergeFrom(from.signs_);
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
}

void EosSignResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eosapi.EosSignResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosSignResult::CopyFrom(const EosSignResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eosapi.EosSignResult)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EosSignResult::IsInitialized() const {

  return true;
}

void EosSignResult::Swap(EosSignResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosSignResult::InternalSwap(EosSignResult* other) {
  hash_.Swap(&other->hash_);
  signs_.UnsafeArenaSwap(&other->signs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EosSignResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EosSignResult_descriptor_;
  metadata.reflection = EosSignResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EosSignResult

// optional string hash = 1;
void EosSignResult::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosSignResult::hash() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignResult.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignResult::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignResult.hash)
}
void EosSignResult::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignResult.hash)
}
void EosSignResult::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignResult.hash)
}
::std::string* EosSignResult::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignResult.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosSignResult::release_hash() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignResult.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignResult::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignResult.hash)
}

// repeated string signs = 2;
int EosSignResult::signs_size() const {
  return signs_.size();
}
void EosSignResult::clear_signs() {
  signs_.Clear();
}
const ::std::string& EosSignResult::signs(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignResult.signs)
  return signs_.Get(index);
}
::std::string* EosSignResult::mutable_signs(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignResult.signs)
  return signs_.Mutable(index);
}
void EosSignResult::set_signs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:eosapi.EosSignResult.signs)
  signs_.Mutable(index)->assign(value);
}
void EosSignResult::set_signs(int index, const char* value) {
  signs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignResult.signs)
}
void EosSignResult::set_signs(int index, const char* value, size_t size) {
  signs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignResult.signs)
}
::std::string* EosSignResult::add_signs() {
  // @@protoc_insertion_point(field_add_mutable:eosapi.EosSignResult.signs)
  return signs_.Add();
}
void EosSignResult::add_signs(const ::std::string& value) {
  signs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eosapi.EosSignResult.signs)
}
void EosSignResult::add_signs(const char* value) {
  signs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eosapi.EosSignResult.signs)
}
void EosSignResult::add_signs(const char* value, size_t size) {
  signs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eosapi.EosSignResult.signs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
EosSignResult::signs() const {
  // @@protoc_insertion_point(field_list:eosapi.EosSignResult.signs)
  return signs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
EosSignResult::mutable_signs() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosSignResult.signs)
  return &signs_;
}

inline const EosSignResult* EosSignResult::internal_default_instance() {
  return &EosSignResult_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosPubkeyReq::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosPubkeyReq::EosPubkeyReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eosapi.EosPubkeyReq)
}

void EosPubkeyReq::InitAsDefaultInstance() {
}

EosPubkeyReq::EosPubkeyReq(const EosPubkeyReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eosapi.EosPubkeyReq)
}

void EosPubkeyReq::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EosPubkeyReq::~EosPubkeyReq() {
  // @@protoc_insertion_point(destructor:eosapi.EosPubkeyReq)
  SharedDtor();
}

void EosPubkeyReq::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosPubkeyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EosPubkeyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EosPubkeyReq_descriptor_;
}

const EosPubkeyReq& EosPubkeyReq::default_instance() {
  protobuf_InitDefaults_eos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EosPubkeyReq> EosPubkeyReq_default_instance_;

EosPubkeyReq* EosPubkeyReq::New(::google::protobuf::Arena* arena) const {
  EosPubkeyReq* n = new EosPubkeyReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EosPubkeyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:eosapi.EosPubkeyReq)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EosPubkeyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eosapi.EosPubkeyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosPubkeyReq.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eosapi.EosPubkeyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eosapi.EosPubkeyReq)
  return false;
#undef DO_
}

void EosPubkeyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eosapi.EosPubkeyReq)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosPubkeyReq.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:eosapi.EosPubkeyReq)
}

::google::protobuf::uint8* EosPubkeyReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eosapi.EosPubkeyReq)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosPubkeyReq.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eosapi.EosPubkeyReq)
  return target;
}

size_t EosPubkeyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eosapi.EosPubkeyReq)
  size_t total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EosPubkeyReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eosapi.EosPubkeyReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EosPubkeyReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EosPubkeyReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eosapi.EosPubkeyReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eosapi.EosPubkeyReq)
    UnsafeMergeFrom(*source);
  }
}

void EosPubkeyReq::MergeFrom(const EosPubkeyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eosapi.EosPubkeyReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EosPubkeyReq::UnsafeMergeFrom(const EosPubkeyReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void EosPubkeyReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eosapi.EosPubkeyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosPubkeyReq::CopyFrom(const EosPubkeyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eosapi.EosPubkeyReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EosPubkeyReq::IsInitialized() const {

  return true;
}

void EosPubkeyReq::Swap(EosPubkeyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosPubkeyReq::InternalSwap(EosPubkeyReq* other) {
  path_.Swap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EosPubkeyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EosPubkeyReq_descriptor_;
  metadata.reflection = EosPubkeyReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EosPubkeyReq

// optional string path = 1;
void EosPubkeyReq::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosPubkeyReq::path() const {
  // @@protoc_insertion_point(field_get:eosapi.EosPubkeyReq.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosPubkeyReq::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosPubkeyReq.path)
}
void EosPubkeyReq::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosPubkeyReq.path)
}
void EosPubkeyReq::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosPubkeyReq.path)
}
::std::string* EosPubkeyReq::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosPubkeyReq.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosPubkeyReq::release_path() {
  // @@protoc_insertion_point(field_release:eosapi.EosPubkeyReq.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosPubkeyReq::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosPubkeyReq.path)
}

inline const EosPubkeyReq* EosPubkeyReq::internal_default_instance() {
  return &EosPubkeyReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosPubkeyRes::kPubkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosPubkeyRes::EosPubkeyRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eosapi.EosPubkeyRes)
}

void EosPubkeyRes::InitAsDefaultInstance() {
}

EosPubkeyRes::EosPubkeyRes(const EosPubkeyRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eosapi.EosPubkeyRes)
}

void EosPubkeyRes::SharedCtor() {
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EosPubkeyRes::~EosPubkeyRes() {
  // @@protoc_insertion_point(destructor:eosapi.EosPubkeyRes)
  SharedDtor();
}

void EosPubkeyRes::SharedDtor() {
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosPubkeyRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EosPubkeyRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EosPubkeyRes_descriptor_;
}

const EosPubkeyRes& EosPubkeyRes::default_instance() {
  protobuf_InitDefaults_eos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EosPubkeyRes> EosPubkeyRes_default_instance_;

EosPubkeyRes* EosPubkeyRes::New(::google::protobuf::Arena* arena) const {
  EosPubkeyRes* n = new EosPubkeyRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EosPubkeyRes::Clear() {
// @@protoc_insertion_point(message_clear_start:eosapi.EosPubkeyRes)
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EosPubkeyRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eosapi.EosPubkeyRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pubkey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pubkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pubkey().data(), this->pubkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosPubkeyRes.pubkey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eosapi.EosPubkeyRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eosapi.EosPubkeyRes)
  return false;
#undef DO_
}

void EosPubkeyRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eosapi.EosPubkeyRes)
  // optional string pubkey = 1;
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pubkey().data(), this->pubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosPubkeyRes.pubkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pubkey(), output);
  }

  // @@protoc_insertion_point(serialize_end:eosapi.EosPubkeyRes)
}

::google::protobuf::uint8* EosPubkeyRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eosapi.EosPubkeyRes)
  // optional string pubkey = 1;
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pubkey().data(), this->pubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosPubkeyRes.pubkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pubkey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eosapi.EosPubkeyRes)
  return target;
}

size_t EosPubkeyRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eosapi.EosPubkeyRes)
  size_t total_size = 0;

  // optional string pubkey = 1;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pubkey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EosPubkeyRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eosapi.EosPubkeyRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EosPubkeyRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EosPubkeyRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eosapi.EosPubkeyRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eosapi.EosPubkeyRes)
    UnsafeMergeFrom(*source);
  }
}

void EosPubkeyRes::MergeFrom(const EosPubkeyRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eosapi.EosPubkeyRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EosPubkeyRes::UnsafeMergeFrom(const EosPubkeyRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
}

void EosPubkeyRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eosapi.EosPubkeyRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosPubkeyRes::CopyFrom(const EosPubkeyRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eosapi.EosPubkeyRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EosPubkeyRes::IsInitialized() const {

  return true;
}

void EosPubkeyRes::Swap(EosPubkeyRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosPubkeyRes::InternalSwap(EosPubkeyRes* other) {
  pubkey_.Swap(&other->pubkey_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EosPubkeyRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EosPubkeyRes_descriptor_;
  metadata.reflection = EosPubkeyRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EosPubkeyRes

// optional string pubkey = 1;
void EosPubkeyRes::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosPubkeyRes::pubkey() const {
  // @@protoc_insertion_point(field_get:eosapi.EosPubkeyRes.pubkey)
  return pubkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosPubkeyRes::set_pubkey(const ::std::string& value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosPubkeyRes.pubkey)
}
void EosPubkeyRes::set_pubkey(const char* value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosPubkeyRes.pubkey)
}
void EosPubkeyRes::set_pubkey(const char* value, size_t size) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosPubkeyRes.pubkey)
}
::std::string* EosPubkeyRes::mutable_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosPubkeyRes.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosPubkeyRes::release_pubkey() {
  // @@protoc_insertion_point(field_release:eosapi.EosPubkeyRes.pubkey)
  
  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosPubkeyRes::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosPubkeyRes.pubkey)
}

inline const EosPubkeyRes* EosPubkeyRes::internal_default_instance() {
  return &EosPubkeyRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosMessageSignReq::kPathFieldNumber;
const int EosMessageSignReq::kDataFieldNumber;
const int EosMessageSignReq::kIsHexFieldNumber;
const int EosMessageSignReq::kPubkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosMessageSignReq::EosMessageSignReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eosapi.EosMessageSignReq)
}

void EosMessageSignReq::InitAsDefaultInstance() {
}

EosMessageSignReq::EosMessageSignReq(const EosMessageSignReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eosapi.EosMessageSignReq)
}

void EosMessageSignReq::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_hex_ = false;
  _cached_size_ = 0;
}

EosMessageSignReq::~EosMessageSignReq() {
  // @@protoc_insertion_point(destructor:eosapi.EosMessageSignReq)
  SharedDtor();
}

void EosMessageSignReq::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosMessageSignReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EosMessageSignReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EosMessageSignReq_descriptor_;
}

const EosMessageSignReq& EosMessageSignReq::default_instance() {
  protobuf_InitDefaults_eos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EosMessageSignReq> EosMessageSignReq_default_instance_;

EosMessageSignReq* EosMessageSignReq::New(::google::protobuf::Arena* arena) const {
  EosMessageSignReq* n = new EosMessageSignReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EosMessageSignReq::Clear() {
// @@protoc_insertion_point(message_clear_start:eosapi.EosMessageSignReq)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_hex_ = false;
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EosMessageSignReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eosapi.EosMessageSignReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosMessageSignReq.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosMessageSignReq.data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_hex;
        break;
      }

      // optional bool is_hex = 3;
      case 3: {
        if (tag == 24) {
         parse_is_hex:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pubkey;
        break;
      }

      // optional string pubkey = 4;
      case 4: {
        if (tag == 34) {
         parse_pubkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pubkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pubkey().data(), this->pubkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosMessageSignReq.pubkey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eosapi.EosMessageSignReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eosapi.EosMessageSignReq)
  return false;
#undef DO_
}

void EosMessageSignReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eosapi.EosMessageSignReq)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosMessageSignReq.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosMessageSignReq.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // optional bool is_hex = 3;
  if (this->is_hex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_hex(), output);
  }

  // optional string pubkey = 4;
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pubkey().data(), this->pubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosMessageSignReq.pubkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pubkey(), output);
  }

  // @@protoc_insertion_point(serialize_end:eosapi.EosMessageSignReq)
}

::google::protobuf::uint8* EosMessageSignReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eosapi.EosMessageSignReq)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosMessageSignReq.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosMessageSignReq.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // optional bool is_hex = 3;
  if (this->is_hex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_hex(), target);
  }

  // optional string pubkey = 4;
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pubkey().data(), this->pubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosMessageSignReq.pubkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pubkey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eosapi.EosMessageSignReq)
  return target;
}

size_t EosMessageSignReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eosapi.EosMessageSignReq)
  size_t total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // optional bool is_hex = 3;
  if (this->is_hex() != 0) {
    total_size += 1 + 1;
  }

  // optional string pubkey = 4;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pubkey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EosMessageSignReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eosapi.EosMessageSignReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EosMessageSignReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EosMessageSignReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eosapi.EosMessageSignReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eosapi.EosMessageSignReq)
    UnsafeMergeFrom(*source);
  }
}

void EosMessageSignReq::MergeFrom(const EosMessageSignReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eosapi.EosMessageSignReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EosMessageSignReq::UnsafeMergeFrom(const EosMessageSignReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.is_hex() != 0) {
    set_is_hex(from.is_hex());
  }
  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
}

void EosMessageSignReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eosapi.EosMessageSignReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosMessageSignReq::CopyFrom(const EosMessageSignReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eosapi.EosMessageSignReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EosMessageSignReq::IsInitialized() const {

  return true;
}

void EosMessageSignReq::Swap(EosMessageSignReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosMessageSignReq::InternalSwap(EosMessageSignReq* other) {
  path_.Swap(&other->path_);
  data_.Swap(&other->data_);
  std::swap(is_hex_, other->is_hex_);
  pubkey_.Swap(&other->pubkey_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EosMessageSignReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EosMessageSignReq_descriptor_;
  metadata.reflection = EosMessageSignReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EosMessageSignReq

// optional string path = 1;
void EosMessageSignReq::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosMessageSignReq::path() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageSignReq.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosMessageSignReq::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageSignReq.path)
}
void EosMessageSignReq::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageSignReq.path)
}
void EosMessageSignReq::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageSignReq.path)
}
::std::string* EosMessageSignReq::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageSignReq.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosMessageSignReq::release_path() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageSignReq.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosMessageSignReq::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageSignReq.path)
}

// optional string data = 2;
void EosMessageSignReq::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosMessageSignReq::data() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageSignReq.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosMessageSignReq::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageSignReq.data)
}
void EosMessageSignReq::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageSignReq.data)
}
void EosMessageSignReq::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageSignReq.data)
}
::std::string* EosMessageSignReq::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageSignReq.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosMessageSignReq::release_data() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageSignReq.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosMessageSignReq::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageSignReq.data)
}

// optional bool is_hex = 3;
void EosMessageSignReq::clear_is_hex() {
  is_hex_ = false;
}
bool EosMessageSignReq::is_hex() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageSignReq.is_hex)
  return is_hex_;
}
void EosMessageSignReq::set_is_hex(bool value) {
  
  is_hex_ = value;
  // @@protoc_insertion_point(field_set:eosapi.EosMessageSignReq.is_hex)
}

// optional string pubkey = 4;
void EosMessageSignReq::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosMessageSignReq::pubkey() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageSignReq.pubkey)
  return pubkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosMessageSignReq::set_pubkey(const ::std::string& value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageSignReq.pubkey)
}
void EosMessageSignReq::set_pubkey(const char* value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageSignReq.pubkey)
}
void EosMessageSignReq::set_pubkey(const char* value, size_t size) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageSignReq.pubkey)
}
::std::string* EosMessageSignReq::mutable_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageSignReq.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosMessageSignReq::release_pubkey() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageSignReq.pubkey)
  
  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosMessageSignReq::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageSignReq.pubkey)
}

inline const EosMessageSignReq* EosMessageSignReq::internal_default_instance() {
  return &EosMessageSignReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosMessageSignRes::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosMessageSignRes::EosMessageSignRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eosapi.EosMessageSignRes)
}

void EosMessageSignRes::InitAsDefaultInstance() {
}

EosMessageSignRes::EosMessageSignRes(const EosMessageSignRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eosapi.EosMessageSignRes)
}

void EosMessageSignRes::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EosMessageSignRes::~EosMessageSignRes() {
  // @@protoc_insertion_point(destructor:eosapi.EosMessageSignRes)
  SharedDtor();
}

void EosMessageSignRes::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosMessageSignRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EosMessageSignRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EosMessageSignRes_descriptor_;
}

const EosMessageSignRes& EosMessageSignRes::default_instance() {
  protobuf_InitDefaults_eos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EosMessageSignRes> EosMessageSignRes_default_instance_;

EosMessageSignRes* EosMessageSignRes::New(::google::protobuf::Arena* arena) const {
  EosMessageSignRes* n = new EosMessageSignRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EosMessageSignRes::Clear() {
// @@protoc_insertion_point(message_clear_start:eosapi.EosMessageSignRes)
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EosMessageSignRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eosapi.EosMessageSignRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string signature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosMessageSignRes.signature"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eosapi.EosMessageSignRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eosapi.EosMessageSignRes)
  return false;
#undef DO_
}

void EosMessageSignRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eosapi.EosMessageSignRes)
  // optional string signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosMessageSignRes.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signature(), output);
  }

  // @@protoc_insertion_point(serialize_end:eosapi.EosMessageSignRes)
}

::google::protobuf::uint8* EosMessageSignRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eosapi.EosMessageSignRes)
  // optional string signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosMessageSignRes.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eosapi.EosMessageSignRes)
  return target;
}

size_t EosMessageSignRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eosapi.EosMessageSignRes)
  size_t total_size = 0;

  // optional string signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EosMessageSignRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eosapi.EosMessageSignRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EosMessageSignRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EosMessageSignRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eosapi.EosMessageSignRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eosapi.EosMessageSignRes)
    UnsafeMergeFrom(*source);
  }
}

void EosMessageSignRes::MergeFrom(const EosMessageSignRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eosapi.EosMessageSignRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EosMessageSignRes::UnsafeMergeFrom(const EosMessageSignRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void EosMessageSignRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eosapi.EosMessageSignRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosMessageSignRes::CopyFrom(const EosMessageSignRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eosapi.EosMessageSignRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EosMessageSignRes::IsInitialized() const {

  return true;
}

void EosMessageSignRes::Swap(EosMessageSignRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosMessageSignRes::InternalSwap(EosMessageSignRes* other) {
  signature_.Swap(&other->signature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EosMessageSignRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EosMessageSignRes_descriptor_;
  metadata.reflection = EosMessageSignRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EosMessageSignRes

// optional string signature = 1;
void EosMessageSignRes::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosMessageSignRes::signature() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageSignRes.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosMessageSignRes::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageSignRes.signature)
}
void EosMessageSignRes::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageSignRes.signature)
}
void EosMessageSignRes::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageSignRes.signature)
}
::std::string* EosMessageSignRes::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageSignRes.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosMessageSignRes::release_signature() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageSignRes.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosMessageSignRes::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageSignRes.signature)
}

inline const EosMessageSignRes* EosMessageSignRes::internal_default_instance() {
  return &EosMessageSignRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace eosapi

// @@protoc_insertion_point(global_scope)
