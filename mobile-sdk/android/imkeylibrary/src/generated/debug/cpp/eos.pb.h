// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eos.proto

#ifndef PROTOBUF_eos_2eproto__INCLUDED
#define PROTOBUF_eos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace eosapi {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_eos_2eproto();
void protobuf_InitDefaults_eos_2eproto();
void protobuf_AssignDesc_eos_2eproto();
void protobuf_ShutdownFile_eos_2eproto();

class EosMessageSignReq;
class EosMessageSignRes;
class EosPubkeyReq;
class EosPubkeyRes;
class EosSignData;
class EosSignResult;
class EosTxReq;
class EosTxRes;

// ===================================================================

class EosTxReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosTxReq) */ {
 public:
  EosTxReq();
  virtual ~EosTxReq();

  EosTxReq(const EosTxReq& from);

  inline EosTxReq& operator=(const EosTxReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosTxReq& default_instance();

  static const EosTxReq* internal_default_instance();

  void Swap(EosTxReq* other);

  // implements Message ----------------------------------------------

  inline EosTxReq* New() const { return New(NULL); }

  EosTxReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosTxReq& from);
  void MergeFrom(const EosTxReq& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosTxReq* other);
  void UnsafeMergeFrom(const EosTxReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // repeated .eosapi.EosSignData sign_datas = 2;
  int sign_datas_size() const;
  void clear_sign_datas();
  static const int kSignDatasFieldNumber = 2;
  const ::eosapi::EosSignData& sign_datas(int index) const;
  ::eosapi::EosSignData* mutable_sign_datas(int index);
  ::eosapi::EosSignData* add_sign_datas();
  ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData >*
      mutable_sign_datas();
  const ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData >&
      sign_datas() const;

  // @@protoc_insertion_point(class_scope:eosapi.EosTxReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData > sign_datas_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosTxReq> EosTxReq_default_instance_;

// -------------------------------------------------------------------

class EosSignData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosSignData) */ {
 public:
  EosSignData();
  virtual ~EosSignData();

  EosSignData(const EosSignData& from);

  inline EosSignData& operator=(const EosSignData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosSignData& default_instance();

  static const EosSignData* internal_default_instance();

  void Swap(EosSignData* other);

  // implements Message ----------------------------------------------

  inline EosSignData* New() const { return New(NULL); }

  EosSignData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosSignData& from);
  void MergeFrom(const EosSignData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosSignData* other);
  void UnsafeMergeFrom(const EosSignData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tx_data = 1;
  void clear_tx_data();
  static const int kTxDataFieldNumber = 1;
  const ::std::string& tx_data() const;
  void set_tx_data(const ::std::string& value);
  void set_tx_data(const char* value);
  void set_tx_data(const char* value, size_t size);
  ::std::string* mutable_tx_data();
  ::std::string* release_tx_data();
  void set_allocated_tx_data(::std::string* tx_data);

  // repeated string pub_keys = 2;
  int pub_keys_size() const;
  void clear_pub_keys();
  static const int kPubKeysFieldNumber = 2;
  const ::std::string& pub_keys(int index) const;
  ::std::string* mutable_pub_keys(int index);
  void set_pub_keys(int index, const ::std::string& value);
  void set_pub_keys(int index, const char* value);
  void set_pub_keys(int index, const char* value, size_t size);
  ::std::string* add_pub_keys();
  void add_pub_keys(const ::std::string& value);
  void add_pub_keys(const char* value);
  void add_pub_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pub_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pub_keys();

  // optional string chain_id = 3;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 3;
  const ::std::string& chain_id() const;
  void set_chain_id(const ::std::string& value);
  void set_chain_id(const char* value);
  void set_chain_id(const char* value, size_t size);
  ::std::string* mutable_chain_id();
  ::std::string* release_chain_id();
  void set_allocated_chain_id(::std::string* chain_id);

  // optional string to = 4;
  void clear_to();
  static const int kToFieldNumber = 4;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // optional string from = 5;
  void clear_from();
  static const int kFromFieldNumber = 5;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // optional string payment = 6;
  void clear_payment();
  static const int kPaymentFieldNumber = 6;
  const ::std::string& payment() const;
  void set_payment(const ::std::string& value);
  void set_payment(const char* value);
  void set_payment(const char* value, size_t size);
  ::std::string* mutable_payment();
  ::std::string* release_payment();
  void set_allocated_payment(::std::string* payment);

  // @@protoc_insertion_point(class_scope:eosapi.EosSignData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pub_keys_;
  ::google::protobuf::internal::ArenaStringPtr tx_data_;
  ::google::protobuf::internal::ArenaStringPtr chain_id_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr payment_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosSignData> EosSignData_default_instance_;

// -------------------------------------------------------------------

class EosTxRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosTxRes) */ {
 public:
  EosTxRes();
  virtual ~EosTxRes();

  EosTxRes(const EosTxRes& from);

  inline EosTxRes& operator=(const EosTxRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosTxRes& default_instance();

  static const EosTxRes* internal_default_instance();

  void Swap(EosTxRes* other);

  // implements Message ----------------------------------------------

  inline EosTxRes* New() const { return New(NULL); }

  EosTxRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosTxRes& from);
  void MergeFrom(const EosTxRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosTxRes* other);
  void UnsafeMergeFrom(const EosTxRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eosapi.EosSignResult trans_multi_signs = 1;
  int trans_multi_signs_size() const;
  void clear_trans_multi_signs();
  static const int kTransMultiSignsFieldNumber = 1;
  const ::eosapi::EosSignResult& trans_multi_signs(int index) const;
  ::eosapi::EosSignResult* mutable_trans_multi_signs(int index);
  ::eosapi::EosSignResult* add_trans_multi_signs();
  ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignResult >*
      mutable_trans_multi_signs();
  const ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignResult >&
      trans_multi_signs() const;

  // @@protoc_insertion_point(class_scope:eosapi.EosTxRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignResult > trans_multi_signs_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosTxRes> EosTxRes_default_instance_;

// -------------------------------------------------------------------

class EosSignResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosSignResult) */ {
 public:
  EosSignResult();
  virtual ~EosSignResult();

  EosSignResult(const EosSignResult& from);

  inline EosSignResult& operator=(const EosSignResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosSignResult& default_instance();

  static const EosSignResult* internal_default_instance();

  void Swap(EosSignResult* other);

  // implements Message ----------------------------------------------

  inline EosSignResult* New() const { return New(NULL); }

  EosSignResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosSignResult& from);
  void MergeFrom(const EosSignResult& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosSignResult* other);
  void UnsafeMergeFrom(const EosSignResult& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // repeated string signs = 2;
  int signs_size() const;
  void clear_signs();
  static const int kSignsFieldNumber = 2;
  const ::std::string& signs(int index) const;
  ::std::string* mutable_signs(int index);
  void set_signs(int index, const ::std::string& value);
  void set_signs(int index, const char* value);
  void set_signs(int index, const char* value, size_t size);
  ::std::string* add_signs();
  void add_signs(const ::std::string& value);
  void add_signs(const char* value);
  void add_signs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& signs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_signs();

  // @@protoc_insertion_point(class_scope:eosapi.EosSignResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> signs_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosSignResult> EosSignResult_default_instance_;

// -------------------------------------------------------------------

class EosPubkeyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosPubkeyReq) */ {
 public:
  EosPubkeyReq();
  virtual ~EosPubkeyReq();

  EosPubkeyReq(const EosPubkeyReq& from);

  inline EosPubkeyReq& operator=(const EosPubkeyReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosPubkeyReq& default_instance();

  static const EosPubkeyReq* internal_default_instance();

  void Swap(EosPubkeyReq* other);

  // implements Message ----------------------------------------------

  inline EosPubkeyReq* New() const { return New(NULL); }

  EosPubkeyReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosPubkeyReq& from);
  void MergeFrom(const EosPubkeyReq& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosPubkeyReq* other);
  void UnsafeMergeFrom(const EosPubkeyReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:eosapi.EosPubkeyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosPubkeyReq> EosPubkeyReq_default_instance_;

// -------------------------------------------------------------------

class EosPubkeyRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosPubkeyRes) */ {
 public:
  EosPubkeyRes();
  virtual ~EosPubkeyRes();

  EosPubkeyRes(const EosPubkeyRes& from);

  inline EosPubkeyRes& operator=(const EosPubkeyRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosPubkeyRes& default_instance();

  static const EosPubkeyRes* internal_default_instance();

  void Swap(EosPubkeyRes* other);

  // implements Message ----------------------------------------------

  inline EosPubkeyRes* New() const { return New(NULL); }

  EosPubkeyRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosPubkeyRes& from);
  void MergeFrom(const EosPubkeyRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosPubkeyRes* other);
  void UnsafeMergeFrom(const EosPubkeyRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pubkey = 1;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 1;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  void set_pubkey(const char* value);
  void set_pubkey(const char* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // @@protoc_insertion_point(class_scope:eosapi.EosPubkeyRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosPubkeyRes> EosPubkeyRes_default_instance_;

// -------------------------------------------------------------------

class EosMessageSignReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosMessageSignReq) */ {
 public:
  EosMessageSignReq();
  virtual ~EosMessageSignReq();

  EosMessageSignReq(const EosMessageSignReq& from);

  inline EosMessageSignReq& operator=(const EosMessageSignReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosMessageSignReq& default_instance();

  static const EosMessageSignReq* internal_default_instance();

  void Swap(EosMessageSignReq* other);

  // implements Message ----------------------------------------------

  inline EosMessageSignReq* New() const { return New(NULL); }

  EosMessageSignReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosMessageSignReq& from);
  void MergeFrom(const EosMessageSignReq& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosMessageSignReq* other);
  void UnsafeMergeFrom(const EosMessageSignReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional bool is_hex = 3;
  void clear_is_hex();
  static const int kIsHexFieldNumber = 3;
  bool is_hex() const;
  void set_is_hex(bool value);

  // optional string pubkey = 4;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 4;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  void set_pubkey(const char* value);
  void set_pubkey(const char* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // @@protoc_insertion_point(class_scope:eosapi.EosMessageSignReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  bool is_hex_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosMessageSignReq> EosMessageSignReq_default_instance_;

// -------------------------------------------------------------------

class EosMessageSignRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosMessageSignRes) */ {
 public:
  EosMessageSignRes();
  virtual ~EosMessageSignRes();

  EosMessageSignRes(const EosMessageSignRes& from);

  inline EosMessageSignRes& operator=(const EosMessageSignRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosMessageSignRes& default_instance();

  static const EosMessageSignRes* internal_default_instance();

  void Swap(EosMessageSignRes* other);

  // implements Message ----------------------------------------------

  inline EosMessageSignRes* New() const { return New(NULL); }

  EosMessageSignRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosMessageSignRes& from);
  void MergeFrom(const EosMessageSignRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosMessageSignRes* other);
  void UnsafeMergeFrom(const EosMessageSignRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:eosapi.EosMessageSignRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosMessageSignRes> EosMessageSignRes_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EosTxReq

// optional string path = 1;
inline void EosTxReq::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosTxReq::path() const {
  // @@protoc_insertion_point(field_get:eosapi.EosTxReq.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosTxReq::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosTxReq.path)
}
inline void EosTxReq::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosTxReq.path)
}
inline void EosTxReq::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosTxReq.path)
}
inline ::std::string* EosTxReq::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosTxReq.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosTxReq::release_path() {
  // @@protoc_insertion_point(field_release:eosapi.EosTxReq.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosTxReq::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosTxReq.path)
}

// repeated .eosapi.EosSignData sign_datas = 2;
inline int EosTxReq::sign_datas_size() const {
  return sign_datas_.size();
}
inline void EosTxReq::clear_sign_datas() {
  sign_datas_.Clear();
}
inline const ::eosapi::EosSignData& EosTxReq::sign_datas(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosTxReq.sign_datas)
  return sign_datas_.Get(index);
}
inline ::eosapi::EosSignData* EosTxReq::mutable_sign_datas(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosTxReq.sign_datas)
  return sign_datas_.Mutable(index);
}
inline ::eosapi::EosSignData* EosTxReq::add_sign_datas() {
  // @@protoc_insertion_point(field_add:eosapi.EosTxReq.sign_datas)
  return sign_datas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData >*
EosTxReq::mutable_sign_datas() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosTxReq.sign_datas)
  return &sign_datas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData >&
EosTxReq::sign_datas() const {
  // @@protoc_insertion_point(field_list:eosapi.EosTxReq.sign_datas)
  return sign_datas_;
}

inline const EosTxReq* EosTxReq::internal_default_instance() {
  return &EosTxReq_default_instance_.get();
}
// -------------------------------------------------------------------

// EosSignData

// optional string tx_data = 1;
inline void EosSignData::clear_tx_data() {
  tx_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosSignData::tx_data() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.tx_data)
  return tx_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_tx_data(const ::std::string& value) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.tx_data)
}
inline void EosSignData::set_tx_data(const char* value) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.tx_data)
}
inline void EosSignData::set_tx_data(const char* value, size_t size) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.tx_data)
}
inline ::std::string* EosSignData::mutable_tx_data() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.tx_data)
  return tx_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosSignData::release_tx_data() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.tx_data)
  
  return tx_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_allocated_tx_data(::std::string* tx_data) {
  if (tx_data != NULL) {
    
  } else {
    
  }
  tx_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_data);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.tx_data)
}

// repeated string pub_keys = 2;
inline int EosSignData::pub_keys_size() const {
  return pub_keys_.size();
}
inline void EosSignData::clear_pub_keys() {
  pub_keys_.Clear();
}
inline const ::std::string& EosSignData::pub_keys(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.pub_keys)
  return pub_keys_.Get(index);
}
inline ::std::string* EosSignData::mutable_pub_keys(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.pub_keys)
  return pub_keys_.Mutable(index);
}
inline void EosSignData::set_pub_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.pub_keys)
  pub_keys_.Mutable(index)->assign(value);
}
inline void EosSignData::set_pub_keys(int index, const char* value) {
  pub_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.pub_keys)
}
inline void EosSignData::set_pub_keys(int index, const char* value, size_t size) {
  pub_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.pub_keys)
}
inline ::std::string* EosSignData::add_pub_keys() {
  // @@protoc_insertion_point(field_add_mutable:eosapi.EosSignData.pub_keys)
  return pub_keys_.Add();
}
inline void EosSignData::add_pub_keys(const ::std::string& value) {
  pub_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eosapi.EosSignData.pub_keys)
}
inline void EosSignData::add_pub_keys(const char* value) {
  pub_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eosapi.EosSignData.pub_keys)
}
inline void EosSignData::add_pub_keys(const char* value, size_t size) {
  pub_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eosapi.EosSignData.pub_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EosSignData::pub_keys() const {
  // @@protoc_insertion_point(field_list:eosapi.EosSignData.pub_keys)
  return pub_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EosSignData::mutable_pub_keys() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosSignData.pub_keys)
  return &pub_keys_;
}

// optional string chain_id = 3;
inline void EosSignData::clear_chain_id() {
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosSignData::chain_id() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.chain_id)
  return chain_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_chain_id(const ::std::string& value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.chain_id)
}
inline void EosSignData::set_chain_id(const char* value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.chain_id)
}
inline void EosSignData::set_chain_id(const char* value, size_t size) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.chain_id)
}
inline ::std::string* EosSignData::mutable_chain_id() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.chain_id)
  return chain_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosSignData::release_chain_id() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.chain_id)
  
  return chain_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_allocated_chain_id(::std::string* chain_id) {
  if (chain_id != NULL) {
    
  } else {
    
  }
  chain_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_id);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.chain_id)
}

// optional string to = 4;
inline void EosSignData::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosSignData::to() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.to)
}
inline void EosSignData::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.to)
}
inline void EosSignData::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.to)
}
inline ::std::string* EosSignData::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosSignData::release_to() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.to)
}

// optional string from = 5;
inline void EosSignData::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosSignData::from() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.from)
  return from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.from)
}
inline void EosSignData::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.from)
}
inline void EosSignData::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.from)
}
inline ::std::string* EosSignData::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosSignData::release_from() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.from)
}

// optional string payment = 6;
inline void EosSignData::clear_payment() {
  payment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosSignData::payment() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.payment)
  return payment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_payment(const ::std::string& value) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.payment)
}
inline void EosSignData::set_payment(const char* value) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.payment)
}
inline void EosSignData::set_payment(const char* value, size_t size) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.payment)
}
inline ::std::string* EosSignData::mutable_payment() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.payment)
  return payment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosSignData::release_payment() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.payment)
  
  return payment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_allocated_payment(::std::string* payment) {
  if (payment != NULL) {
    
  } else {
    
  }
  payment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payment);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.payment)
}

inline const EosSignData* EosSignData::internal_default_instance() {
  return &EosSignData_default_instance_.get();
}
// -------------------------------------------------------------------

// EosTxRes

// repeated .eosapi.EosSignResult trans_multi_signs = 1;
inline int EosTxRes::trans_multi_signs_size() const {
  return trans_multi_signs_.size();
}
inline void EosTxRes::clear_trans_multi_signs() {
  trans_multi_signs_.Clear();
}
inline const ::eosapi::EosSignResult& EosTxRes::trans_multi_signs(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosTxRes.trans_multi_signs)
  return trans_multi_signs_.Get(index);
}
inline ::eosapi::EosSignResult* EosTxRes::mutable_trans_multi_signs(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosTxRes.trans_multi_signs)
  return trans_multi_signs_.Mutable(index);
}
inline ::eosapi::EosSignResult* EosTxRes::add_trans_multi_signs() {
  // @@protoc_insertion_point(field_add:eosapi.EosTxRes.trans_multi_signs)
  return trans_multi_signs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignResult >*
EosTxRes::mutable_trans_multi_signs() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosTxRes.trans_multi_signs)
  return &trans_multi_signs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignResult >&
EosTxRes::trans_multi_signs() const {
  // @@protoc_insertion_point(field_list:eosapi.EosTxRes.trans_multi_signs)
  return trans_multi_signs_;
}

inline const EosTxRes* EosTxRes::internal_default_instance() {
  return &EosTxRes_default_instance_.get();
}
// -------------------------------------------------------------------

// EosSignResult

// optional string hash = 1;
inline void EosSignResult::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosSignResult::hash() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignResult.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignResult::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignResult.hash)
}
inline void EosSignResult::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignResult.hash)
}
inline void EosSignResult::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignResult.hash)
}
inline ::std::string* EosSignResult::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignResult.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosSignResult::release_hash() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignResult.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignResult::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignResult.hash)
}

// repeated string signs = 2;
inline int EosSignResult::signs_size() const {
  return signs_.size();
}
inline void EosSignResult::clear_signs() {
  signs_.Clear();
}
inline const ::std::string& EosSignResult::signs(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignResult.signs)
  return signs_.Get(index);
}
inline ::std::string* EosSignResult::mutable_signs(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignResult.signs)
  return signs_.Mutable(index);
}
inline void EosSignResult::set_signs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:eosapi.EosSignResult.signs)
  signs_.Mutable(index)->assign(value);
}
inline void EosSignResult::set_signs(int index, const char* value) {
  signs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignResult.signs)
}
inline void EosSignResult::set_signs(int index, const char* value, size_t size) {
  signs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignResult.signs)
}
inline ::std::string* EosSignResult::add_signs() {
  // @@protoc_insertion_point(field_add_mutable:eosapi.EosSignResult.signs)
  return signs_.Add();
}
inline void EosSignResult::add_signs(const ::std::string& value) {
  signs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eosapi.EosSignResult.signs)
}
inline void EosSignResult::add_signs(const char* value) {
  signs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eosapi.EosSignResult.signs)
}
inline void EosSignResult::add_signs(const char* value, size_t size) {
  signs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eosapi.EosSignResult.signs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EosSignResult::signs() const {
  // @@protoc_insertion_point(field_list:eosapi.EosSignResult.signs)
  return signs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EosSignResult::mutable_signs() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosSignResult.signs)
  return &signs_;
}

inline const EosSignResult* EosSignResult::internal_default_instance() {
  return &EosSignResult_default_instance_.get();
}
// -------------------------------------------------------------------

// EosPubkeyReq

// optional string path = 1;
inline void EosPubkeyReq::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosPubkeyReq::path() const {
  // @@protoc_insertion_point(field_get:eosapi.EosPubkeyReq.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosPubkeyReq::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosPubkeyReq.path)
}
inline void EosPubkeyReq::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosPubkeyReq.path)
}
inline void EosPubkeyReq::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosPubkeyReq.path)
}
inline ::std::string* EosPubkeyReq::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosPubkeyReq.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosPubkeyReq::release_path() {
  // @@protoc_insertion_point(field_release:eosapi.EosPubkeyReq.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosPubkeyReq::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosPubkeyReq.path)
}

inline const EosPubkeyReq* EosPubkeyReq::internal_default_instance() {
  return &EosPubkeyReq_default_instance_.get();
}
// -------------------------------------------------------------------

// EosPubkeyRes

// optional string pubkey = 1;
inline void EosPubkeyRes::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosPubkeyRes::pubkey() const {
  // @@protoc_insertion_point(field_get:eosapi.EosPubkeyRes.pubkey)
  return pubkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosPubkeyRes::set_pubkey(const ::std::string& value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosPubkeyRes.pubkey)
}
inline void EosPubkeyRes::set_pubkey(const char* value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosPubkeyRes.pubkey)
}
inline void EosPubkeyRes::set_pubkey(const char* value, size_t size) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosPubkeyRes.pubkey)
}
inline ::std::string* EosPubkeyRes::mutable_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosPubkeyRes.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosPubkeyRes::release_pubkey() {
  // @@protoc_insertion_point(field_release:eosapi.EosPubkeyRes.pubkey)
  
  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosPubkeyRes::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosPubkeyRes.pubkey)
}

inline const EosPubkeyRes* EosPubkeyRes::internal_default_instance() {
  return &EosPubkeyRes_default_instance_.get();
}
// -------------------------------------------------------------------

// EosMessageSignReq

// optional string path = 1;
inline void EosMessageSignReq::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosMessageSignReq::path() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageSignReq.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageSignReq::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageSignReq.path)
}
inline void EosMessageSignReq::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageSignReq.path)
}
inline void EosMessageSignReq::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageSignReq.path)
}
inline ::std::string* EosMessageSignReq::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageSignReq.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosMessageSignReq::release_path() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageSignReq.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageSignReq::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageSignReq.path)
}

// optional string data = 2;
inline void EosMessageSignReq::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosMessageSignReq::data() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageSignReq.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageSignReq::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageSignReq.data)
}
inline void EosMessageSignReq::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageSignReq.data)
}
inline void EosMessageSignReq::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageSignReq.data)
}
inline ::std::string* EosMessageSignReq::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageSignReq.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosMessageSignReq::release_data() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageSignReq.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageSignReq::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageSignReq.data)
}

// optional bool is_hex = 3;
inline void EosMessageSignReq::clear_is_hex() {
  is_hex_ = false;
}
inline bool EosMessageSignReq::is_hex() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageSignReq.is_hex)
  return is_hex_;
}
inline void EosMessageSignReq::set_is_hex(bool value) {
  
  is_hex_ = value;
  // @@protoc_insertion_point(field_set:eosapi.EosMessageSignReq.is_hex)
}

// optional string pubkey = 4;
inline void EosMessageSignReq::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosMessageSignReq::pubkey() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageSignReq.pubkey)
  return pubkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageSignReq::set_pubkey(const ::std::string& value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageSignReq.pubkey)
}
inline void EosMessageSignReq::set_pubkey(const char* value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageSignReq.pubkey)
}
inline void EosMessageSignReq::set_pubkey(const char* value, size_t size) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageSignReq.pubkey)
}
inline ::std::string* EosMessageSignReq::mutable_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageSignReq.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosMessageSignReq::release_pubkey() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageSignReq.pubkey)
  
  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageSignReq::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageSignReq.pubkey)
}

inline const EosMessageSignReq* EosMessageSignReq::internal_default_instance() {
  return &EosMessageSignReq_default_instance_.get();
}
// -------------------------------------------------------------------

// EosMessageSignRes

// optional string signature = 1;
inline void EosMessageSignRes::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosMessageSignRes::signature() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageSignRes.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageSignRes::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageSignRes.signature)
}
inline void EosMessageSignRes::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageSignRes.signature)
}
inline void EosMessageSignRes::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageSignRes.signature)
}
inline ::std::string* EosMessageSignRes::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageSignRes.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosMessageSignRes::release_signature() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageSignRes.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageSignRes::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageSignRes.signature)
}

inline const EosMessageSignRes* EosMessageSignRes::internal_default_instance() {
  return &EosMessageSignRes_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace eosapi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_eos_2eproto__INCLUDED
