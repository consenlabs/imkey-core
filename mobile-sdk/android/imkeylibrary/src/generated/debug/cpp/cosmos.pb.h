// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos.proto

#ifndef PROTOBUF_cosmos_2eproto__INCLUDED
#define PROTOBUF_cosmos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)

namespace cosmosapi {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cosmos_2eproto();
void protobuf_InitDefaults_cosmos_2eproto();
void protobuf_AssignDesc_cosmos_2eproto();
void protobuf_ShutdownFile_cosmos_2eproto();

class Coin;
class CosmosAddressReq;
class CosmosAddressRes;
class CosmosTxReq;
class CosmosTxRes;
class Msg;
class MsgDelegateValue;
class MsgSendValue;
class MsgValue;
class SignData;
class StdFee;

// ===================================================================

class Coin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmosapi.Coin) */ {
 public:
  Coin();
  virtual ~Coin();

  Coin(const Coin& from);

  inline Coin& operator=(const Coin& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Coin& default_instance();

  static const Coin* internal_default_instance();

  void Swap(Coin* other);

  // implements Message ----------------------------------------------

  inline Coin* New() const { return New(NULL); }

  Coin* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Coin& from);
  void MergeFrom(const Coin& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Coin* other);
  void UnsafeMergeFrom(const Coin& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string amount = 1;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // optional string denom = 2;
  void clear_denom();
  static const int kDenomFieldNumber = 2;
  const ::std::string& denom() const;
  void set_denom(const ::std::string& value);
  void set_denom(const char* value);
  void set_denom(const char* value, size_t size);
  ::std::string* mutable_denom();
  ::std::string* release_denom();
  void set_allocated_denom(::std::string* denom);

  // @@protoc_insertion_point(class_scope:cosmosapi.Coin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::google::protobuf::internal::ArenaStringPtr denom_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_cosmos_2eproto_impl();
  friend void  protobuf_AddDesc_cosmos_2eproto_impl();
  friend void protobuf_AssignDesc_cosmos_2eproto();
  friend void protobuf_ShutdownFile_cosmos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Coin> Coin_default_instance_;

// -------------------------------------------------------------------

class StdFee : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmosapi.StdFee) */ {
 public:
  StdFee();
  virtual ~StdFee();

  StdFee(const StdFee& from);

  inline StdFee& operator=(const StdFee& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StdFee& default_instance();

  static const StdFee* internal_default_instance();

  void Swap(StdFee* other);

  // implements Message ----------------------------------------------

  inline StdFee* New() const { return New(NULL); }

  StdFee* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StdFee& from);
  void MergeFrom(const StdFee& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StdFee* other);
  void UnsafeMergeFrom(const StdFee& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cosmosapi.Coin amount = 1;
  int amount_size() const;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  const ::cosmosapi::Coin& amount(int index) const;
  ::cosmosapi::Coin* mutable_amount(int index);
  ::cosmosapi::Coin* add_amount();
  ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >*
      mutable_amount();
  const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >&
      amount() const;

  // optional string gas = 2;
  void clear_gas();
  static const int kGasFieldNumber = 2;
  const ::std::string& gas() const;
  void set_gas(const ::std::string& value);
  void set_gas(const char* value);
  void set_gas(const char* value, size_t size);
  ::std::string* mutable_gas();
  ::std::string* release_gas();
  void set_allocated_gas(::std::string* gas);

  // @@protoc_insertion_point(class_scope:cosmosapi.StdFee)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin > amount_;
  ::google::protobuf::internal::ArenaStringPtr gas_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_cosmos_2eproto_impl();
  friend void  protobuf_AddDesc_cosmos_2eproto_impl();
  friend void protobuf_AssignDesc_cosmos_2eproto();
  friend void protobuf_ShutdownFile_cosmos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<StdFee> StdFee_default_instance_;

// -------------------------------------------------------------------

class SignData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmosapi.SignData) */ {
 public:
  SignData();
  virtual ~SignData();

  SignData(const SignData& from);

  inline SignData& operator=(const SignData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignData& default_instance();

  static const SignData* internal_default_instance();

  void Swap(SignData* other);

  // implements Message ----------------------------------------------

  inline SignData* New() const { return New(NULL); }

  SignData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignData& from);
  void MergeFrom(const SignData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SignData* other);
  void UnsafeMergeFrom(const SignData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account_number = 1;
  void clear_account_number();
  static const int kAccountNumberFieldNumber = 1;
  const ::std::string& account_number() const;
  void set_account_number(const ::std::string& value);
  void set_account_number(const char* value);
  void set_account_number(const char* value, size_t size);
  ::std::string* mutable_account_number();
  ::std::string* release_account_number();
  void set_allocated_account_number(::std::string* account_number);

  // optional string chain_id = 2;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 2;
  const ::std::string& chain_id() const;
  void set_chain_id(const ::std::string& value);
  void set_chain_id(const char* value);
  void set_chain_id(const char* value, size_t size);
  ::std::string* mutable_chain_id();
  ::std::string* release_chain_id();
  void set_allocated_chain_id(::std::string* chain_id);

  // optional .cosmosapi.StdFee fee = 3;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 3;
  const ::cosmosapi::StdFee& fee() const;
  ::cosmosapi::StdFee* mutable_fee();
  ::cosmosapi::StdFee* release_fee();
  void set_allocated_fee(::cosmosapi::StdFee* fee);

  // optional .google.protobuf.StringValue memo = 4;
  bool has_memo() const;
  void clear_memo();
  static const int kMemoFieldNumber = 4;
  const ::google::protobuf::StringValue& memo() const;
  ::google::protobuf::StringValue* mutable_memo();
  ::google::protobuf::StringValue* release_memo();
  void set_allocated_memo(::google::protobuf::StringValue* memo);

  // repeated .cosmosapi.Msg msgs = 5;
  int msgs_size() const;
  void clear_msgs();
  static const int kMsgsFieldNumber = 5;
  const ::cosmosapi::Msg& msgs(int index) const;
  ::cosmosapi::Msg* mutable_msgs(int index);
  ::cosmosapi::Msg* add_msgs();
  ::google::protobuf::RepeatedPtrField< ::cosmosapi::Msg >*
      mutable_msgs();
  const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Msg >&
      msgs() const;

  // optional string sequence = 6;
  void clear_sequence();
  static const int kSequenceFieldNumber = 6;
  const ::std::string& sequence() const;
  void set_sequence(const ::std::string& value);
  void set_sequence(const char* value);
  void set_sequence(const char* value, size_t size);
  ::std::string* mutable_sequence();
  ::std::string* release_sequence();
  void set_allocated_sequence(::std::string* sequence);

  // @@protoc_insertion_point(class_scope:cosmosapi.SignData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cosmosapi::Msg > msgs_;
  ::google::protobuf::internal::ArenaStringPtr account_number_;
  ::google::protobuf::internal::ArenaStringPtr chain_id_;
  ::google::protobuf::internal::ArenaStringPtr sequence_;
  ::cosmosapi::StdFee* fee_;
  ::google::protobuf::StringValue* memo_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_cosmos_2eproto_impl();
  friend void  protobuf_AddDesc_cosmos_2eproto_impl();
  friend void protobuf_AssignDesc_cosmos_2eproto();
  friend void protobuf_ShutdownFile_cosmos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SignData> SignData_default_instance_;

// -------------------------------------------------------------------

class Msg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmosapi.Msg) */ {
 public:
  Msg();
  virtual ~Msg();

  Msg(const Msg& from);

  inline Msg& operator=(const Msg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg& default_instance();

  static const Msg* internal_default_instance();

  void Swap(Msg* other);

  // implements Message ----------------------------------------------

  inline Msg* New() const { return New(NULL); }

  Msg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg& from);
  void MergeFrom(const Msg& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Msg* other);
  void UnsafeMergeFrom(const Msg& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional .cosmosapi.MsgValue value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::cosmosapi::MsgValue& value() const;
  ::cosmosapi::MsgValue* mutable_value();
  ::cosmosapi::MsgValue* release_value();
  void set_allocated_value(::cosmosapi::MsgValue* value);

  // @@protoc_insertion_point(class_scope:cosmosapi.Msg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::cosmosapi::MsgValue* value_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_cosmos_2eproto_impl();
  friend void  protobuf_AddDesc_cosmos_2eproto_impl();
  friend void protobuf_AssignDesc_cosmos_2eproto();
  friend void protobuf_ShutdownFile_cosmos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Msg> Msg_default_instance_;

// -------------------------------------------------------------------

class MsgValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmosapi.MsgValue) */ {
 public:
  MsgValue();
  virtual ~MsgValue();

  MsgValue(const MsgValue& from);

  inline MsgValue& operator=(const MsgValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgValue& default_instance();

  static const MsgValue* internal_default_instance();

  void Swap(MsgValue* other);

  // implements Message ----------------------------------------------

  inline MsgValue* New() const { return New(NULL); }

  MsgValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgValue& from);
  void MergeFrom(const MsgValue& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgValue* other);
  void UnsafeMergeFrom(const MsgValue& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .cosmosapi.Coin amount = 1;
  int amount_size() const;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  const ::cosmosapi::Coin& amount(int index) const;
  ::cosmosapi::Coin* mutable_amount(int index);
  ::cosmosapi::Coin* add_amount();
  ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >*
      mutable_amount();
  const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >&
      amount() const;

  // map<string, string> addresses = 2;
  int addresses_size() const;
  void clear_addresses();
  static const int kAddressesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      addresses() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_addresses();

  // @@protoc_insertion_point(class_scope:cosmosapi.MsgValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin > amount_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      MsgValue_AddressesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > addresses_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_cosmos_2eproto_impl();
  friend void  protobuf_AddDesc_cosmos_2eproto_impl();
  friend void protobuf_AssignDesc_cosmos_2eproto();
  friend void protobuf_ShutdownFile_cosmos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MsgValue> MsgValue_default_instance_;

// -------------------------------------------------------------------

class MsgDelegateValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmosapi.MsgDelegateValue) */ {
 public:
  MsgDelegateValue();
  virtual ~MsgDelegateValue();

  MsgDelegateValue(const MsgDelegateValue& from);

  inline MsgDelegateValue& operator=(const MsgDelegateValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDelegateValue& default_instance();

  static const MsgDelegateValue* internal_default_instance();

  void Swap(MsgDelegateValue* other);

  // implements Message ----------------------------------------------

  inline MsgDelegateValue* New() const { return New(NULL); }

  MsgDelegateValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDelegateValue& from);
  void MergeFrom(const MsgDelegateValue& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgDelegateValue* other);
  void UnsafeMergeFrom(const MsgDelegateValue& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cosmosapi.Coin amount = 1;
  int amount_size() const;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  const ::cosmosapi::Coin& amount(int index) const;
  ::cosmosapi::Coin* mutable_amount(int index);
  ::cosmosapi::Coin* add_amount();
  ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >*
      mutable_amount();
  const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >&
      amount() const;

  // optional string delegator_address = 2;
  void clear_delegator_address();
  static const int kDelegatorAddressFieldNumber = 2;
  const ::std::string& delegator_address() const;
  void set_delegator_address(const ::std::string& value);
  void set_delegator_address(const char* value);
  void set_delegator_address(const char* value, size_t size);
  ::std::string* mutable_delegator_address();
  ::std::string* release_delegator_address();
  void set_allocated_delegator_address(::std::string* delegator_address);

  // optional string validator_address = 3;
  void clear_validator_address();
  static const int kValidatorAddressFieldNumber = 3;
  const ::std::string& validator_address() const;
  void set_validator_address(const ::std::string& value);
  void set_validator_address(const char* value);
  void set_validator_address(const char* value, size_t size);
  ::std::string* mutable_validator_address();
  ::std::string* release_validator_address();
  void set_allocated_validator_address(::std::string* validator_address);

  // @@protoc_insertion_point(class_scope:cosmosapi.MsgDelegateValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin > amount_;
  ::google::protobuf::internal::ArenaStringPtr delegator_address_;
  ::google::protobuf::internal::ArenaStringPtr validator_address_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_cosmos_2eproto_impl();
  friend void  protobuf_AddDesc_cosmos_2eproto_impl();
  friend void protobuf_AssignDesc_cosmos_2eproto();
  friend void protobuf_ShutdownFile_cosmos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MsgDelegateValue> MsgDelegateValue_default_instance_;

// -------------------------------------------------------------------

class MsgSendValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmosapi.MsgSendValue) */ {
 public:
  MsgSendValue();
  virtual ~MsgSendValue();

  MsgSendValue(const MsgSendValue& from);

  inline MsgSendValue& operator=(const MsgSendValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSendValue& default_instance();

  static const MsgSendValue* internal_default_instance();

  void Swap(MsgSendValue* other);

  // implements Message ----------------------------------------------

  inline MsgSendValue* New() const { return New(NULL); }

  MsgSendValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSendValue& from);
  void MergeFrom(const MsgSendValue& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgSendValue* other);
  void UnsafeMergeFrom(const MsgSendValue& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cosmosapi.Coin amount = 1;
  int amount_size() const;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  const ::cosmosapi::Coin& amount(int index) const;
  ::cosmosapi::Coin* mutable_amount(int index);
  ::cosmosapi::Coin* add_amount();
  ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >*
      mutable_amount();
  const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >&
      amount() const;

  // optional string from_address = 2;
  void clear_from_address();
  static const int kFromAddressFieldNumber = 2;
  const ::std::string& from_address() const;
  void set_from_address(const ::std::string& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  ::std::string* mutable_from_address();
  ::std::string* release_from_address();
  void set_allocated_from_address(::std::string* from_address);

  // optional string to_address = 3;
  void clear_to_address();
  static const int kToAddressFieldNumber = 3;
  const ::std::string& to_address() const;
  void set_to_address(const ::std::string& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  ::std::string* mutable_to_address();
  ::std::string* release_to_address();
  void set_allocated_to_address(::std::string* to_address);

  // @@protoc_insertion_point(class_scope:cosmosapi.MsgSendValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin > amount_;
  ::google::protobuf::internal::ArenaStringPtr from_address_;
  ::google::protobuf::internal::ArenaStringPtr to_address_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_cosmos_2eproto_impl();
  friend void  protobuf_AddDesc_cosmos_2eproto_impl();
  friend void protobuf_AssignDesc_cosmos_2eproto();
  friend void protobuf_ShutdownFile_cosmos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MsgSendValue> MsgSendValue_default_instance_;

// -------------------------------------------------------------------

class CosmosTxReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmosapi.CosmosTxReq) */ {
 public:
  CosmosTxReq();
  virtual ~CosmosTxReq();

  CosmosTxReq(const CosmosTxReq& from);

  inline CosmosTxReq& operator=(const CosmosTxReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CosmosTxReq& default_instance();

  static const CosmosTxReq* internal_default_instance();

  void Swap(CosmosTxReq* other);

  // implements Message ----------------------------------------------

  inline CosmosTxReq* New() const { return New(NULL); }

  CosmosTxReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CosmosTxReq& from);
  void MergeFrom(const CosmosTxReq& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CosmosTxReq* other);
  void UnsafeMergeFrom(const CosmosTxReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cosmosapi.SignData signData = 1;
  bool has_signdata() const;
  void clear_signdata();
  static const int kSignDataFieldNumber = 1;
  const ::cosmosapi::SignData& signdata() const;
  ::cosmosapi::SignData* mutable_signdata();
  ::cosmosapi::SignData* release_signdata();
  void set_allocated_signdata(::cosmosapi::SignData* signdata);

  // optional string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string payment_dis = 3;
  void clear_payment_dis();
  static const int kPaymentDisFieldNumber = 3;
  const ::std::string& payment_dis() const;
  void set_payment_dis(const ::std::string& value);
  void set_payment_dis(const char* value);
  void set_payment_dis(const char* value, size_t size);
  ::std::string* mutable_payment_dis();
  ::std::string* release_payment_dis();
  void set_allocated_payment_dis(::std::string* payment_dis);

  // optional string to_dis = 4;
  void clear_to_dis();
  static const int kToDisFieldNumber = 4;
  const ::std::string& to_dis() const;
  void set_to_dis(const ::std::string& value);
  void set_to_dis(const char* value);
  void set_to_dis(const char* value, size_t size);
  ::std::string* mutable_to_dis();
  ::std::string* release_to_dis();
  void set_allocated_to_dis(::std::string* to_dis);

  // optional string from_dis = 5;
  void clear_from_dis();
  static const int kFromDisFieldNumber = 5;
  const ::std::string& from_dis() const;
  void set_from_dis(const ::std::string& value);
  void set_from_dis(const char* value);
  void set_from_dis(const char* value, size_t size);
  ::std::string* mutable_from_dis();
  ::std::string* release_from_dis();
  void set_allocated_from_dis(::std::string* from_dis);

  // optional string fee_dis = 6;
  void clear_fee_dis();
  static const int kFeeDisFieldNumber = 6;
  const ::std::string& fee_dis() const;
  void set_fee_dis(const ::std::string& value);
  void set_fee_dis(const char* value);
  void set_fee_dis(const char* value, size_t size);
  ::std::string* mutable_fee_dis();
  ::std::string* release_fee_dis();
  void set_allocated_fee_dis(::std::string* fee_dis);

  // @@protoc_insertion_point(class_scope:cosmosapi.CosmosTxReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr payment_dis_;
  ::google::protobuf::internal::ArenaStringPtr to_dis_;
  ::google::protobuf::internal::ArenaStringPtr from_dis_;
  ::google::protobuf::internal::ArenaStringPtr fee_dis_;
  ::cosmosapi::SignData* signdata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_cosmos_2eproto_impl();
  friend void  protobuf_AddDesc_cosmos_2eproto_impl();
  friend void protobuf_AssignDesc_cosmos_2eproto();
  friend void protobuf_ShutdownFile_cosmos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CosmosTxReq> CosmosTxReq_default_instance_;

// -------------------------------------------------------------------

class CosmosTxRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmosapi.CosmosTxRes) */ {
 public:
  CosmosTxRes();
  virtual ~CosmosTxRes();

  CosmosTxRes(const CosmosTxRes& from);

  inline CosmosTxRes& operator=(const CosmosTxRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CosmosTxRes& default_instance();

  static const CosmosTxRes* internal_default_instance();

  void Swap(CosmosTxRes* other);

  // implements Message ----------------------------------------------

  inline CosmosTxRes* New() const { return New(NULL); }

  CosmosTxRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CosmosTxRes& from);
  void MergeFrom(const CosmosTxRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CosmosTxRes* other);
  void UnsafeMergeFrom(const CosmosTxRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tx_data = 1;
  void clear_tx_data();
  static const int kTxDataFieldNumber = 1;
  const ::std::string& tx_data() const;
  void set_tx_data(const ::std::string& value);
  void set_tx_data(const char* value);
  void set_tx_data(const char* value, size_t size);
  ::std::string* mutable_tx_data();
  ::std::string* release_tx_data();
  void set_allocated_tx_data(::std::string* tx_data);

  // optional string tx_hash = 2;
  void clear_tx_hash();
  static const int kTxHashFieldNumber = 2;
  const ::std::string& tx_hash() const;
  void set_tx_hash(const ::std::string& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const char* value, size_t size);
  ::std::string* mutable_tx_hash();
  ::std::string* release_tx_hash();
  void set_allocated_tx_hash(::std::string* tx_hash);

  // @@protoc_insertion_point(class_scope:cosmosapi.CosmosTxRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tx_data_;
  ::google::protobuf::internal::ArenaStringPtr tx_hash_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_cosmos_2eproto_impl();
  friend void  protobuf_AddDesc_cosmos_2eproto_impl();
  friend void protobuf_AssignDesc_cosmos_2eproto();
  friend void protobuf_ShutdownFile_cosmos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CosmosTxRes> CosmosTxRes_default_instance_;

// -------------------------------------------------------------------

class CosmosAddressReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmosapi.CosmosAddressReq) */ {
 public:
  CosmosAddressReq();
  virtual ~CosmosAddressReq();

  CosmosAddressReq(const CosmosAddressReq& from);

  inline CosmosAddressReq& operator=(const CosmosAddressReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CosmosAddressReq& default_instance();

  static const CosmosAddressReq* internal_default_instance();

  void Swap(CosmosAddressReq* other);

  // implements Message ----------------------------------------------

  inline CosmosAddressReq* New() const { return New(NULL); }

  CosmosAddressReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CosmosAddressReq& from);
  void MergeFrom(const CosmosAddressReq& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CosmosAddressReq* other);
  void UnsafeMergeFrom(const CosmosAddressReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:cosmosapi.CosmosAddressReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_cosmos_2eproto_impl();
  friend void  protobuf_AddDesc_cosmos_2eproto_impl();
  friend void protobuf_AssignDesc_cosmos_2eproto();
  friend void protobuf_ShutdownFile_cosmos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CosmosAddressReq> CosmosAddressReq_default_instance_;

// -------------------------------------------------------------------

class CosmosAddressRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmosapi.CosmosAddressRes) */ {
 public:
  CosmosAddressRes();
  virtual ~CosmosAddressRes();

  CosmosAddressRes(const CosmosAddressRes& from);

  inline CosmosAddressRes& operator=(const CosmosAddressRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CosmosAddressRes& default_instance();

  static const CosmosAddressRes* internal_default_instance();

  void Swap(CosmosAddressRes* other);

  // implements Message ----------------------------------------------

  inline CosmosAddressRes* New() const { return New(NULL); }

  CosmosAddressRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CosmosAddressRes& from);
  void MergeFrom(const CosmosAddressRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CosmosAddressRes* other);
  void UnsafeMergeFrom(const CosmosAddressRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:cosmosapi.CosmosAddressRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_cosmos_2eproto_impl();
  friend void  protobuf_AddDesc_cosmos_2eproto_impl();
  friend void protobuf_AssignDesc_cosmos_2eproto();
  friend void protobuf_ShutdownFile_cosmos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CosmosAddressRes> CosmosAddressRes_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Coin

// optional string amount = 1;
inline void Coin::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Coin::amount() const {
  // @@protoc_insertion_point(field_get:cosmosapi.Coin.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Coin::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.Coin.amount)
}
inline void Coin::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.Coin.amount)
}
inline void Coin::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.Coin.amount)
}
inline ::std::string* Coin::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.Coin.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Coin::release_amount() {
  // @@protoc_insertion_point(field_release:cosmosapi.Coin.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Coin::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.Coin.amount)
}

// optional string denom = 2;
inline void Coin::clear_denom() {
  denom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Coin::denom() const {
  // @@protoc_insertion_point(field_get:cosmosapi.Coin.denom)
  return denom_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Coin::set_denom(const ::std::string& value) {
  
  denom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.Coin.denom)
}
inline void Coin::set_denom(const char* value) {
  
  denom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.Coin.denom)
}
inline void Coin::set_denom(const char* value, size_t size) {
  
  denom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.Coin.denom)
}
inline ::std::string* Coin::mutable_denom() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.Coin.denom)
  return denom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Coin::release_denom() {
  // @@protoc_insertion_point(field_release:cosmosapi.Coin.denom)
  
  return denom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Coin::set_allocated_denom(::std::string* denom) {
  if (denom != NULL) {
    
  } else {
    
  }
  denom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), denom);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.Coin.denom)
}

inline const Coin* Coin::internal_default_instance() {
  return &Coin_default_instance_.get();
}
// -------------------------------------------------------------------

// StdFee

// repeated .cosmosapi.Coin amount = 1;
inline int StdFee::amount_size() const {
  return amount_.size();
}
inline void StdFee::clear_amount() {
  amount_.Clear();
}
inline const ::cosmosapi::Coin& StdFee::amount(int index) const {
  // @@protoc_insertion_point(field_get:cosmosapi.StdFee.amount)
  return amount_.Get(index);
}
inline ::cosmosapi::Coin* StdFee::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:cosmosapi.StdFee.amount)
  return amount_.Mutable(index);
}
inline ::cosmosapi::Coin* StdFee::add_amount() {
  // @@protoc_insertion_point(field_add:cosmosapi.StdFee.amount)
  return amount_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >*
StdFee::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:cosmosapi.StdFee.amount)
  return &amount_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >&
StdFee::amount() const {
  // @@protoc_insertion_point(field_list:cosmosapi.StdFee.amount)
  return amount_;
}

// optional string gas = 2;
inline void StdFee::clear_gas() {
  gas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StdFee::gas() const {
  // @@protoc_insertion_point(field_get:cosmosapi.StdFee.gas)
  return gas_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StdFee::set_gas(const ::std::string& value) {
  
  gas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.StdFee.gas)
}
inline void StdFee::set_gas(const char* value) {
  
  gas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.StdFee.gas)
}
inline void StdFee::set_gas(const char* value, size_t size) {
  
  gas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.StdFee.gas)
}
inline ::std::string* StdFee::mutable_gas() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.StdFee.gas)
  return gas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StdFee::release_gas() {
  // @@protoc_insertion_point(field_release:cosmosapi.StdFee.gas)
  
  return gas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StdFee::set_allocated_gas(::std::string* gas) {
  if (gas != NULL) {
    
  } else {
    
  }
  gas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gas);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.StdFee.gas)
}

inline const StdFee* StdFee::internal_default_instance() {
  return &StdFee_default_instance_.get();
}
// -------------------------------------------------------------------

// SignData

// optional string account_number = 1;
inline void SignData::clear_account_number() {
  account_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignData::account_number() const {
  // @@protoc_insertion_point(field_get:cosmosapi.SignData.account_number)
  return account_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignData::set_account_number(const ::std::string& value) {
  
  account_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.SignData.account_number)
}
inline void SignData::set_account_number(const char* value) {
  
  account_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.SignData.account_number)
}
inline void SignData::set_account_number(const char* value, size_t size) {
  
  account_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.SignData.account_number)
}
inline ::std::string* SignData::mutable_account_number() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.SignData.account_number)
  return account_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignData::release_account_number() {
  // @@protoc_insertion_point(field_release:cosmosapi.SignData.account_number)
  
  return account_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignData::set_allocated_account_number(::std::string* account_number) {
  if (account_number != NULL) {
    
  } else {
    
  }
  account_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_number);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.SignData.account_number)
}

// optional string chain_id = 2;
inline void SignData::clear_chain_id() {
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignData::chain_id() const {
  // @@protoc_insertion_point(field_get:cosmosapi.SignData.chain_id)
  return chain_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignData::set_chain_id(const ::std::string& value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.SignData.chain_id)
}
inline void SignData::set_chain_id(const char* value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.SignData.chain_id)
}
inline void SignData::set_chain_id(const char* value, size_t size) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.SignData.chain_id)
}
inline ::std::string* SignData::mutable_chain_id() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.SignData.chain_id)
  return chain_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignData::release_chain_id() {
  // @@protoc_insertion_point(field_release:cosmosapi.SignData.chain_id)
  
  return chain_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignData::set_allocated_chain_id(::std::string* chain_id) {
  if (chain_id != NULL) {
    
  } else {
    
  }
  chain_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_id);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.SignData.chain_id)
}

// optional .cosmosapi.StdFee fee = 3;
inline bool SignData::has_fee() const {
  return this != internal_default_instance() && fee_ != NULL;
}
inline void SignData::clear_fee() {
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
}
inline const ::cosmosapi::StdFee& SignData::fee() const {
  // @@protoc_insertion_point(field_get:cosmosapi.SignData.fee)
  return fee_ != NULL ? *fee_
                         : *::cosmosapi::StdFee::internal_default_instance();
}
inline ::cosmosapi::StdFee* SignData::mutable_fee() {
  
  if (fee_ == NULL) {
    fee_ = new ::cosmosapi::StdFee;
  }
  // @@protoc_insertion_point(field_mutable:cosmosapi.SignData.fee)
  return fee_;
}
inline ::cosmosapi::StdFee* SignData::release_fee() {
  // @@protoc_insertion_point(field_release:cosmosapi.SignData.fee)
  
  ::cosmosapi::StdFee* temp = fee_;
  fee_ = NULL;
  return temp;
}
inline void SignData::set_allocated_fee(::cosmosapi::StdFee* fee) {
  delete fee_;
  fee_ = fee;
  if (fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.SignData.fee)
}

// optional .google.protobuf.StringValue memo = 4;
inline bool SignData::has_memo() const {
  return this != internal_default_instance() && memo_ != NULL;
}
inline void SignData::clear_memo() {
  if (GetArenaNoVirtual() == NULL && memo_ != NULL) delete memo_;
  memo_ = NULL;
}
inline const ::google::protobuf::StringValue& SignData::memo() const {
  // @@protoc_insertion_point(field_get:cosmosapi.SignData.memo)
  return memo_ != NULL ? *memo_
                         : *::google::protobuf::StringValue::internal_default_instance();
}
inline ::google::protobuf::StringValue* SignData::mutable_memo() {
  
  if (memo_ == NULL) {
    memo_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmosapi.SignData.memo)
  return memo_;
}
inline ::google::protobuf::StringValue* SignData::release_memo() {
  // @@protoc_insertion_point(field_release:cosmosapi.SignData.memo)
  
  ::google::protobuf::StringValue* temp = memo_;
  memo_ = NULL;
  return temp;
}
inline void SignData::set_allocated_memo(::google::protobuf::StringValue* memo) {
  delete memo_;
  if (memo != NULL && memo->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_memo = new ::google::protobuf::StringValue;
    new_memo->CopyFrom(*memo);
    memo = new_memo;
  }
  memo_ = memo;
  if (memo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.SignData.memo)
}

// repeated .cosmosapi.Msg msgs = 5;
inline int SignData::msgs_size() const {
  return msgs_.size();
}
inline void SignData::clear_msgs() {
  msgs_.Clear();
}
inline const ::cosmosapi::Msg& SignData::msgs(int index) const {
  // @@protoc_insertion_point(field_get:cosmosapi.SignData.msgs)
  return msgs_.Get(index);
}
inline ::cosmosapi::Msg* SignData::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:cosmosapi.SignData.msgs)
  return msgs_.Mutable(index);
}
inline ::cosmosapi::Msg* SignData::add_msgs() {
  // @@protoc_insertion_point(field_add:cosmosapi.SignData.msgs)
  return msgs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmosapi::Msg >*
SignData::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:cosmosapi.SignData.msgs)
  return &msgs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Msg >&
SignData::msgs() const {
  // @@protoc_insertion_point(field_list:cosmosapi.SignData.msgs)
  return msgs_;
}

// optional string sequence = 6;
inline void SignData::clear_sequence() {
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignData::sequence() const {
  // @@protoc_insertion_point(field_get:cosmosapi.SignData.sequence)
  return sequence_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignData::set_sequence(const ::std::string& value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.SignData.sequence)
}
inline void SignData::set_sequence(const char* value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.SignData.sequence)
}
inline void SignData::set_sequence(const char* value, size_t size) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.SignData.sequence)
}
inline ::std::string* SignData::mutable_sequence() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.SignData.sequence)
  return sequence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignData::release_sequence() {
  // @@protoc_insertion_point(field_release:cosmosapi.SignData.sequence)
  
  return sequence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignData::set_allocated_sequence(::std::string* sequence) {
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.SignData.sequence)
}

inline const SignData* SignData::internal_default_instance() {
  return &SignData_default_instance_.get();
}
// -------------------------------------------------------------------

// Msg

// optional string type = 1;
inline void Msg::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Msg::type() const {
  // @@protoc_insertion_point(field_get:cosmosapi.Msg.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Msg::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.Msg.type)
}
inline void Msg::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.Msg.type)
}
inline void Msg::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.Msg.type)
}
inline ::std::string* Msg::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.Msg.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Msg::release_type() {
  // @@protoc_insertion_point(field_release:cosmosapi.Msg.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Msg::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.Msg.type)
}

// optional .cosmosapi.MsgValue value = 2;
inline bool Msg::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void Msg::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::cosmosapi::MsgValue& Msg::value() const {
  // @@protoc_insertion_point(field_get:cosmosapi.Msg.value)
  return value_ != NULL ? *value_
                         : *::cosmosapi::MsgValue::internal_default_instance();
}
inline ::cosmosapi::MsgValue* Msg::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::cosmosapi::MsgValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmosapi.Msg.value)
  return value_;
}
inline ::cosmosapi::MsgValue* Msg::release_value() {
  // @@protoc_insertion_point(field_release:cosmosapi.Msg.value)
  
  ::cosmosapi::MsgValue* temp = value_;
  value_ = NULL;
  return temp;
}
inline void Msg::set_allocated_value(::cosmosapi::MsgValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.Msg.value)
}

inline const Msg* Msg::internal_default_instance() {
  return &Msg_default_instance_.get();
}
// -------------------------------------------------------------------

// MsgValue

// repeated .cosmosapi.Coin amount = 1;
inline int MsgValue::amount_size() const {
  return amount_.size();
}
inline void MsgValue::clear_amount() {
  amount_.Clear();
}
inline const ::cosmosapi::Coin& MsgValue::amount(int index) const {
  // @@protoc_insertion_point(field_get:cosmosapi.MsgValue.amount)
  return amount_.Get(index);
}
inline ::cosmosapi::Coin* MsgValue::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:cosmosapi.MsgValue.amount)
  return amount_.Mutable(index);
}
inline ::cosmosapi::Coin* MsgValue::add_amount() {
  // @@protoc_insertion_point(field_add:cosmosapi.MsgValue.amount)
  return amount_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >*
MsgValue::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:cosmosapi.MsgValue.amount)
  return &amount_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >&
MsgValue::amount() const {
  // @@protoc_insertion_point(field_list:cosmosapi.MsgValue.amount)
  return amount_;
}

// map<string, string> addresses = 2;
inline int MsgValue::addresses_size() const {
  return addresses_.size();
}
inline void MsgValue::clear_addresses() {
  addresses_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
MsgValue::addresses() const {
  // @@protoc_insertion_point(field_map:cosmosapi.MsgValue.addresses)
  return addresses_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
MsgValue::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_map:cosmosapi.MsgValue.addresses)
  return addresses_.MutableMap();
}

inline const MsgValue* MsgValue::internal_default_instance() {
  return &MsgValue_default_instance_.get();
}
// -------------------------------------------------------------------

// MsgDelegateValue

// repeated .cosmosapi.Coin amount = 1;
inline int MsgDelegateValue::amount_size() const {
  return amount_.size();
}
inline void MsgDelegateValue::clear_amount() {
  amount_.Clear();
}
inline const ::cosmosapi::Coin& MsgDelegateValue::amount(int index) const {
  // @@protoc_insertion_point(field_get:cosmosapi.MsgDelegateValue.amount)
  return amount_.Get(index);
}
inline ::cosmosapi::Coin* MsgDelegateValue::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:cosmosapi.MsgDelegateValue.amount)
  return amount_.Mutable(index);
}
inline ::cosmosapi::Coin* MsgDelegateValue::add_amount() {
  // @@protoc_insertion_point(field_add:cosmosapi.MsgDelegateValue.amount)
  return amount_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >*
MsgDelegateValue::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:cosmosapi.MsgDelegateValue.amount)
  return &amount_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >&
MsgDelegateValue::amount() const {
  // @@protoc_insertion_point(field_list:cosmosapi.MsgDelegateValue.amount)
  return amount_;
}

// optional string delegator_address = 2;
inline void MsgDelegateValue::clear_delegator_address() {
  delegator_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgDelegateValue::delegator_address() const {
  // @@protoc_insertion_point(field_get:cosmosapi.MsgDelegateValue.delegator_address)
  return delegator_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgDelegateValue::set_delegator_address(const ::std::string& value) {
  
  delegator_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.MsgDelegateValue.delegator_address)
}
inline void MsgDelegateValue::set_delegator_address(const char* value) {
  
  delegator_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.MsgDelegateValue.delegator_address)
}
inline void MsgDelegateValue::set_delegator_address(const char* value, size_t size) {
  
  delegator_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.MsgDelegateValue.delegator_address)
}
inline ::std::string* MsgDelegateValue::mutable_delegator_address() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.MsgDelegateValue.delegator_address)
  return delegator_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgDelegateValue::release_delegator_address() {
  // @@protoc_insertion_point(field_release:cosmosapi.MsgDelegateValue.delegator_address)
  
  return delegator_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgDelegateValue::set_allocated_delegator_address(::std::string* delegator_address) {
  if (delegator_address != NULL) {
    
  } else {
    
  }
  delegator_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delegator_address);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.MsgDelegateValue.delegator_address)
}

// optional string validator_address = 3;
inline void MsgDelegateValue::clear_validator_address() {
  validator_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgDelegateValue::validator_address() const {
  // @@protoc_insertion_point(field_get:cosmosapi.MsgDelegateValue.validator_address)
  return validator_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgDelegateValue::set_validator_address(const ::std::string& value) {
  
  validator_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.MsgDelegateValue.validator_address)
}
inline void MsgDelegateValue::set_validator_address(const char* value) {
  
  validator_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.MsgDelegateValue.validator_address)
}
inline void MsgDelegateValue::set_validator_address(const char* value, size_t size) {
  
  validator_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.MsgDelegateValue.validator_address)
}
inline ::std::string* MsgDelegateValue::mutable_validator_address() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.MsgDelegateValue.validator_address)
  return validator_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgDelegateValue::release_validator_address() {
  // @@protoc_insertion_point(field_release:cosmosapi.MsgDelegateValue.validator_address)
  
  return validator_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgDelegateValue::set_allocated_validator_address(::std::string* validator_address) {
  if (validator_address != NULL) {
    
  } else {
    
  }
  validator_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), validator_address);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.MsgDelegateValue.validator_address)
}

inline const MsgDelegateValue* MsgDelegateValue::internal_default_instance() {
  return &MsgDelegateValue_default_instance_.get();
}
// -------------------------------------------------------------------

// MsgSendValue

// repeated .cosmosapi.Coin amount = 1;
inline int MsgSendValue::amount_size() const {
  return amount_.size();
}
inline void MsgSendValue::clear_amount() {
  amount_.Clear();
}
inline const ::cosmosapi::Coin& MsgSendValue::amount(int index) const {
  // @@protoc_insertion_point(field_get:cosmosapi.MsgSendValue.amount)
  return amount_.Get(index);
}
inline ::cosmosapi::Coin* MsgSendValue::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:cosmosapi.MsgSendValue.amount)
  return amount_.Mutable(index);
}
inline ::cosmosapi::Coin* MsgSendValue::add_amount() {
  // @@protoc_insertion_point(field_add:cosmosapi.MsgSendValue.amount)
  return amount_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >*
MsgSendValue::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:cosmosapi.MsgSendValue.amount)
  return &amount_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >&
MsgSendValue::amount() const {
  // @@protoc_insertion_point(field_list:cosmosapi.MsgSendValue.amount)
  return amount_;
}

// optional string from_address = 2;
inline void MsgSendValue::clear_from_address() {
  from_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgSendValue::from_address() const {
  // @@protoc_insertion_point(field_get:cosmosapi.MsgSendValue.from_address)
  return from_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgSendValue::set_from_address(const ::std::string& value) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.MsgSendValue.from_address)
}
inline void MsgSendValue::set_from_address(const char* value) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.MsgSendValue.from_address)
}
inline void MsgSendValue::set_from_address(const char* value, size_t size) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.MsgSendValue.from_address)
}
inline ::std::string* MsgSendValue::mutable_from_address() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.MsgSendValue.from_address)
  return from_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgSendValue::release_from_address() {
  // @@protoc_insertion_point(field_release:cosmosapi.MsgSendValue.from_address)
  
  return from_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgSendValue::set_allocated_from_address(::std::string* from_address) {
  if (from_address != NULL) {
    
  } else {
    
  }
  from_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_address);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.MsgSendValue.from_address)
}

// optional string to_address = 3;
inline void MsgSendValue::clear_to_address() {
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgSendValue::to_address() const {
  // @@protoc_insertion_point(field_get:cosmosapi.MsgSendValue.to_address)
  return to_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgSendValue::set_to_address(const ::std::string& value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.MsgSendValue.to_address)
}
inline void MsgSendValue::set_to_address(const char* value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.MsgSendValue.to_address)
}
inline void MsgSendValue::set_to_address(const char* value, size_t size) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.MsgSendValue.to_address)
}
inline ::std::string* MsgSendValue::mutable_to_address() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.MsgSendValue.to_address)
  return to_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgSendValue::release_to_address() {
  // @@protoc_insertion_point(field_release:cosmosapi.MsgSendValue.to_address)
  
  return to_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgSendValue::set_allocated_to_address(::std::string* to_address) {
  if (to_address != NULL) {
    
  } else {
    
  }
  to_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_address);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.MsgSendValue.to_address)
}

inline const MsgSendValue* MsgSendValue::internal_default_instance() {
  return &MsgSendValue_default_instance_.get();
}
// -------------------------------------------------------------------

// CosmosTxReq

// optional .cosmosapi.SignData signData = 1;
inline bool CosmosTxReq::has_signdata() const {
  return this != internal_default_instance() && signdata_ != NULL;
}
inline void CosmosTxReq::clear_signdata() {
  if (GetArenaNoVirtual() == NULL && signdata_ != NULL) delete signdata_;
  signdata_ = NULL;
}
inline const ::cosmosapi::SignData& CosmosTxReq::signdata() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxReq.signData)
  return signdata_ != NULL ? *signdata_
                         : *::cosmosapi::SignData::internal_default_instance();
}
inline ::cosmosapi::SignData* CosmosTxReq::mutable_signdata() {
  
  if (signdata_ == NULL) {
    signdata_ = new ::cosmosapi::SignData;
  }
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxReq.signData)
  return signdata_;
}
inline ::cosmosapi::SignData* CosmosTxReq::release_signdata() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxReq.signData)
  
  ::cosmosapi::SignData* temp = signdata_;
  signdata_ = NULL;
  return temp;
}
inline void CosmosTxReq::set_allocated_signdata(::cosmosapi::SignData* signdata) {
  delete signdata_;
  signdata_ = signdata;
  if (signdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxReq.signData)
}

// optional string path = 2;
inline void CosmosTxReq::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosTxReq::path() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxReq.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxReq::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxReq.path)
}
inline void CosmosTxReq::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxReq.path)
}
inline void CosmosTxReq::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxReq.path)
}
inline ::std::string* CosmosTxReq::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxReq.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosTxReq::release_path() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxReq.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxReq::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxReq.path)
}

// optional string payment_dis = 3;
inline void CosmosTxReq::clear_payment_dis() {
  payment_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosTxReq::payment_dis() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxReq.payment_dis)
  return payment_dis_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxReq::set_payment_dis(const ::std::string& value) {
  
  payment_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxReq.payment_dis)
}
inline void CosmosTxReq::set_payment_dis(const char* value) {
  
  payment_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxReq.payment_dis)
}
inline void CosmosTxReq::set_payment_dis(const char* value, size_t size) {
  
  payment_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxReq.payment_dis)
}
inline ::std::string* CosmosTxReq::mutable_payment_dis() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxReq.payment_dis)
  return payment_dis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosTxReq::release_payment_dis() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxReq.payment_dis)
  
  return payment_dis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxReq::set_allocated_payment_dis(::std::string* payment_dis) {
  if (payment_dis != NULL) {
    
  } else {
    
  }
  payment_dis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payment_dis);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxReq.payment_dis)
}

// optional string to_dis = 4;
inline void CosmosTxReq::clear_to_dis() {
  to_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosTxReq::to_dis() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxReq.to_dis)
  return to_dis_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxReq::set_to_dis(const ::std::string& value) {
  
  to_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxReq.to_dis)
}
inline void CosmosTxReq::set_to_dis(const char* value) {
  
  to_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxReq.to_dis)
}
inline void CosmosTxReq::set_to_dis(const char* value, size_t size) {
  
  to_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxReq.to_dis)
}
inline ::std::string* CosmosTxReq::mutable_to_dis() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxReq.to_dis)
  return to_dis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosTxReq::release_to_dis() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxReq.to_dis)
  
  return to_dis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxReq::set_allocated_to_dis(::std::string* to_dis) {
  if (to_dis != NULL) {
    
  } else {
    
  }
  to_dis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_dis);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxReq.to_dis)
}

// optional string from_dis = 5;
inline void CosmosTxReq::clear_from_dis() {
  from_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosTxReq::from_dis() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxReq.from_dis)
  return from_dis_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxReq::set_from_dis(const ::std::string& value) {
  
  from_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxReq.from_dis)
}
inline void CosmosTxReq::set_from_dis(const char* value) {
  
  from_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxReq.from_dis)
}
inline void CosmosTxReq::set_from_dis(const char* value, size_t size) {
  
  from_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxReq.from_dis)
}
inline ::std::string* CosmosTxReq::mutable_from_dis() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxReq.from_dis)
  return from_dis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosTxReq::release_from_dis() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxReq.from_dis)
  
  return from_dis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxReq::set_allocated_from_dis(::std::string* from_dis) {
  if (from_dis != NULL) {
    
  } else {
    
  }
  from_dis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_dis);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxReq.from_dis)
}

// optional string fee_dis = 6;
inline void CosmosTxReq::clear_fee_dis() {
  fee_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosTxReq::fee_dis() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxReq.fee_dis)
  return fee_dis_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxReq::set_fee_dis(const ::std::string& value) {
  
  fee_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxReq.fee_dis)
}
inline void CosmosTxReq::set_fee_dis(const char* value) {
  
  fee_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxReq.fee_dis)
}
inline void CosmosTxReq::set_fee_dis(const char* value, size_t size) {
  
  fee_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxReq.fee_dis)
}
inline ::std::string* CosmosTxReq::mutable_fee_dis() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxReq.fee_dis)
  return fee_dis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosTxReq::release_fee_dis() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxReq.fee_dis)
  
  return fee_dis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxReq::set_allocated_fee_dis(::std::string* fee_dis) {
  if (fee_dis != NULL) {
    
  } else {
    
  }
  fee_dis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fee_dis);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxReq.fee_dis)
}

inline const CosmosTxReq* CosmosTxReq::internal_default_instance() {
  return &CosmosTxReq_default_instance_.get();
}
// -------------------------------------------------------------------

// CosmosTxRes

// optional string tx_data = 1;
inline void CosmosTxRes::clear_tx_data() {
  tx_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosTxRes::tx_data() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxRes.tx_data)
  return tx_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxRes::set_tx_data(const ::std::string& value) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxRes.tx_data)
}
inline void CosmosTxRes::set_tx_data(const char* value) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxRes.tx_data)
}
inline void CosmosTxRes::set_tx_data(const char* value, size_t size) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxRes.tx_data)
}
inline ::std::string* CosmosTxRes::mutable_tx_data() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxRes.tx_data)
  return tx_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosTxRes::release_tx_data() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxRes.tx_data)
  
  return tx_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxRes::set_allocated_tx_data(::std::string* tx_data) {
  if (tx_data != NULL) {
    
  } else {
    
  }
  tx_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_data);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxRes.tx_data)
}

// optional string tx_hash = 2;
inline void CosmosTxRes::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosTxRes::tx_hash() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxRes.tx_hash)
  return tx_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxRes::set_tx_hash(const ::std::string& value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxRes.tx_hash)
}
inline void CosmosTxRes::set_tx_hash(const char* value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxRes.tx_hash)
}
inline void CosmosTxRes::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxRes.tx_hash)
}
inline ::std::string* CosmosTxRes::mutable_tx_hash() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxRes.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosTxRes::release_tx_hash() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxRes.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxRes::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxRes.tx_hash)
}

inline const CosmosTxRes* CosmosTxRes::internal_default_instance() {
  return &CosmosTxRes_default_instance_.get();
}
// -------------------------------------------------------------------

// CosmosAddressReq

// optional string path = 1;
inline void CosmosAddressReq::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosAddressReq::path() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosAddressReq.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosAddressReq::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosAddressReq.path)
}
inline void CosmosAddressReq::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosAddressReq.path)
}
inline void CosmosAddressReq::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosAddressReq.path)
}
inline ::std::string* CosmosAddressReq::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosAddressReq.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosAddressReq::release_path() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosAddressReq.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosAddressReq::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosAddressReq.path)
}

inline const CosmosAddressReq* CosmosAddressReq::internal_default_instance() {
  return &CosmosAddressReq_default_instance_.get();
}
// -------------------------------------------------------------------

// CosmosAddressRes

// optional string address = 1;
inline void CosmosAddressRes::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosAddressRes::address() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosAddressRes.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosAddressRes::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosAddressRes.address)
}
inline void CosmosAddressRes::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosAddressRes.address)
}
inline void CosmosAddressRes::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosAddressRes.address)
}
inline ::std::string* CosmosAddressRes::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosAddressRes.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosAddressRes::release_address() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosAddressRes.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosAddressRes::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosAddressRes.address)
}

inline const CosmosAddressRes* CosmosAddressRes::internal_default_instance() {
  return &CosmosAddressRes_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cosmosapi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cosmos_2eproto__INCLUDED
